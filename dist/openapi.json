{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "DEMO API",
      "url": "https://startup2050.com/api/"
    },
    {
      "description": "Localhost API",
      "url": "http://localhost:8000/api/"
    }
  ],
  "info": {
    "description": "3M Platform API - A comprehensive platform for user interactions, messaging, financial management, and profile management.\n\n## Overview\n\nThis API provides a complete solution for the 3M Platform, featuring user authentication, profile management, real-time messaging, financial transactions, and support systems. All endpoints use Laravel Sanctum for authentication with Bearer tokens.\n\n## Latest Updates (October 17, 2025)\n\n**Budget Upgrade Feature:**\n- Added budget upgrade pricing calculation endpoint\n- Added budget upgrade payment submission endpoint\n- Enhanced insufficient budget flow for users with active subscriptions\n- Added detailed pricing breakdown for budget upgrades\n- Enhanced chat endpoints with message visibility based on budget and subscription status\n\n## Key Features\n\n- **User Management**: Complete profile and financial profile management\n- **Real-time Communication**: Chat system with AI moderation, file attachments, and budget-based message visibility\n- **Financial Services**: Wallet management, transactions, subscription plans, and budget upgrade functionality\n- **Social Features**: User interactions, blocking, and reporting systems\n- **Support System**: Ticket management with file attachments and spam protection\n- **Search & Discovery**: Advanced user search with filtering and pagination\n- **Options API**: Static configuration options and predefined values for UI components\n\n## Authentication\n\nMost endpoints require Bearer token authentication:\n```\nAuthorization: Bearer {your_token}\n```\n\n## Rate Limiting\n\n- Chat: 60 requests/minute (30 for sending messages)\n- Support: 10 requests/day per IP\n- General: Varies by endpoint\n\nFor detailed information about specific API sections, please refer to the individual tag descriptions below.",
    "version": "1.1.0",
    "title": "3M Api",
    "contact": {
      "email": "alfi.dev@startup2050.com",
      "name": "Api Developer",
      "url": ""
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints related to user authentication, including login, logout, token management, and API key validation. These routes are used to verify user credentials, establish secure access to the API, and handle user session termination with optional OneSignal subscription cleanup."
    },
    {
      "name": "Profile",
      "description": "Endpoints for viewing, updating, and managing the authenticated user's profile information, such as personal details, preferences, photos, and account settings. Includes comprehensive Profile Images and Albums API for organizing user photos into different categories like personal photos, places visited, interests, and fashion choices."
    },
    {
      "name": "Financial Profile",
      "description": "Endpoints for managing user financial profile information including budget, capital level, income, milestone settings, and financial options. All endpoints require Bearer token authentication."
    },
    {
      "name": "Currencies",
      "description": "Get all the available currencies data"
    },
    {
      "name": "Chat",
      "description": "The Chat API provides comprehensive messaging functionality for the platform, including direct messaging, message management, and chat room operations. All endpoints require authentication and integrate with RocketChat for real-time messaging. Features include AI-powered content moderation with strike system, file attachments, real-time events, chat archiving, message search, and rate limiting. The API supports both text messages and file attachments, with automatic content moderation that can disable chat between users based on violation strikes."
    },
    {
      "name": "Reports & Interactions",
      "description": "Endpoints for user interactions including profile management (archive, save, interest), user blocking, zoom call requests, and user reporting. All endpoints require Bearer token authentication."
    },
    {
      "name": "Contracts",
      "description": "Endpoints for managing contracts between sponsors and seekers, including contract creation, approval, modification, and lifecycle management."
    },
    {
      "name": "People",
      "description": "The People API provides endpoints for viewing public user profiles and their information. These endpoints allow authenticated users to view other users' profiles using their public username. All endpoints require Bearer token authentication and return comprehensive profile data including personal information, relationship preferences, financial details, living arrangements, and profile images. The API also includes a public endpoint for retrieving age ranges used in profile display and search functionality."
    },
    {
      "name": "Support Tickets",
      "description": "Endpoints for managing support tickets, including creating, viewing, updating tickets, retrieving categories, statuses, and notification options, and managing ticket messages with file attachments. Supports both authenticated users and guest access with pagination. File attachments support PDF, JPG, JPEG, PNG (max 15MB each). Rate limited: 10 requests per day per IP, 20 requests per day per IP network. All endpoints use optional authentication middleware, working with Bearer tokens or X-Guest-Email headers. Includes spam protection, file validation, and comprehensive ticket lifecycle management."
    },
    {
      "name": "Notifications",
      "description": "The Notifications API provides comprehensive endpoints for managing user notifications, including listing, filtering, marking as read, updating importance, and managing user preferences. All endpoints require Bearer token authentication.\n\n## Features\n\n- **Filtering & Pagination**: Filter by importance (low/medium/high), categories, and read status with pagination support\n- **Read Management**: Mark individual or all notifications as read\n- **Importance Control**: Update notification importance (except for Notice category)\n- **User Preferences**: Manage notification delivery preferences (email/push) and content type\n- **Real-time Count**: Get unread notification count for badges\n- **Styling Support**: Pre-calculated CSS classes and hex colors for consistent UI rendering\n- **Link Extraction**: Automatic extraction of URLs from message content (domain removed, path only)\n\n## Notification Types\n\n### Profile Notifications\n- **Category**: `Profile` | **Group**: `Profile` | **Importance**: medium (default, changeable)\n- Sent when someone marks a user as interested\n- Includes interested user details (ID, name, avatar)\n- **Styling**: Icon bg-pink-400 (#F472B6), Category bg-pink-100 text-pink-700\n\n### Notice Notifications\n- **Category**: `Notice` | **Group**: `Notice` | **Importance**: Set by admin (unchangeable)\n- System-generated notifications with HTML content support\n- Automatically extracts links from message content into `links_in_message` array\n- **Styling**: Icon bg-blue-400 (#60A5FA), Category bg-blue-100 text-blue-700\n- **Note**: Importance cannot be changed by users\n\n### Balance Notifications\n- **Categories**: `BalanceIncrease`, `BalanceDecrease` | **Group**: `Balance` | **Importance**: low (default, changeable)\n- Sent for wallet transactions and balance changes\n- Includes transaction details (ID, amount, currency)\n- **Styling**: Icon bg-green-400 (#4ADE80), Category bg-green-100 text-green-700\n\n### Contract Notifications\n- **Categories**: `ContractOfferReceived`, `ContractOfferSent`, `ContractStopped`, `ContractApproved`, `ContractRestarted`, `ContractPausedReminder`, `ContractRejected`, `ContractChangeRequested`\n- **Group**: `Contract` | **Importance**: medium (default, changeable)\n- **Styling**: Icon bg-purple-400 (#A78BFA), Category bg-purple-100 text-purple-700\n\n### Chat Notifications\n- **Category**: `Chat` | **Importance**: medium (default, changeable)\n- Sent for chat-related activities\n\n## Implementation Notes\n\n1. **Filtering**: Use query parameters to filter by importance, categories (comma-separated), and read status\n2. **Pagination**: All list endpoints support `per_page` and `page` parameters (default: 15/page)\n3. **Importance Updates**: Only non-Notice notifications can have their importance changed\n4. **Preferences**: Automatically created with defaults if they don't exist\n5. **Styling**: Each notification includes CSS classes and hex colors for consistent UI rendering\n6. **Link Extraction**: The `links_in_message` field extracts all HTML anchor tag URLs, removes domains, and keeps only paths for easy in-app navigation\n7. **Timezone Support**: Timestamps provided in both UTC and user's local timezone with formatted versions\n\n## Mobile App Integration\n\n### Recommended Flow\n1. **App Launch**: GET `/unread-count` for badge\n2. **Notifications Screen**: GET `/filter` for options, then GET `/` with filters\n3. **Notification Tap**: GET `/{id}` for details, then POST `/{id}/mark-read`\n4. **Settings**: Use `/preferences` endpoints\n5. **Background Sync**: Periodically call `/unread-count`\n\n### Link Navigation\nUse the `links_in_message` array to navigate to links extracted from notification messages:\n```javascript\nif (notification.links_in_message.length > 0) {\n  const path = notification.links_in_message[0];\n  router.push(path); // Navigate to /profile/edit, /settings, etc.\n}\n```"
    },
    {
      "name": "Affiliate",
      "description": "Endpoints for managing affiliate links, statistics, and earnings. All endpoints require Bearer token authentication using Laravel Sanctum."
    },
    {
      "name": "Wallet",
      "description": "Endpoints for managing user wallet and balance information, including retrieving current balance, deposits, withdrawals, and purchase power. All endpoints require Bearer token authentication."
    },
    {
      "name": "Search",
      "description": "Endpoints for searching user profiles with advanced filtering options including location, budget, languages, and custom parameters. Features automatic role-based filtering (sponsors see seekers, seekers see sponsors), mutual interest visibility, location-based search using Haversine formula, currency conversion for budget comparisons, and comprehensive custom parameter filtering across general info, relationship preferences, financial details, and living preferences. Supports pagination, sorting by budget/age/created date, and subscription-based filtering. All endpoints require Bearer token authentication."
    },
    {
      "name": "Subscription",
      "description": "Endpoints for managing user subscriptions, including viewing current subscription, available plans, submitting subscriptions, and managing budget upgrades. All endpoints require Bearer token authentication using Laravel Sanctum."
    },
    {
      "name": "Transactions",
      "description": "Endpoints for managing user transactions, including viewing transaction history, details, status, and cancellation. All endpoints require Bearer token authentication using Laravel Sanctum. Supports filtering by status and type, with comprehensive transaction data including payments, subscription plans, and counterparty information. Features include status styling with CSS classes and color codes, pagination, and detailed transaction relationships."
    },
    {
      "name": "Options",
      "description": "Endpoints for retrieving static configuration options and predefined values used throughout the 3M Matching Platform. These endpoints return static data that clients can use to populate dropdown menus, form fields, and other UI components. All options endpoints are public and do not require authentication."
    },
    {
      "name": "Account Management",
      "description": "Endpoints for managing user account settings including username, password, and email updates. All endpoints require authentication using Laravel Sanctum Bearer tokens. Features include validation, activity logging, and security measures for account modifications."
    },
    {
      "name": "OneSignal",
      "description": "Endpoints for managing OneSignal push notification subscriptions and player IDs. Handles device registration, subscription management, and logout cleanup for push notifications. All endpoints require Bearer token authentication using Laravel Sanctum."
    }
  ],
  "paths": {
    "/login": {
      "parameters": [],
      "servers": [],
      "post": {
        "summary": "POST",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "login_name": {
                              "type": "string"
                            },
                            "public_username": {
                              "type": "string"
                            },
                            "first_name": {
                              "type": "null"
                            },
                            "last_name": {
                              "type": "null"
                            },
                            "email": {
                              "type": "string"
                            },
                            "email_verified_at": {
                              "type": "string"
                            },
                            "email_verified": {
                              "type": "integer"
                            },
                            "gender": {
                              "type": "string"
                            },
                            "partner_preference": {
                              "type": "string"
                            },
                            "relationship_goals": {
                              "type": "string"
                            },
                            "role": {
                              "type": "string"
                            },
                            "profile_picture": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            },
                            "deleted_at": {
                              "type": "null"
                            },
                            "profile_picture_url": {
                              "type": "string"
                            }
                          }
                        },
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Login successful",
                      "data": {
                        "user": {
                          "id": 5,
                          "login_name": "alfi_syah",
                          "public_username": "alfi_syah",
                          "first_name": null,
                          "last_name": null,
                          "email": "mrriyous@gmail.com",
                          "email_verified_at": "2025-06-02T06:15:00.000000Z",
                          "email_verified": 1,
                          "gender": "male",
                          "partner_preference": "female",
                          "relationship_goals": "long-term",
                          "role": "rs",
                          "profile_picture": "profile-pictures/5_1749097276.jpg",
                          "created_at": "2025-06-02T06:14:41.000000Z",
                          "updated_at": "2025-06-05T04:21:16.000000Z",
                          "deleted_at": null,
                          "profile_picture_url": "https://startup2050.com/storage/profile-pictures/5_1749097276.jpg"
                        },
                        "token": "93|y3wTIV52GxASW7x0YYViJVIYy55TBpYrxq0VAzZ0c452f980"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "recaptcha": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "errors": {
                        "recaptcha": [
                          "reCAPTCHA verification failed. Please try again"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "login",
        "description": "",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password",
                  "is_mobile"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "x-stoplight": {
                      "id": "xd3rw9p0duu5z"
                    }
                  },
                  "password": {
                    "type": "string",
                    "x-stoplight": {
                      "id": "2umpyvtmq04af"
                    }
                  },
                  "recaptcha": {
                    "type": "string",
                    "x-stoplight": {
                      "id": "o3tid2pdqufw1"
                    },
                    "description": "Required if is_mobile != Y"
                  },
                  "is_mobile": {
                    "x-stoplight": {
                      "id": "ov3l324vg1t69"
                    },
                    "enum": [
                      "Y",
                      "N"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Registration",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Step 1 - Initial Validation Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates if there was an error",
                      "example": false
                    },
                    "recaptcha_session_id": {
                      "type": "string",
                      "description": "Session ID for Step 2 reCAPTCHA verification",
                      "example": "abc123xyz456..."
                    }
                  },
                  "required": ["error", "recaptcha_session_id"]
                },
                "examples": {
                  "Success": {
                    "summary": "Successful Step 1 validation",
                    "value": {
                      "error": false,
                      "recaptcha_session_id": "abc123xyz456..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Step 1 - Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates there was an error",
                      "example": true
                    },
                    "errors": {
                      "type": "object",
                      "description": "Validation error details",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "login_name": ["This login name is already taken"],
                        "password": ["Password must contain at least one special character"]
                      }
                    }
                  },
                  "required": ["error", "errors"]
                },
                "examples": {
                  "Validation Error": {
                    "summary": "Step 1 validation failed",
                    "value": {
                      "error": true,
                      "errors": {
                        "login_name": ["This login name is already taken"],
                        "password": ["Password must contain at least one special character"]
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Step 2 - Registration Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates if there was an error",
                      "example": false
                    },
                    "user": {
                      "type": "object",
                      "description": "Created user information",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "User ID",
                          "example": 1
                        },
                        "login_name": {
                          "type": "string",
                          "description": "User's login name",
                          "example": "johndoe123"
                        },
                        "public_username": {
                          "type": "string",
                          "description": "User's public display name",
                          "example": "JohnDoe"
                        },
                        "first_name": {
                          "type": "string",
                          "description": "User's first name",
                          "example": "John"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "User's last name",
                          "example": "Doe"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "User's email address",
                          "nullable": true,
                          "example": "john@example.com"
                        },
                        "gender": {
                          "type": "string",
                          "description": "User's gender",
                          "example": "male"
                        },
                        "partner_preference": {
                          "type": "string",
                          "description": "User's partner preference",
                          "example": "female"
                        },
                        "duration_preference": {
                          "type": "string",
                          "description": "User's relationship duration preference",
                          "nullable": true,
                          "example": "long_term_relationship"
                        },
                        "role": {
                          "type": "string",
                          "description": "User's role in the platform",
                          "example": "rs"
                        },
                        "affiliate_code": {
                          "type": "string",
                          "description": "User's generated affiliate code",
                          "example": "ABC123XYZ"
                        },
                        "is_test_user": {
                          "type": "integer",
                          "description": "Indicates if user is a test user",
                          "example": 0
                        },
                        "timeoffset": {
                          "type": "number",
                          "description": "User's timezone offset in minutes",
                          "nullable": true,
                          "example": -300
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "User creation timestamp",
                          "example": "2024-03-20T10:00:00Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "User last update timestamp",
                          "example": "2024-03-20T10:00:00Z"
                        }
                      },
                      "required": ["id", "login_name", "public_username", "first_name", "last_name", "gender", "partner_preference", "role", "affiliate_code", "is_test_user", "created_at", "updated_at"]
                    },
                    "token": {
                      "type": "string",
                      "description": "Authentication token for the created user",
                      "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                    }
                  },
                  "required": ["error", "user", "token"]
                },
                "examples": {
                  "Success": {
                    "summary": "Successful registration",
                    "value": {
                      "error": false,
                      "user": {
                        "id": 1,
                        "login_name": "johndoe123",
                        "public_username": "JohnDoe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@example.com",
                        "gender": "male",
                        "partner_preference": "female",
                        "duration_preference": "long_term_relationship",
                        "role": "rs",
                        "affiliate_code": "ABC123XYZ",
                        "is_test_user": 0,
                        "timeoffset": -300,
                        "created_at": "2024-03-20T10:00:00Z",
                        "updated_at": "2024-03-20T10:00:00Z"
                      },
                      "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Step 2 - Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates there was an error",
                      "example": true
                    },
                    "errors": {
                      "type": "object",
                      "description": "Validation error details",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "example": {
                        "recaptcha_session_id": ["reCAPTCHA verification failed. Please try again"],
                        "gender": ["Gender is required"],
                        "partner_preference": ["Partner preference is required"],
                        "duration_preference": ["Please select your relationship duration preference"],
                        "role": ["Role is required"],
                        "budget": ["Minimum budget required is 100"],
                        "currency": ["Invalid currency"]
                      }
                    }
                  },
                  "required": ["error", "errors"]
                },
                "examples": {
                  "Validation Error": {
                    "summary": "Step 2 validation failed",
                    "value": {
                      "error": true,
                      "errors": {
                        "recaptcha_session_id": ["reCAPTCHA verification failed. Please try again"],
                        "gender": ["Gender is required"],
                        "partner_preference": ["Partner preference is required"],
                        "duration_preference": ["Please select your relationship duration preference"],
                        "role": ["Role is required"],
                        "budget": ["Minimum budget required is 100"],
                        "currency": ["Invalid currency"]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "registration",
        "description": "Registration API with two-step process for user account creation.\n\n## Step 1: Initial Validation\nValidates user credentials and performs reCAPTCHA verification. Returns a session ID for Step 2.\n\n## Step 2: Complete Registration\nCompletes user registration with additional profile information and creates the user account.\n\n### Key Features:\n- Two-step registration process with reCAPTCHA verification\n- Mobile registration support (skips reCAPTCHA when is_mobile=Y)\n- Comprehensive validation for all fields\n- Automatic profile creation (financial, relationship, visibility settings)\n- Affiliate/referral system support\n- Timezone handling with offset or timezone identifier\n- Budget conversion to system default currency\n- RocketChat integration\n- Email verification and welcome notifications\n- Test user detection (login_name starting with 'test_')\n\n### Validation Rules:\n- login_name: 4-20 chars, alphanumeric with ._\n- public_username: 3-20 chars, alphanumeric with ._\n- password: min 8 chars, 1 uppercase, 1 number, 1 special char\n- email: valid email format (optional)\n- budget: minimum 100\n- gender: male, female, other\n- partner_preference: male, female, any\n- duration_preference: short_term_relationship, medium_term_relationship, long_term_relationship\n- role: rs, srs\n- currency: valid currency code\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-examples": {
                  "Step 1 - Initial Validation": {
                    "step": 1,
                    "login_name": "johndoe123",
                    "public_username": "JohnDoe",
                    "email": "john@example.com",
                    "password": "Password123!",
                    "password_confirmation": "Password123!",
                    "terms_accepted": "1",
                    "recaptcha": "03AFcWeA5...",
                    "is_mobile": "N"
                  },
                  "Step 2 - Complete Registration": {
                    "step": 2,
                    "login_name": "johndoe123",
                    "public_username": "JohnDoe",
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john@example.com",
                    "password": "Password123!",
                    "password_confirmation": "Password123!",
                    "terms_accepted": "1",
                    "recaptcha": "03AFcWeA5...",
                    "recaptcha_session_id": "abc123xyz456...",
                    "is_mobile": "N",
                    "gender": "male",
                    "partner_preference": "female",
                    "duration_preference": "long_term_relationship",
                    "role": "rs",
                    "budget": 5000,
                    "currency": "USD",
                    "timeoffset": -300,
                    "affiliate_code": "REF123ABC"
                  },
                  "Mobile Registration (Step 1)": {
                    "step": 1,
                    "login_name": "johndoe123",
                    "public_username": "JohnDoe",
                    "email": "john@example.com",
                    "password": "Password123!",
                    "password_confirmation": "Password123!",
                    "terms_accepted": "1",
                    "is_mobile": "Y"
                  },
                  "Mobile Registration (Step 2)": {
                    "step": 2,
                    "login_name": "johndoe123",
                    "public_username": "JohnDoe",
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "john@example.com",
                    "password": "Password123!",
                    "password_confirmation": "Password123!",
                    "terms_accepted": "1",
                    "is_mobile": "Y",
                    "gender": "male",
                    "partner_preference": "female",
                    "duration_preference": "long_term_relationship",
                    "role": "rs",
                    "budget": 5000,
                    "currency": "USD",
                    "timezone": "America/New_York",
                    "affiliate_code": "REF123ABC"
                  }
                },
                "properties": {
                  "step": {
                    "type": "integer",
                    "description": "Registration step number. Must be 1 for initial validation or 2 for complete registration.",
                    "enum": [1, 2],
                    "example": 1
                  },
                  "login_name": {
                    "type": "string",
                    "description": "Unique identifier for login. 4-20 characters, alphanumeric with ._ allowed.",
                    "minLength": 4,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9._]+$",
                    "example": "johndoe123"
                  },
                  "public_username": {
                    "type": "string",
                    "description": "Display name visible to other users. 3-20 characters, alphanumeric with ._ allowed.",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9._]+$",
                    "example": "JohnDoe"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "User's first name. Required for Step 2.",
                    "nullable": true,
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "User's last name. Required for Step 2.",
                    "nullable": true,
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address. Optional but recommended.",
                    "nullable": true,
                    "example": "john@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "Account password. Minimum 8 characters, must contain 1 uppercase letter, 1 number, and 1 special character.",
                    "minLength": 8,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
                    "example": "Password123!"
                  },
                  "password_confirmation": {
                    "type": "string",
                    "description": "Password confirmation. Must match the password field.",
                    "example": "Password123!"
                  },
                  "terms_accepted": {
                    "type": "string",
                    "description": "Terms and conditions acceptance. Must be '1' to accept.",
                    "enum": ["1"],
                    "example": "1"
                  },
                  "recaptcha": {
                    "type": "string",
                    "description": "Google reCAPTCHA response token. Required for Step 1 and Step 2 unless is_mobile=Y.",
                    "nullable": true,
                    "example": "03AFcWeA5..."
                  },
                  "recaptcha_session_id": {
                    "type": "string",
                    "description": "Session ID from Step 1. Required for Step 2 unless is_mobile=Y.",
                    "nullable": true,
                    "example": "abc123xyz456..."
                  },
                  "is_mobile": {
                    "type": "string",
                    "description": "Set to 'Y' for mobile registration to skip reCAPTCHA verification.",
                    "enum": ["Y", "N"],
                    "default": "N",
                    "example": "N"
                  },
                  "gender": {
                    "type": "string",
                    "description": "User's gender. Required for Step 2.",
                    "enum": ["male", "female", "other"],
                    "example": "male"
                  },
                  "partner_preference": {
                    "type": "string",
                    "description": "Preferred partner gender. Required for Step 2.",
                    "enum": ["male", "female", "any"],
                    "example": "female"
                  },
                  "duration_preference": {
                    "type": "string",
                    "description": "Preferred relationship duration. Optional for Step 2.",
                    "enum": ["short_term_relationship", "medium_term_relationship", "long_term_relationship"],
                    "nullable": true,
                    "example": "long_term_relationship"
                  },
                  "role": {
                    "type": "string",
                    "description": "User's role in the platform. Required for Step 2.",
                    "enum": ["rs", "srs"],
                    "example": "rs"
                  },
                  "budget": {
                    "type": "number",
                    "description": "User's budget preference. Required for Step 2, minimum 100.",
                    "minimum": 100,
                    "example": 5000
                  },
                  "currency": {
                    "type": "string",
                    "description": "User's preferred currency code. Required for Step 2.",
                    "example": "USD"
                  },
                  "timeoffset": {
                    "type": "number",
                    "description": "User's timezone offset in minutes (JavaScript getTimezoneOffset() value). Optional.",
                    "nullable": true,
                    "example": -300
                  },
                  "timezone": {
                    "type": "string",
                    "description": "User's timezone identifier (alternative to timeoffset). Optional.",
                    "nullable": true,
                    "example": "America/New_York"
                  },
                  "affiliate_code": {
                    "type": "string",
                    "description": "Referral code from another user. Optional.",
                    "nullable": true,
                    "example": "REF123ABC"
                  }
                },
                "required": ["step", "login_name", "public_username", "password", "password_confirmation", "terms_accepted"]
              },
              "examples": {}
            }
          }
        }
      }
    },
    "/password/reset-link": {
      "post": {
        "summary": "Send Reset Password Link",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "We have emailed your password reset link."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (WebDAV)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "We can't find a user with that email address.",
                      "errors": {
                        "email": [
                          "We can't find a user with that email address."
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "Error Response Example": {
                    "value": {
                      "error": true,
                      "message": "We can't find a user with that email address.",
                      "errors": {
                        "email": [
                          "We can't find a user with that email address."
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-password-reset-link",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "x-stoplight": {
                      "id": "0qpiuigm74dfo"
                    },
                    "format": "email"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/verification-request": {
      "post": {
        "summary": "Send Verification Email",
        "tags": [
          "Authentication"
        ],
        "responses": {},
        "operationId": "post-account-verification-request",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Get User Data",
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "login_name": {
                          "type": "string"
                        },
                        "public_username": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "email_verified_at": {
                          "type": "string"
                        },
                        "email_verified": {
                          "type": "integer"
                        },
                        "gender": {
                          "type": "string"
                        },
                        "partner_preference": {
                          "type": "string"
                        },
                        "relationship_goals": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "profile_picture": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "updated_at": {
                          "type": "string"
                        },
                        "deleted_at": {
                          "type": "null"
                        },
                        "profile_picture_url": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "data": {
                        "id": 14,
                        "login_name": "mrriyous",
                        "public_username": "mrriyous",
                        "first_name": "Alfi",
                        "last_name": "Syahri",
                        "email": "mrriyous@gmail.com",
                        "email_verified_at": "2025-05-07T13:10:49.000000Z",
                        "email_verified": 1,
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "Long term relationships",
                        "role": "rs",
                        "profile_picture": "profile-pictures/14_1748358438.jpg",
                        "created_at": "2025-04-11T14:24:10.000000Z",
                        "updated_at": "2025-05-27T15:07:18.000000Z",
                        "deleted_at": null,
                        "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                      }
                    }
                  }
                },
                "examples": {
                  "Sample Response": {
                    "value": {
                      "data": {
                        "id": 14,
                        "login_name": "user",
                        "public_username": "user",
                        "first_name": "user",
                        "last_name": "1",
                        "email": "testinguser@gmail.com",
                        "email_verified_at": "2025-05-07T13:10:49.000000Z",
                        "email_verified": 1,
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "Long term relationships",
                        "role": "rs",
                        "profile_picture": "profile-pictures/14_1748358438.jpg",
                        "created_at": "2025-04-11T14:24:10.000000Z",
                        "updated_at": "2025-05-27T15:07:18.000000Z",
                        "deleted_at": null,
                        "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                      }
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "operationId": "get-user",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/profile/basic-info": {
      "get": {
        "summary": "Get Basic Info",
        "description": "Get your basic profile information including personal details, contact information, and profile settings.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "public_username": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "gender": {
                          "type": "string"
                        },
                        "partner_preference": {
                          "type": "string"
                        },
                        "relationship_goals": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "profile_picture_url": {
                          "type": "string"
                        },
                        "email_verified": {
                          "type": "boolean"
                        },
                        "initials": {
                          "type": "string"
                        },
                        "profile": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "birth_date": {
                              "type": "string"
                            },
                            "age_display": {
                              "type": "string"
                            },
                            "orientation": {
                              "type": "string"
                            },
                            "short_intro": {
                              "type": "string"
                            },
                            "weight": {
                              "type": "string"
                            },
                            "height": {
                              "type": "string"
                            },
                            "extended_descriptions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {}
                              }
                            },
                            "family_views": {
                              "type": "string"
                            },
                            "financial_views": {
                              "type": "string"
                            },
                            "long_term_views": {
                              "type": "string"
                            },
                            "secret_text": {
                              "type": "string"
                            },
                            "education_level": {
                              "type": "string"
                            },
                            "profession": {
                              "type": "string"
                            },
                            "religion": {
                              "type": "string"
                            },
                            "ethnicity": {
                              "type": "string"
                            },
                            "astrology_belief": {
                              "type": "boolean"
                            },
                            "personality_type": {
                              "type": "string"
                            },
                            "location_residence": {
                              "type": "string"
                            },
                            "location_residence_place_id": {
                              "type": "string"
                            },
                            "location_residence_latitude": {
                              "type": "string"
                            },
                            "location_residence_longitude": {
                              "type": "string"
                            },
                            "location_residence_secondary_text": {
                              "type": "string"
                            },
                            "relocation_readiness": {
                              "type": "string"
                            },
                            "location_search": {
                              "type": "string"
                            },
                            "location_search_place_id": {
                              "type": "string"
                            },
                            "location_search_latitude": {
                              "type": "string"
                            },
                            "location_search_longitude": {
                              "type": "string"
                            },
                            "location_search_secondary_text": {
                              "type": "string"
                            },
                            "location_difference_reason": {
                              "type": "string"
                            },
                            "languages": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "code": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "fluency": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "hobbies": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "emoji": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "created_at": {
                              "type": "string"
                            },
                            "updated_at": {
                              "type": "string"
                            }
                          }
                        },
                        "profileImages": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "url": {
                                "type": "string"
                              },
                              "thumbnail_url": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "updated_at": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "id": 14,
                        "public_username": "user",
                        "first_name": "User",
                        "last_name": "User",
                        "email": "user@gmail.com",
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "Long term relationships",
                        "role": "rs",
                        "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg",
                        "email_verified": true,
                        "initials": "AS",
                        "profile": {
                          "id": 1,
                          "birth_date": "1998-05-16",
                          "age_display": "Show Exact Age",
                          "orientation": "Heterosexual",
                          "short_intro": "Short intro",
                          "weight": "70.00",
                          "height": "170.00",
                          "extended_descriptions": [],
                          "family_views": "Family views",
                          "financial_views": "Financial Views",
                          "long_term_views": "Longterm Views Text",
                          "secret_text": "Secret Text",
                          "education_level": "High School",
                          "profession": "Software Engineer",
                          "religion": "Islam",
                          "ethnicity": "Black",
                          "astrology_belief": true,
                          "personality_type": "introvert",
                          "location_residence": "Jakarta Selatan",
                          "location_residence_place_id": "ChIJs7AiJOzxaS4RAk1AR_7QoDk",
                          "location_residence_latitude": "-6.2474095",
                          "location_residence_longitude": "106.8060767",
                          "location_residence_secondary_text": "South Jakarta City, Jakarta, Indonesia",
                          "relocation_readiness": "yes",
                          "location_search": "Medan",
                          "location_search_place_id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                          "location_search_latitude": "3.5951956",
                          "location_search_longitude": "98.6722227",
                          "location_search_secondary_text": "Medan City, North Sumatra, Indonesia",
                          "location_difference_reason": "I don't know",
                          "languages": [
                            {
                              "id": 5,
                              "code": "de",
                              "name": "German",
                              "fluency": 4
                            },
                            {
                              "id": 14,
                              "code": "ja",
                              "name": "Japanese",
                              "fluency": 5
                            },
                            {
                              "id": 1,
                              "code": "en",
                              "name": "English",
                              "fluency": 5
                            },
                            {
                              "id": 2,
                              "code": "ar",
                              "name": "Arabic",
                              "fluency": 5
                            },
                            {
                              "id": 11,
                              "code": "sv",
                              "name": "Swedish",
                              "fluency": 3
                            },
                            {
                              "id": 9,
                              "code": "zh",
                              "name": "Chinese",
                              "fluency": 5
                            }
                          ],
                          "hobbies": [
                            {
                              "id": 5,
                              "name": "Travel",
                              "emoji": "✈️"
                            },
                            {
                              "id": 1,
                              "name": "Reading",
                              "emoji": "📚"
                            },
                            {
                              "id": 3,
                              "name": "Gaming",
                              "emoji": "🎮"
                            },
                            {
                              "id": 4,
                              "name": "Music",
                              "emoji": "🎵"
                            },
                            {
                              "id": 12,
                              "name": "Fashion",
                              "emoji": "👔"
                            },
                            {
                              "id": 9,
                              "name": "Cooking",
                              "emoji": "🍳"
                            },
                            {
                              "id": 6,
                              "name": "Painting",
                              "emoji": "🎨"
                            },
                            {
                              "id": 8,
                              "name": "Charity",
                              "emoji": "💖"
                            }
                          ],
                          "created_at": "2025-04-16T15:25:06.000000Z",
                          "updated_at": "2025-06-05T06:19:59.000000Z"
                        },
                        "profileImages": [
                          {
                            "id": 14,
                            "url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg",
                            "thumbnail_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          }
                        ],
                        "created_at": "2025-04-11T14:24:10.000000Z",
                        "updated_at": "2025-05-27T15:07:18.000000Z"
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "data": {
                        "id": 14,
                        "public_username": "user",
                        "first_name": "User",
                        "last_name": "User",
                        "email": "user@gmail.com",
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "Long term relationships",
                        "role": "rs",
                        "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg",
                        "email_verified": true,
                        "initials": "AS",
                        "profile": {
                          "id": 1,
                          "birth_date": "1998-05-16",
                          "age_display": "Show Exact Age",
                          "orientation": "Heterosexual",
                          "short_intro": "Short intro",
                          "weight": "70.00",
                          "height": "170.00",
                          "extended_descriptions": [],
                          "family_views": "Family views",
                          "financial_views": "Financial Views",
                          "long_term_views": "Longterm Views Text",
                          "secret_text": "Secret Text",
                          "education_level": "High School",
                          "profession": "Software Engineer",
                          "religion": "Islam",
                          "ethnicity": "Black",
                          "astrology_belief": true,
                          "personality_type": "introvert",
                          "location_residence": "Jakarta Selatan",
                          "location_residence_place_id": "ChIJs7AiJOzxaS4RAk1AR_7QoDk",
                          "location_residence_latitude": "-6.2474095",
                          "location_residence_longitude": "106.8060767",
                          "location_residence_secondary_text": "South Jakarta City, Jakarta, Indonesia",
                          "relocation_readiness": "yes",
                          "location_search": "Medan",
                          "location_search_place_id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                          "location_search_latitude": "3.5951956",
                          "location_search_longitude": "98.6722227",
                          "location_search_secondary_text": "Medan City, North Sumatra, Indonesia",
                          "location_difference_reason": "I don't know",
                          "languages": [
                            {
                              "id": 5,
                              "code": "de",
                              "name": "German",
                              "fluency": 4
                            },
                            {
                              "id": 14,
                              "code": "ja",
                              "name": "Japanese",
                              "fluency": 5
                            },
                            {
                              "id": 1,
                              "code": "en",
                              "name": "English",
                              "fluency": 5
                            },
                            {
                              "id": 2,
                              "code": "ar",
                              "name": "Arabic",
                              "fluency": 5
                            },
                            {
                              "id": 11,
                              "code": "sv",
                              "name": "Swedish",
                              "fluency": 3
                            },
                            {
                              "id": 9,
                              "code": "zh",
                              "name": "Chinese",
                              "fluency": 5
                            }
                          ],
                          "hobbies": [
                            {
                              "id": 5,
                              "name": "Travel",
                              "emoji": "✈️"
                            },
                            {
                              "id": 1,
                              "name": "Reading",
                              "emoji": "📚"
                            },
                            {
                              "id": 3,
                              "name": "Gaming",
                              "emoji": "🎮"
                            },
                            {
                              "id": 4,
                              "name": "Music",
                              "emoji": "🎵"
                            },
                            {
                              "id": 12,
                              "name": "Fashion",
                              "emoji": "👔"
                            },
                            {
                              "id": 9,
                              "name": "Cooking",
                              "emoji": "🍳"
                            },
                            {
                              "id": 6,
                              "name": "Painting",
                              "emoji": "🎨"
                            },
                            {
                              "id": 8,
                              "name": "Charity",
                              "emoji": "💖"
                            }
                          ],
                          "created_at": "2025-04-16T15:25:06.000000Z",
                          "updated_at": "2025-06-05T06:19:59.000000Z"
                        },
                        "profileImages": [
                          {
                            "id": 14,
                            "url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg",
                            "thumbnail_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          }
                        ],
                        "created_at": "2025-04-11T14:24:10.000000Z",
                        "updated_at": "2025-05-27T15:07:18.000000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-profile-basic-info"
      }
    },
    "/profile/completion-percentage": {
      "get": {
        "summary": "Get Profile Completion Percentage",
        "description": "Get your profile completion percentage and detailed breakdown of completed sections. The completion percentage is calculated in real-time based on current profile data.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile completion percentage retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "percentage": {
                          "type": "integer",
                          "description": "Overall profile completion percentage (0-100)",
                          "example": 75
                        },
                        "breakdown": {
                          "type": "object",
                          "description": "Detailed breakdown of completion by category",
                          "properties": {
                            "personal_photos": {
                              "type": "object",
                              "description": "Personal photos completion (14% weight, 2% per photo, max 7 photos)",
                              "properties": {
                                "fields": {
                                  "type": "string",
                                  "description": "Field name in profile",
                                  "example": "album.my_photos"
                                },
                                "count": {
                                  "type": "integer",
                                  "description": "Number of photos uploaded",
                                  "example": 5
                                },
                                "required": {
                                  "type": "integer",
                                  "description": "Maximum number of photos for full completion",
                                  "example": 7
                                },
                                "percentage": {
                                  "type": "integer",
                                  "description": "Completion percentage for this category",
                                  "example": 10
                                },
                                "completed": {
                                  "type": "boolean",
                                  "description": "Whether this category is fully completed",
                                  "example": false
                                }
                              }
                            },
                            "monthly_budget": {
                              "type": "object",
                              "description": "Monthly budget completion (10% weight)",
                              "properties": {
                                "fields": {
                                  "type": "string",
                                  "description": "Field name in profile",
                                  "example": "lifestyle_support_budget"
                                },
                                "completed": {
                                  "type": "boolean",
                                  "description": "Whether lifestyle support budget is set",
                                  "example": true
                                },
                                "percentage": {
                                  "type": "integer",
                                  "description": "Completion percentage for this category",
                                  "example": 10
                                }
                              }
                            },
                            "description": {
                              "type": "object",
                              "description": "Profile description completion (10% weight)",
                              "properties": {
                                "fields": {
                                  "type": "string",
                                  "description": "Field name in profile",
                                  "example": "short_intro"
                                },
                                "completed": {
                                  "type": "boolean",
                                  "description": "Whether short introduction is provided",
                                  "example": true
                                },
                                "percentage": {
                                  "type": "integer",
                                  "description": "Completion percentage for this category",
                                  "example": 10
                                }
                              }
                            },
                            "languages": {
                              "type": "object",
                              "description": "Languages completion (5% weight)",
                              "properties": {
                                "fields": {
                                  "type": "string",
                                  "description": "Field name in profile",
                                  "example": "user_languages"
                                },
                                "completed": {
                                  "type": "boolean",
                                  "description": "Whether at least one language with fluency > 0 is set",
                                  "example": true
                                },
                                "percentage": {
                                  "type": "integer",
                                  "description": "Completion percentage for this category",
                                  "example": 5
                                }
                              }
                            },
                            "geo_search": {
                              "type": "object",
                              "description": "Geographic search preferences completion (10% weight)",
                              "properties": {
                                "fields": {
                                  "type": "string",
                                  "description": "Field names in profile",
                                  "example": "location_search,location_search_place_id"
                                },
                                "completed": {
                                  "type": "boolean",
                                  "description": "Whether search location preferences are set",
                                  "example": true
                                },
                                "percentage": {
                                  "type": "integer",
                                  "description": "Completion percentage for this category",
                                  "example": 10
                                }
                              }
                            },
                            "remaining_fields": {
                              "type": "object",
                              "description": "All other profile fields completion (51% weight)",
                              "properties": {
                                "empty_remaining_fields": {
                                  "type": "array",
                                  "description": "List of empty fields that need completion",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": ["weight", "height", "education_level", "profession"]
                                },
                                "total_fields": {
                                  "type": "integer",
                                  "description": "Total number of remaining fields",
                                  "example": 12
                                },
                                "completed_fields": {
                                  "type": "integer",
                                  "description": "Number of completed remaining fields",
                                  "example": 8
                                },
                                "percentage": {
                                  "type": "integer",
                                  "description": "Completion percentage for remaining fields",
                                  "example": 34
                                },
                                "is_sponsor": {
                                  "type": "boolean",
                                  "description": "Whether the user is a sponsor (role: 'rs')",
                                  "example": false
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "error": false,
                      "data": {
                        "percentage": 75,
                        "breakdown": {
                          "personal_photos": {
                            "fields": "album.my_photos",
                            "count": 5,
                            "required": 7,
                            "percentage": 10,
                            "completed": false
                          },
                          "monthly_budget": {
                            "fields": "lifestyle_support_budget",
                            "completed": true,
                            "percentage": 10
                          },
                          "description": {
                            "fields": "short_intro",
                            "completed": true,
                            "percentage": 10
                          },
                          "languages": {
                            "fields": "user_languages",
                            "completed": true,
                            "percentage": 5
                          },
                          "geo_search": {
                            "fields": "location_search,location_search_place_id",
                            "completed": true,
                            "percentage": 10
                          },
                          "remaining_fields": {
                            "empty_remaining_fields": [
                              "weight",
                              "height",
                              "education_level",
                              "profession"
                            ],
                            "total_fields": 12,
                            "completed_fields": 8,
                            "percentage": 34,
                            "is_sponsor": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to calculate profile completion percentage"
                    },
                    "error_detail": {
                      "type": "string",
                      "description": "Detailed error message"
                    },
                    "error_line": {
                      "type": "integer",
                      "description": "Line number where error occurred",
                      "example": 865
                    }
                  }
                },
                "examples": {
                  "Error Response": {
                    "value": {
                      "error": true,
                      "message": "Failed to calculate profile completion percentage",
                      "error_detail": "Detailed error message",
                      "error_line": 865
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-profile-completion-percentage"
      }
    },
    "/profile/relationship-info": {
      "get": {
        "summary": "Get Relationship Info",
        "description": "Get your relationship preferences and goals including partner preferences, relationship goals, duration preferences, and availability times.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "relationship_goals": {
                          "type": "string"
                        },
                        "partner_preference": {
                          "type": "string"
                        },
                        "duration_preference": {
                          "type": "string"
                        },
                        "available_time_morning": {
                          "type": "string"
                        },
                        "available_time_afternoon": {
                          "type": "string"
                        },
                        "available_time_evening": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "updated_at": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "id": 14,
                        "relationship_goals": "long_term",
                        "partner_preference": "female",
                        "duration_preference": "Long-term relationship (more than 6 months)",
                        "available_time_morning": "5",
                        "available_time_afternoon": "2",
                        "available_time_evening": "1",
                        "created_at": "2025-04-17T13:50:26.000000Z",
                        "updated_at": "2025-05-01T14:58:30.000000Z"
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "data": {
                        "id": 14,
                        "relationship_goals": "long_term",
                        "partner_preference": "female",
                        "duration_preference": "Long-term relationship (more than 6 months)",
                        "available_time_morning": "5",
                        "available_time_afternoon": "2",
                        "available_time_evening": "1",
                        "created_at": "2025-04-17T13:50:26.000000Z",
                        "updated_at": "2025-05-01T14:58:30.000000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-profile-relationship-info"
      }
    },
    "/profile/financial-info": {
      "get": {
        "summary": "Get Financial Info",
        "description": "Get your financial profile information including lifestyle support budget, capital level, income details, child payments, marriage gifts, and milestone settings. Supports currency conversion via query parameter.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency code for viewing amounts in a different currency (e.g., 'AED', 'EUR'). If not provided, uses the user's default currency.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Financial profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "get-profile-financial-info"
      }
    },
    "/profile/living-info": {
      "get": {
        "summary": "Get Living Info",
        "description": "Get your living profile information including transportation availability, living format preferences, and housing images.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "user_id": {
                          "type": "integer"
                        },
                        "driving_license_availability": {
                          "type": "string"
                        },
                        "car_availability": {
                          "type": "string"
                        },
                        "driver_availability": {
                          "type": "string"
                        },
                        "living_format_test_moon": {
                          "type": "string"
                        },
                        "living_format_preliminary_contract": {
                          "type": "string"
                        },
                        "living_format_final_contract": {
                          "type": "string"
                        },
                        "living_format_test_moon_image_url": {
                          "type": "string"
                        },
                        "living_format_test_moon_image_thumbnail_url": {
                          "type": "string"
                        },
                        "living_format_preliminary_contract_image_url": {
                          "type": "string"
                        },
                        "living_format_preliminary_contract_image_thumbnail_url": {
                          "type": "string"
                        },
                        "living_format_final_contract_image_url": {
                          "type": "string"
                        },
                        "living_format_final_contract_image_thumbnail_url": {
                          "type": "string"
                        },
                        "housing_image_url": {
                          "type": "null"
                        },
                        "housing_image_thumbnail_url": {
                          "type": "null"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "updated_at": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "id": 1,
                        "user_id": 14,
                        "driving_license_availability": "no",
                        "car_availability": "yes",
                        "driver_availability": "yes",
                        "living_format_test_moon": "together_own_room",
                        "living_format_preliminary_contract": "together_one_room",
                        "living_format_final_contract": "together_own_room",
                        "living_format_test_moon_image_url": "http://localhost:8000/storage/living-form-pictures/pi_14_17470565097964.jpg",
                        "living_format_test_moon_image_thumbnail_url": "http://localhost:8000/storage/living-form-pictures/pi_thumb_14_17470565097964.jpg",
                        "living_format_preliminary_contract_image_url": "http://localhost:8000/storage/living-form-pictures/pi_14_17470565091008.jpg",
                        "living_format_preliminary_contract_image_thumbnail_url": "http://localhost:8000/storage/living-form-pictures/pi_thumb_14_17470565091008.jpg",
                        "living_format_final_contract_image_url": "http://localhost:8000/storage/living-form-pictures/pi_14_17483521547766.jpg",
                        "living_format_final_contract_image_thumbnail_url": "http://localhost:8000/storage/living-form-pictures/pi_thumb_14_17483521547766.jpg",
                        "housing_image_url": null,
                        "housing_image_thumbnail_url": null,
                        "created_at": "2025-04-18T14:52:34.000000Z",
                        "updated_at": "2025-05-27T13:22:34.000000Z"
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "data": {
                        "id": 1,
                        "user_id": 14,
                        "driving_license_availability": "no",
                        "car_availability": "yes",
                        "driver_availability": "yes",
                        "living_format_test_moon": "together_own_room",
                        "living_format_preliminary_contract": "together_one_room",
                        "living_format_final_contract": "together_own_room",
                        "living_format_test_moon_image_url": "http://localhost:8000/storage/living-form-pictures/pi_14_17470565097964.jpg",
                        "living_format_test_moon_image_thumbnail_url": "http://localhost:8000/storage/living-form-pictures/pi_thumb_14_17470565097964.jpg",
                        "living_format_preliminary_contract_image_url": "http://localhost:8000/storage/living-form-pictures/pi_14_17470565091008.jpg",
                        "living_format_preliminary_contract_image_thumbnail_url": "http://localhost:8000/storage/living-form-pictures/pi_thumb_14_17470565091008.jpg",
                        "living_format_final_contract_image_url": "http://localhost:8000/storage/living-form-pictures/pi_14_17483521547766.jpg",
                        "living_format_final_contract_image_thumbnail_url": "http://localhost:8000/storage/living-form-pictures/pi_thumb_14_17483521547766.jpg",
                        "housing_image_url": null,
                        "housing_image_thumbnail_url": null,
                        "created_at": "2025-04-18T14:52:34.000000Z",
                        "updated_at": "2025-05-27T13:22:34.000000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-profile-living-info"
      }
    },
    "/profile/visibility-setting": {
      "get": {
        "summary": "Get Visibility Setting",
        "description": "Get your current profile visibility settings.\n\n**Status of Registration**: Choose whether unregistered visitors can see your profile. Note that some registered users may use for their search another device whilst being not logged in. However, if the parameter is not set to registered users only, the photos will become publicly available the same way as they would in Instagram or other social networks.\n\n**Financial Verification Status**: Financial verification means that a user stating certain monthly budget confirms his commitment by buying the annual subscription that costs multiple amounts of the monthly budget and confirms by that his financial soundness. Note that this does not amount to a full guarantee of the financial soundness. Even if you choose \"All Users\", only those having purchased Annual subscription would be able to contact you. This setting affects only the visibility to those without the Annual subscription. Your profile will not be seen even by those who have verified their monthly budget but set it lower than the budget set by SP.\n\n**Mutual Interest Requirement**: Indicate whether there is a requirement that the user should be marked by you as interesting before they are able to see your profile. If this option is set, your profile will be invisible for everyone except those whose profiles were found by you on the Search Page and marked as Interesting.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Visibility settings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Visibility setting ID",
                          "example": 1
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "User ID",
                          "example": 123
                        },
                        "status_of_registration": {
                          "type": "string",
                          "description": "Registration status visibility - \"all\" (Any Visitor) or \"registered\" (Registered Visitor)",
                          "enum": ["all", "registered"],
                          "example": "registered"
                        },
                        "financial_verification_status": {
                          "type": "string",
                          "description": "Financial verification status - \"verified\" (Only Verified-Finance Users) or \"all\" (All Users)",
                          "enum": ["verified", "all"],
                          "example": "verified"
                        },
                        "mutual_interest_requirement": {
                          "type": "string",
                          "description": "Mutual interest requirement - \"all\" (Any Visitors) or \"marked\" (Only marked by me)",
                          "enum": ["all", "marked"],
                          "example": "marked"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp",
                          "example": "2024-01-15T10:30:00.000000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp",
                          "example": "2024-01-20T14:45:00.000000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/picture": {
      "post": {
        "summary": "Upload Profile Picture",
        "description": "Upload or update your profile picture. The image will be automatically resized and optimized for web display.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profile_picture": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile picture image file (max 10MB, formats: jpeg, png, jpg, gif, heic, heif, webp)"
                  }
                },
                "required": ["profile_picture"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile picture has been updated successfully"
                    },
                    "image_url": {
                      "type": "string",
                      "description": "URL of the uploaded profile picture",
                      "example": "https://example.com/storage/profile-pictures/123_1640995200.jpg"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Profile picture has been updated successfully",
                      "image_url": "https://example.com/storage/profile-pictures/123_1640995200.jpg"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "The profile picture must not be larger than 10MB."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "profile_picture": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The profile picture must not be larger than 10MB."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/about": {
      "post": {
        "summary": "Update About Section",
        "description": "Update your profile's about section including basic information, personal details, location preferences, languages, hobbies, partner preference, lifestyle support budget, and extended descriptions. For users with active subscriptions (role: 'rs'), lifestyle support budget changes are stored as pending and applied after subscription ends. Currency conversion is automatic if user's currency differs from system default.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "public_username": {
                    "type": "string",
                    "description": "Public username (3-20 chars, alphanumeric + underscore/dot)",
                    "minLength": 3,
                    "maxLength": 20,
                    "pattern": "^[a-zA-Z0-9._]+$"
                  },
                  "birth_date": {
                    "type": "string",
                    "format": "date",
                    "description": "Birth date (before today, after 1900-01-01)"
                  },
                  "age_display": {
                    "type": "string",
                    "description": "Age display preference",
                    "enum": ["Show Exact Age", "Show Age Range", "Hide Age"]
                  },
                  "weight": {
                    "type": "number",
                    "description": "Weight in kg (40-150)",
                    "minimum": 40,
                    "maximum": 150
                  },
                  "height": {
                    "type": "number",
                    "description": "Height in cm (50-230)",
                    "minimum": 50,
                    "maximum": 230
                  },
                  "orientation": {
                    "type": "string",
                    "description": "Sexual orientation",
                    "maxLength": 50
                  },
                  "short_intro": {
                    "type": "string",
                    "description": "Short introduction",
                    "maxLength": 1000
                  },
                  "extended_description": {
                    "type": "array",
                    "description": "Extended descriptions (max 9 items, 10000 chars each)",
                    "maxItems": 9,
                    "items": {
                      "type": "string",
                      "maxLength": 10000
                    }
                  },
                  "family_views": {
                    "type": "string",
                    "description": "Views on family",
                    "maxLength": 10000
                  },
                  "financial_views": {
                    "type": "string",
                    "description": "Views on finances",
                    "maxLength": 10000
                  },
                  "long_term_views": {
                    "type": "string",
                    "description": "Long-term goals",
                    "maxLength": 10000
                  },
                  "secret_text": {
                    "type": "string",
                    "description": "Secret text",
                    "maxLength": 10000
                  },
                  "education_level": {
                    "type": "string",
                    "description": "Education level",
                    "maxLength": 100
                  },
                  "profession": {
                    "type": "string",
                    "description": "Profession",
                    "maxLength": 100
                  },
                  "religion": {
                    "type": "string",
                    "description": "Religion",
                    "maxLength": 50
                  },
                  "ethnicity": {
                    "type": "string",
                    "description": "Ethnicity",
                    "maxLength": 50
                  },
                  "astrology_belief": {
                    "type": "boolean",
                    "description": "Interest in astrology"
                  },
                  "personality_type": {
                    "type": "string",
                    "description": "Personality type",
                    "maxLength": 50
                  },
                  "location_residence": {
                    "type": "string",
                    "description": "Current residence",
                    "maxLength": 50
                  },
                  "location_residence_place_id": {
                    "type": "string",
                    "description": "Google Place ID for residence"
                  },
                  "location_residence_latitude": {
                    "type": "number",
                    "description": "Residence latitude"
                  },
                  "location_residence_longitude": {
                    "type": "number",
                    "description": "Residence longitude"
                  },
                  "location_residence_secondary_text": {
                    "type": "string",
                    "description": "Additional residence info",
                    "maxLength": 255
                  },
                  "relocation_readiness": {
                    "type": "string",
                    "description": "Relocation readiness",
                    "enum": ["yes", "no", "maybe"]
                  },
                  "location_search": {
                    "type": "string",
                    "description": "Preferred search location",
                    "maxLength": 50
                  },
                  "location_search_place_id": {
                    "type": "string",
                    "description": "Google Place ID for search"
                  },
                  "location_search_latitude": {
                    "type": "number",
                    "description": "Search location latitude"
                  },
                  "location_search_longitude": {
                    "type": "number",
                    "description": "Search location longitude"
                  },
                  "location_search_secondary_text": {
                    "type": "string",
                    "description": "Additional search location info",
                    "maxLength": 255
                  },
                  "location_difference_reason": {
                    "type": "string",
                    "description": "Reason for location difference",
                    "maxLength": 10000
                  },
                  "languages": {
                    "type": "array",
                    "description": "Languages array with code and fluency (1-5)",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Language code"
                        },
                        "fluency": {
                          "type": "integer",
                          "description": "Fluency level (1-5)",
                          "minimum": 1,
                          "maximum": 5
                        }
                      },
                      "required": ["code", "fluency"]
                    }
                  },
                  "hobbies": {
                    "type": "string",
                    "description": "Comma-separated hobby IDs"
                  },
                  "partner_preference": {
                    "type": "string",
                    "description": "Preferred partner gender: 'male', 'female', or 'any'",
                    "enum": ["male", "female", "any"],
                    "example": "female"
                  },
                  "lifestyle_support_budget": {
                    "type": "number",
                    "description": "Monthly lifestyle support budget (0-1000000). For users with active subscriptions (role: 'rs'), changes are stored as pending and applied after subscription ends. Automatically converted to system currency if user's currency differs.",
                    "minimum": 0,
                    "maximum": 1000000,
                    "example": 5000
                  }
                },
                "required": ["public_username", "birth_date", "age_display", "partner_preference"]
              },
              "x-examples": {
                "Example 1": {
                  "public_username": "john_doe",
                  "birth_date": "1990-05-15",
                  "age_display": "Show Exact Age",
                  "weight": 70,
                  "height": 175,
                  "orientation": "Straight",
                  "short_intro": "Looking for meaningful connections",
                  "extended_description": [
                    "I love traveling and exploring new cultures",
                    "I'm passionate about photography and nature"
                  ],
                  "family_views": "Open to having children",
                  "financial_views": "Financial stability is important",
                  "long_term_views": "Looking for a life partner",
                  "secret_text": "I'm secretly a great cook",
                  "education_level": "Bachelor's Degree",
                  "profession": "Software Engineer",
                  "religion": "Christian",
                  "ethnicity": "Caucasian",
                  "astrology_belief": true,
                  "personality_type": "INTJ",
                  "location_residence": "New York, NY, USA",
                  "location_residence_place_id": "ChIJOwg_06VPwokRYv534QaPC8g",
                  "location_residence_latitude": 40.7128,
                  "location_residence_longitude": -74.0060,
                  "location_residence_secondary_text": "Manhattan",
                  "relocation_readiness": "yes",
                  "location_search": "San Francisco, CA, USA",
                  "location_search_place_id": "ChIJIQBpAG2ahYAR_6128GcTUEo",
                  "location_search_latitude": 37.7749,
                  "location_search_longitude": -122.4194,
                  "location_search_secondary_text": "Bay Area",
                  "location_difference_reason": "Career opportunities",
                  "languages": [
                    {
                      "code": "en",
                      "fluency": 5
                    },
                    {
                      "code": "es",
                      "fluency": 3
                    }
                  ],
                  "hobbies": "1,5,12,23",
                  "partner_preference": "female",
                  "lifestyle_support_budget": 5000
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile has been saved"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "User ID"
                        },
                        "public_username": {
                          "type": "string",
                          "description": "Public username"
                        },
                        "profile": {
                          "type": "object",
                          "description": "Updated profile information",
                          "properties": {
                            "birth_date": {
                              "type": "string",
                              "format": "date"
                            },
                            "age_display": {
                              "type": "string"
                            },
                            "weight": {
                              "type": "number"
                            },
                            "height": {
                              "type": "number"
                            },
                            "orientation": {
                              "type": "string"
                            },
                            "short_intro": {
                              "type": "string"
                            },
                            "extended_descriptions": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "order": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "family_views": {
                              "type": "string"
                            },
                            "financial_views": {
                              "type": "string"
                            },
                            "long_term_views": {
                              "type": "string"
                            },
                            "secret_text": {
                              "type": "string"
                            },
                            "education_level": {
                              "type": "string"
                            },
                            "profession": {
                              "type": "string"
                            },
                            "religion": {
                              "type": "string"
                            },
                            "ethnicity": {
                              "type": "string"
                            },
                            "astrology_belief": {
                              "type": "string"
                            },
                            "personality_type": {
                              "type": "string"
                            },
                            "location_residence": {
                              "type": "string"
                            },
                            "location_residence_place_id": {
                              "type": "string"
                            },
                            "location_residence_latitude": {
                              "type": "number"
                            },
                            "location_residence_longitude": {
                              "type": "number"
                            },
                            "location_residence_secondary_text": {
                              "type": "string"
                            },
                            "relocation_readiness": {
                              "type": "string"
                            },
                            "location_search": {
                              "type": "string"
                            },
                            "location_search_place_id": {
                              "type": "string"
                            },
                            "location_search_latitude": {
                              "type": "number"
                            },
                            "location_search_longitude": {
                              "type": "number"
                            },
                            "location_search_secondary_text": {
                              "type": "string"
                            },
                            "location_difference_reason": {
                              "type": "string"
                            },
                            "languages": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "code": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "fluency": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "hobbies": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "emoji": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "changes": {
                      "type": "object",
                      "description": "Object containing all modified fields with old values, new values, and formatted messages. Only changed fields are included.",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "old": {
                            "description": "Previous value"
                          },
                          "new": {
                            "description": "New value"
                          },
                          "message": {
                            "type": "string",
                            "description": "HTML-formatted user-friendly description of the change (formatted by ChangeFormatterService)"
                          },
                          "plain_message": {
                            "type": "string",
                            "description": "Plain text version of the change message for mobile display"
                          },
                          "display_value": {
                            "description": "The formatted new value for styling purposes (e.g., \"70 kg\", \"enabled\")"
                          },
                          "old_display_value": {
                            "description": "The formatted old value for styling purposes (e.g., \"75 kg\", \"disabled\")"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Profile has been saved",
                      "data": {
                        "id": 123,
                        "public_username": "john_doe",
                        "profile": {
                          "birth_date": "1990-05-15",
                          "age_display": "Show Exact Age",
                          "weight": 70,
                          "height": 175,
                          "orientation": "Straight",
                          "short_intro": "Looking for meaningful connections",
                          "extended_descriptions": [
                            {
                              "id": 1,
                              "description": "I love traveling and exploring new cultures",
                              "order": 1
                            }
                          ],
                          "family_views": "Open to having children",
                          "financial_views": "Financial stability is important",
                          "long_term_views": "Looking for a life partner",
                          "secret_text": "I'm secretly a great cook",
                          "education_level": "Bachelor's Degree",
                          "profession": "Software Engineer",
                          "religion": "Christian",
                          "ethnicity": "Caucasian",
                          "astrology_belief": "Moderately interested",
                          "personality_type": "INTJ",
                          "location_residence": "New York, NY, USA",
                          "location_residence_place_id": "ChIJOwg_06VPwokRYv534QaPC8g",
                          "location_residence_latitude": 40.7128,
                          "location_residence_longitude": -74.0060,
                          "location_residence_secondary_text": "Manhattan",
                          "relocation_readiness": "Open to relocation",
                          "location_search": "San Francisco, CA, USA",
                          "location_search_place_id": "ChIJIQBpAG2ahYAR_6128GcTUEo",
                          "location_search_latitude": 37.7749,
                          "location_search_longitude": -122.4194,
                          "location_search_secondary_text": "Bay Area",
                          "location_difference_reason": "Career opportunities",
                          "languages": [
                            {
                              "id": 1,
                              "code": "en",
                              "name": "English",
                              "fluency": 5
                            }
                          ],
                          "hobbies": [
                            {
                              "id": 1,
                              "name": "Photography",
                              "emoji": "📸"
                            }
                          ]
                        }
                      },
                      "changes": {
                        "public_username": {
                          "old": "john_doe_old",
                          "new": "john_doe",
                          "message": "Username has been changed from john_doe_old to john_doe",
                          "plain_message": "Username has been changed from john_doe_old to john_doe",
                          "display_value": "john_doe",
                          "old_display_value": "john_doe_old"
                        },
                        "short_intro": {
                          "old": "Old introduction",
                          "new": "Looking for meaningful connections",
                          "message": "Short introduction has been changed from Old introduction to Looking for meaningful connections",
                          "plain_message": "Short introduction has been changed from Old introduction to Looking for meaningful connections",
                          "display_value": "Looking for meaningful connections",
                          "old_display_value": "Old introduction"
                        },
                        "weight": {
                          "old": 75,
                          "new": 70,
                          "message": "Weight has been changed from 75 kg to 70 kg",
                          "plain_message": "Weight has been changed from 75 kg to 70 kg",
                          "display_value": "70 kg",
                          "old_display_value": "75 kg"
                        },
                        "extended_description": {
                          "old": ["Old description"],
                          "new": ["I love traveling and exploring new cultures"],
                          "message": "Extended descriptions have been updated",
                          "plain_message": "Extended descriptions have been updated",
                          "display_value": null,
                          "old_display_value": null
                        },
                        "languages": {
                          "old": {"en": 4, "fr": 2},
                          "new": {"en": 5, "es": 3},
                          "message": "Languages have been updated",
                          "plain_message": "Languages have been updated",
                          "display_value": null,
                          "old_display_value": null
                        },
                        "hobbies": {
                          "old": ["Photography", "Reading"],
                          "new": ["Photography", "Cooking"],
                          "message": "Hobbies have been updated",
                          "plain_message": "Hobbies have been updated",
                          "display_value": null,
                          "old_display_value": null
                        },
                        "partner_preference": {
                          "old": "any",
                          "new": "female",
                          "message": "Partner preference has been changed from any to female",
                          "plain_message": "Partner preference has been changed from any to female",
                          "display_value": "female",
                          "old_display_value": "any"
                        },
                        "lifestyle_support_budget": {
                          "old": "4000.00",
                          "new": "5000.00",
                          "message": "Lifestyle support budget has been changed from 4000.00 to 5000.00",
                          "plain_message": "Lifestyle support budget has been changed from 4000.00 to 5000.00",
                          "display_value": "5000.00",
                          "old_display_value": "4000.00"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please check your inputs and try again."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "public_username": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["This public username is already taken"]
                        },
                        "birth_date": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["Birth date is invalid."]
                        },
                        "weight": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["Weight must be at least 40 kg"]
                        },
                        "height": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["Height must not exceed 230 cm"]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/relationship": {
      "post": {
        "summary": "Update Relationship Preferences",
        "description": "Update your relationship preferences and goals including relationship goals, duration preferences, and availability times. Note: Partner preference is managed through the /api/profile/about endpoint.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "relationship_goals": {
                    "type": "string",
                    "description": "Your relationship goals",
                    "example": "marriage"
                  },
                  "duration_preference": {
                    "type": "string",
                    "description": "Preferred relationship duration",
                    "example": "long_term"
                  },
                  "available_time_morning": {
                    "type": "boolean",
                    "description": "Available in morning",
                    "example": true
                  },
                  "available_time_afternoon": {
                    "type": "boolean",
                    "description": "Available in afternoon",
                    "example": true
                  },
                  "available_time_evening": {
                    "type": "boolean",
                    "description": "Available in evening",
                    "example": false
                  }
                }
              },
              "x-examples": {
                "Example 1": {
                  "relationship_goals": "marriage",
                  "duration_preference": "long_term",
                  "available_time_morning": true,
                  "available_time_afternoon": true,
                  "available_time_evening": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Relationship preferences updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Relationship preferences has been updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Relationship preference ID"
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "User ID"
                        },
                        "relationship_goals": {
                          "type": "string",
                          "description": "Relationship goals"
                        },
                        "duration_preference": {
                          "type": "string",
                          "description": "Duration preference"
                        },
                        "available_time_morning": {
                          "type": "boolean",
                          "description": "Morning availability"
                        },
                        "available_time_afternoon": {
                          "type": "boolean",
                          "description": "Afternoon availability"
                        },
                        "available_time_evening": {
                          "type": "boolean",
                          "description": "Evening availability"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp"
                        }
                      }
                    },
                    "changes": {
                      "type": "object",
                      "description": "Object containing all modified fields with old values, new values, and formatted messages. Only changed fields are included.",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "old": {
                            "description": "Previous value"
                          },
                          "new": {
                            "description": "New value"
                          },
                          "message": {
                            "type": "string",
                            "description": "HTML-formatted user-friendly description of the change (formatted by ChangeFormatterService)"
                          },
                          "plain_message": {
                            "type": "string",
                            "description": "Plain text version of the change message for mobile display"
                          },
                          "display_value": {
                            "description": "The formatted new value for styling purposes (e.g., \"70 kg\", \"enabled\")"
                          },
                          "old_display_value": {
                            "description": "The formatted old value for styling purposes (e.g., \"75 kg\", \"disabled\")"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Relationship preferences has been updated successfully",
                      "data": {
                        "id": 1,
                        "user_id": 123,
                        "relationship_goals": "marriage",
                        "duration_preference": "long_term",
                        "available_time_morning": true,
                        "available_time_afternoon": true,
                        "available_time_evening": false,
                        "created_at": "2024-01-15T10:30:00.000000Z",
                        "updated_at": "2024-01-20T14:45:00.000000Z"
                      },
                      "changes": {
                        "relationship_goals": {
                          "old": "casual",
                          "new": "marriage",
                          "message": "Relationship goals has been changed from casual to marriage",
                          "plain_message": "Relationship goals has been changed from casual to marriage",
                          "display_value": "marriage",
                          "old_display_value": "casual"
                        },
                        "duration_preference": {
                          "old": "short_term",
                          "new": "long_term",
                          "message": "Duration preference has been changed from short_term to long_term",
                          "plain_message": "Duration preference has been changed from short_term to long_term",
                          "display_value": "long_term",
                          "old_display_value": "short_term"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please check your inputs and try again."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "partner_preference": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The partner preference field is required."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/financial": {
      "post": {
        "summary": "Update Financial Profile",
        "description": "Update your financial profile information including capital level, income details, child payments, marriage gifts, and milestone settings. Note: The lifestyle_support_budget field has been moved to /api/profile/about endpoint. For detailed financial profile documentation, see Financial Profile API.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "capital_level_precise": {
                    "type": "string",
                    "description": "Precise capital level value (mutually exclusive with capital_level_less_precise)",
                    "example": "1000000"
                  },
                  "capital_level_less_precise": {
                    "type": "string",
                    "description": "Less precise capital level value (mutually exclusive with capital_level_precise)",
                    "example": "1M+"
                  },
                  "monthly_income_precise": {
                    "type": "string",
                    "description": "Precise monthly income value",
                    "example": "50000"
                  },
                  "monthly_income_less_precise": {
                    "type": "string",
                    "description": "Less precise monthly income value",
                    "example": "50K+"
                  },
                  "first_child_payment": {
                    "type": "number",
                    "description": "Payment for first child",
                    "minimum": 0,
                    "example": 10000
                  },
                  "second_child_payment": {
                    "type": "number",
                    "description": "Payment for second child",
                    "minimum": 0,
                    "example": 8000
                  },
                  "subsequent_child_payment": {
                    "type": "number",
                    "description": "Payment for subsequent children",
                    "minimum": 0,
                    "example": 5000
                  },
                  "monthly_child_budget": {
                    "type": "number",
                    "description": "Monthly budget for children",
                    "minimum": 0,
                    "example": 2000
                  },
                  "marriage_gift": {
                    "type": "number",
                    "description": "Gift amount for marriage",
                    "minimum": 0,
                    "example": 50000
                  },
                  "growth_bonus": {
                    "type": "number",
                    "description": "Growth bonus percentage",
                    "minimum": 0,
                    "maximum": 100,
                    "example": 10
                  },
                  "growth_clause": {
                    "type": "number",
                    "description": "Growth clause duration in months",
                    "minimum": 1,
                    "example": 12
                  },
                  "termination_comp": {
                    "type": "number",
                    "description": "Termination compensation",
                    "minimum": 0,
                    "example": 10000
                  },
                  "termination_clause": {
                    "type": "number",
                    "description": "Termination notice period in months",
                    "minimum": 6,
                    "example": 6
                  },
                  "milestone_amounts": {
                    "type": "array",
                    "description": "Array of milestone gift amounts",
                    "items": {
                      "type": "number",
                      "minimum": 0
                    },
                    "example": [5000, 10000]
                  },
                  "milestone_periods": {
                    "type": "array",
                    "description": "Array of milestone gift periods",
                    "items": {
                      "type": "string"
                    },
                    "example": ["6 months", "12 months"]
                  }
                }
              },
              "x-examples": {
                "Example 1": {
                  "capital_level_precise": "1000000",
                  "monthly_income_precise": "50000",
                  "first_child_payment": 10000,
                  "second_child_payment": 8000,
                  "subsequent_child_payment": 5000,
                  "monthly_child_budget": 2000,
                  "marriage_gift": 50000,
                  "growth_bonus": 10,
                  "growth_clause": 12,
                  "termination_comp": 10000,
                  "termination_clause": 6,
                  "milestone_amounts": [5000, 10000],
                  "milestone_periods": ["6 months", "12 months"]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Financial profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Financial profile has been updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "description": "Updated financial profile data"
                    },
                    "changes": {
                      "type": "object",
                      "description": "Object containing all modified fields with old values, new values, and formatted messages. Only changed fields are included.",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "old": {
                            "description": "Previous value"
                          },
                          "new": {
                            "description": "New value"
                          },
                          "message": {
                            "type": "string",
                            "description": "HTML-formatted user-friendly description of the change (formatted by ChangeFormatterService)"
                          },
                          "plain_message": {
                            "type": "string",
                            "description": "Plain text version of the change message for mobile display"
                          },
                          "display_value": {
                            "description": "The formatted new value for styling purposes (e.g., \"70 kg\", \"enabled\")"
                          },
                          "old_display_value": {
                            "description": "The formatted old value for styling purposes (e.g., \"75 kg\", \"disabled\")"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Financial profile has been updated successfully",
                      "data": {
                        "id": 1,
                        "user_id": 123,
                        "capital_level_precise": "100000-250000",
                        "monthly_income_precise": "10000-15000",
                        "first_child_payment": "5000.00",
                        "second_child_payment": "3000.00",
                        "subsequent_child_payment": "2000.00",
                        "monthly_child_budget": "1500.00",
                        "marriage_gift": "10000.00",
                        "growth_bonus": "10",
                        "growth_clause": "12",
                        "termination_comp": "15000.00",
                        "termination_clause": "6",
                        "created_at": "2024-01-15T10:30:00.000000Z",
                        "updated_at": "2024-01-20T14:45:00.000000Z"
                      },
                      "changes": {
                        "first_child_payment": {
                          "old": "4000.00",
                          "new": "5000.00",
                          "message": "First child payment has been changed from 4000.00 to 5000.00",
                          "plain_message": "First child payment has been changed from 4000.00 to 5000.00",
                          "display_value": "5000.00",
                          "old_display_value": "4000.00"
                        },
                        "milestone_gifts": {
                          "old": [{"amount": "5000", "period": "6_months"}],
                          "new": [{"amount": "10000", "period": "12_months"}],
                          "message": "Milestone gifts have been updated",
                          "plain_message": "Milestone gifts have been updated",
                          "display_value": null,
                          "old_display_value": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please check your inputs and try again."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "lifestyle_support_budget": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The lifestyle support budget field is required."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/monthly-budget": {
      "post": {
        "summary": "Update Monthly Budget",
        "description": "Quick update for monthly lifestyle support budget without affecting other financial profile fields. For RS (Relationship Sponsor) users with active subscriptions, budget changes are queued as pending_lifestyle_support_budget until a budget upgrade payment is processed. The actual budget remains unchanged until payment. Automatic currency conversion is applied. If no financial profile exists, returns 404 error.",
        "tags": [
          "Financial Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lifestyle_support_budget": {
                    "type": "number",
                    "description": "Monthly lifestyle support budget",
                    "minimum": 0,
                    "example": 5000
                  }
                },
                "required": ["lifestyle_support_budget"]
              },
              "x-examples": {
                "Example 1": {
                  "lifestyle_support_budget": 5000
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Monthly budget updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Monthly budget has been updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "lifestyle_support_budget": {
                          "type": "number",
                          "description": "Current lifestyle support budget",
                          "example": 5000
                        },
                        "lifestyle_support_budget_in_sc": {
                          "type": "number",
                          "description": "Lifestyle support budget in system currency",
                          "example": 5000
                        },
                        "pending_lifestyle_support_budget": {
                          "type": "number",
                          "description": "Pending lifestyle support budget (for RS users with active subscription)",
                          "example": 0
                        },
                        "currency": {
                          "type": "string",
                          "description": "Currency code",
                          "example": "USD"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Monthly budget has been updated successfully",
                      "data": {
                        "lifestyle_support_budget": 5000,
                        "lifestyle_support_budget_in_sc": 5000,
                        "pending_lifestyle_support_budget": 0,
                        "currency": "USD"
                      }
                    },
                    "Example 2 - RS User with Active Subscription": {
                      "error": false,
                      "message": "Monthly budget has been updated successfully",
                      "data": {
                        "lifestyle_support_budget": 3000,
                        "lifestyle_support_budget_in_sc": 3000,
                        "pending_lifestyle_support_budget": 5000,
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Financial profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Financial profile not found. Please complete your profile first."
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "Financial profile not found. Please complete your profile first."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please check your inputs and try again."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "lifestyle_support_budget": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The lifestyle support budget field is required."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/living": {
      "post": {
        "summary": "Update Living Profile",
        "description": "Update your living arrangements and preferences including transportation availability, living format preferences, and housing images.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "driving_license_availability": {
                    "type": "boolean",
                    "description": "Has driving license",
                    "example": true
                  },
                  "car_availability": {
                    "type": "boolean",
                    "description": "Has car",
                    "example": true
                  },
                  "driver_availability": {
                    "type": "boolean",
                    "description": "Has driver",
                    "example": false
                  },
                  "living_format_test_moon": {
                    "type": "string",
                    "description": "Test moon living format",
                    "example": "apartment"
                  },
                  "living_format_preliminary_contract": {
                    "type": "string",
                    "description": "Preliminary contract format",
                    "example": "rental"
                  },
                  "living_format_final_contract": {
                    "type": "string",
                    "description": "Final contract format",
                    "example": "purchase"
                  },
                  "living_format_test_moon_image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Test moon image (max 15MB)"
                  },
                  "living_format_preliminary_contract_image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Preliminary contract image (max 15MB)"
                  },
                  "living_format_final_contract_image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Final contract image (max 15MB)"
                  },
                  "housing_image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Housing image (max 15MB)"
                  }
                }
              },
              "x-examples": {
                "Example 1": {
                  "driving_license_availability": true,
                  "car_availability": true,
                  "driver_availability": false,
                  "living_format_test_moon": "apartment",
                  "living_format_preliminary_contract": "rental",
                  "living_format_final_contract": "purchase"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Living profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Living profile has been updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Living profile ID"
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "User ID"
                        },
                        "driving_license_availability": {
                          "type": "boolean",
                          "description": "Driving license availability"
                        },
                        "car_availability": {
                          "type": "boolean",
                          "description": "Car availability"
                        },
                        "driver_availability": {
                          "type": "boolean",
                          "description": "Driver availability"
                        },
                        "living_format_test_moon": {
                          "type": "string",
                          "description": "Test moon living format"
                        },
                        "living_format_preliminary_contract": {
                          "type": "string",
                          "description": "Preliminary contract format"
                        },
                        "living_format_final_contract": {
                          "type": "string",
                          "description": "Final contract format"
                        },
                        "living_format_test_moon_image": {
                          "type": "string",
                          "description": "Test moon image path"
                        },
                        "living_format_test_moon_image_thumbnail": {
                          "type": "string",
                          "description": "Test moon image thumbnail path"
                        },
                        "housing_image": {
                          "type": "string",
                          "description": "Housing image path"
                        },
                        "housing_image_thumbnail": {
                          "type": "string",
                          "description": "Housing image thumbnail path"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp"
                        }
                      }
                    },
                    "changes": {
                      "type": "object",
                      "description": "Object containing all modified fields with old values, new values, and formatted messages. Only changed fields are included. Image uploads show messages like 'New photo of [Type] has been uploaded'.",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "old": {
                            "description": "Previous value"
                          },
                          "new": {
                            "description": "New value"
                          },
                          "message": {
                            "type": "string",
                            "description": "HTML-formatted user-friendly description of the change (formatted by ChangeFormatterService)"
                          },
                          "plain_message": {
                            "type": "string",
                            "description": "Plain text version of the change message for mobile display"
                          },
                          "display_value": {
                            "description": "The formatted new value for styling purposes (e.g., \"70 kg\", \"enabled\")"
                          },
                          "old_display_value": {
                            "description": "The formatted old value for styling purposes (e.g., \"75 kg\", \"disabled\")"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Living profile has been updated successfully",
                      "data": {
                        "id": 1,
                        "user_id": 123,
                        "driving_license_availability": true,
                        "car_availability": true,
                        "driver_availability": false,
                        "living_format_test_moon": "apartment",
                        "living_format_preliminary_contract": "rental",
                        "living_format_final_contract": "purchase",
                        "living_format_test_moon_image": "living-form-pictures/123_test_moon_1640995200.jpg",
                        "living_format_test_moon_image_thumbnail": "living-form-pictures/123_test_moon_thumb_1640995200.jpg",
                        "housing_image": "living-form-pictures/123_housing_1640995200.jpg",
                        "housing_image_thumbnail": "living-form-pictures/123_housing_thumb_1640995200.jpg",
                        "created_at": "2024-01-15T10:30:00.000000Z",
                        "updated_at": "2024-01-20T14:45:00.000000Z"
                      },
                      "changes": {
                        "driving_license_availability": {
                          "old": false,
                          "new": true,
                          "message": "Driving license availability has been changed from disabled to enabled",
                          "plain_message": "Driving license availability has been changed from disabled to enabled",
                          "display_value": "enabled",
                          "old_display_value": "disabled"
                        },
                        "living_format_test_moon": {
                          "old": "house",
                          "new": "apartment",
                          "message": "Test moon living format has been changed from house to apartment",
                          "plain_message": "Test moon living format has been changed from house to apartment",
                          "display_value": "apartment",
                          "old_display_value": "house"
                        },
                        "living_format_test_moon_image": {
                          "old": "living-form-pictures/123_test_moon_old.jpg",
                          "new": "uploaded",
                          "message": "New photo of Test Moon has been uploaded",
                          "plain_message": "New photo of Test Moon has been uploaded",
                          "display_value": null,
                          "old_display_value": null
                        },
                        "housing_image": {
                          "old": null,
                          "new": "uploaded",
                          "message": "New photo of Living Accommodation has been uploaded",
                          "plain_message": "New photo of Living Accommodation has been uploaded",
                          "display_value": null,
                          "old_display_value": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please check your inputs and try again."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "housing_image": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The housing image must not be larger than 15MB."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/albums": {
      "get": {
        "summary": "Get Available Albums",
        "description": "Retrieves the list of available album types for organizing profile images.",
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "Available albums retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": [
                        {
                          "name": "my_photos",
                          "label": "My Photos",
                          "description": "Photos of yourself."
                        },
                        {
                          "name": "places",
                          "label": "Places I Visit",
                          "description": "Photos showing locations you like or travel to."
                        },
                        {
                          "name": "interests",
                          "label": "Things I Like",
                          "description": "Showcase personal interests or hobbies."
                        },
                        {
                          "name": "fashion",
                          "label": "I usually wear this",
                          "description": "Visuals representing fashion or lifestyle choices."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "get-profile-albums",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/profile/images": {
      "get": {
        "summary": "Get User Images",
        "description": "Retrieves images from a specific album or all images.",
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "Images retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "url": {
                            "type": "string"
                          },
                          "album_type": {
                            "type": "string"
                          },
                          "album_detail": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "label": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "thumbnail_url": {
                            "type": "string"
                          },
                          "caption": {
                            "type": "string",
                            "nullable": true
                          },
                          "order": {
                            "type": "integer"
                          },
                          "created_at": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "images": [
                        {
                          "id": 1,
                          "url": "https://example.com/storage/images/user123/image1.jpg",
                          "album_type": "my_photos",
                          "album_detail": {
                            "name": "my_photos",
                            "label": "My Photos",
                            "description": "Photos of yourself."
                          },
                          "thumbnail_url": "https://example.com/storage/images/user123/thumbnails/image1.jpg",
                          "caption": "Profile photo",
                          "order": 1,
                          "created_at": "2024-01-15T10:30:00.000000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "album_type": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "Album type is required.",
                      "errors": {
                        "album_type": ["Album type is required."]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "get-profile-images",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "name": "album_type",
            "in": "query",
            "required": true,
            "description": "The album type to filter by. Use 'all' to get images from all albums.",
            "schema": {
              "type": "string",
              "enum": [
                "my_photos",
                "places",
                "interests",
                "fashion",
                "all"
              ]
            }
          }
        ]
      },
      "post": {
        "summary": "Upload Image",
        "description": "Uploads a new image or updates an existing one.",
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "Image uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "image": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "url": {
                          "type": "string"
                        },
                        "thumbnail_url": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Image uploaded successfully",
                      "image": {
                        "id": 1,
                        "url": "https://example.com/storage/images/user123/image1.jpg",
                        "thumbnail_url": "https://example.com/storage/images/user123/thumbnails/image1.jpg"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "image": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "album_type": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "The image may not be greater than 25MB.",
                      "errors": {
                        "image": ["The image may not be greater than 25MB."]
                      }
                    },
                    "Example 2": {
                      "error": true,
                      "message": "Invalid file type. Please upload a valid image (JPEG, PNG, WebP, HEIC)."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "post-profile-images",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "image"
                ],
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file (JPEG, PNG, WebP, HEIC, HEIF, JPG). Maximum size: 25MB."
                  },
                  "album_type": {
                    "type": "string",
                    "description": "The album type to assign the image to (required for new images)",
                    "enum": [
                      "my_photos",
                      "places",
                      "interests",
                      "fashion"
                    ]
                  },
                  "profile_image_id": {
                    "type": "integer",
                    "description": "ID of existing image to update (optional)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/images/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete Image",
        "description": "Deletes a specific image from the user's profile.",
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "Image deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Image deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "delete-profile-images-id",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/profile/": {
      "get": {
        "summary": "Get Profile",
        "description": "Retrieve your own profile information including basic details, about section, relationship preferences, financial profile, living arrangements, and visibility settings.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "User ID"
                        },
                        "public_username": {
                          "type": "string",
                          "description": "Public username"
                        },
                        "first_name": {
                          "type": "string",
                          "description": "First name"
                        },
                        "last_name": {
                          "type": "string",
                          "description": "Last name"
                        },
                        "email": {
                          "type": "string",
                          "description": "Email address"
                        },
                        "gender": {
                          "type": "string",
                          "description": "Gender"
                        },
                        "partner_preference": {
                          "type": "string",
                          "description": "Preferred partner gender"
                        },
                        "relationship_goals": {
                          "type": "string",
                          "description": "Relationship goals"
                        },
                        "role": {
                          "type": "string",
                          "description": "User role"
                        },
                        "profile_picture_url": {
                          "type": "string",
                          "description": "Profile picture URL"
                        },
                        "hide_images": {
                          "type": "integer",
                          "description": "Hide images setting"
                        },
                        "initials": {
                          "type": "string",
                          "description": "User initials"
                        },
                        "profile": {
                          "type": "object",
                          "description": "Detailed profile information",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "birth_date": {
                              "type": "string",
                              "format": "date",
                              "description": "Birth date"
                            },
                            "birth_date_formatted": {
                              "type": "string",
                              "description": "Formatted birth date"
                            },
                            "age": {
                              "type": "integer",
                              "description": "Current age"
                            },
                            "age_display": {
                              "type": "string",
                              "description": "Age display preference"
                            },
                            "orientation": {
                              "type": "string",
                              "description": "Sexual orientation"
                            },
                            "short_intro": {
                              "type": "string",
                              "description": "Short introduction"
                            },
                            "weight_mesurement": {
                              "type": "string",
                              "description": "Weight measurement unit"
                            },
                            "weight": {
                              "type": "number",
                              "description": "Weight"
                            },
                            "height_mesurement": {
                              "type": "string",
                              "description": "Height measurement unit"
                            },
                            "height": {
                              "type": "number",
                              "description": "Height"
                            },
                            "extended_descriptions": {
                              "type": "array",
                              "description": "Extended descriptions",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "order": {
                                    "type": "integer"
                                  }
                                }
                              }
                            },
                            "family_views": {
                              "type": "string",
                              "description": "Views on family"
                            },
                            "financial_views": {
                              "type": "string",
                              "description": "Views on finances"
                            },
                            "long_term_views": {
                              "type": "string",
                              "description": "Long-term goals"
                            },
                            "secret_text": {
                              "type": "string",
                              "description": "Secret text"
                            },
                            "education_level": {
                              "type": "string",
                              "description": "Education level"
                            },
                            "profession": {
                              "type": "string",
                              "description": "Profession"
                            },
                            "religion": {
                              "type": "string",
                              "description": "Religion"
                            },
                            "ethnicity": {
                              "type": "string",
                              "description": "Ethnicity"
                            },
                            "astrology_belief": {
                              "type": "string",
                              "description": "Astrology belief level"
                            },
                            "personality_type": {
                              "type": "string",
                              "description": "Personality type"
                            },
                            "location_residence": {
                              "type": "string",
                              "description": "Current residence location"
                            },
                            "location_residence_place_id": {
                              "type": "string",
                              "description": "Google Place ID for residence"
                            },
                            "location_residence_latitude": {
                              "type": "number",
                              "description": "Residence latitude"
                            },
                            "location_residence_longitude": {
                              "type": "number",
                              "description": "Residence longitude"
                            },
                            "location_residence_secondary_text": {
                              "type": "string",
                              "description": "Additional residence information"
                            },
                            "relocation_readiness": {
                              "type": "string",
                              "description": "Relocation readiness"
                            },
                            "location_search": {
                              "type": "string",
                              "description": "Preferred search location"
                            },
                            "location_search_place_id": {
                              "type": "string",
                              "description": "Google Place ID for search location"
                            },
                            "location_search_latitude": {
                              "type": "number",
                              "description": "Search location latitude"
                            },
                            "location_search_longitude": {
                              "type": "number",
                              "description": "Search location longitude"
                            },
                            "location_search_secondary_text": {
                              "type": "string",
                              "description": "Additional search location information"
                            },
                            "location_difference_reason": {
                              "type": "string",
                              "description": "Reason for location difference"
                            },
                            "languages": {
                              "type": "array",
                              "description": "Languages spoken",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "code": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "fluency": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                }
                              }
                            },
                            "hobbies": {
                              "type": "array",
                              "description": "User hobbies",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "integer"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "emoji": {
                                    "type": "string"
                                  },
                                  "icon_url": {
                                    "type": "string"
                                  },
                                  "icon_url_active": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "financialProfile": {
                          "type": "object",
                          "nullable": true,
                          "description": "Financial profile information"
                        },
                        "lifestyle_support_budget": {
                          "type": "string",
                          "description": "Lifestyle support budget"
                        },
                        "lifestyle_support_budget_trimmed": {
                          "type": "string",
                          "description": "Formatted lifestyle support budget"
                        },
                        "profileImages": {
                          "type": "array",
                          "description": "Profile images",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "url": {
                                "type": "string"
                              },
                              "thumbnail_url": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "id": 123,
                        "public_username": "john_doe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@example.com",
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "marriage",
                        "role": "user",
                        "profile_picture_url": "https://example.com/profile.jpg",
                        "hide_images": 0,
                        "initials": "JD",
                        "profile": {
                          "id": 123,
                          "birth_date": "1990-05-15",
                          "birth_date_formatted": "May 15, 1990",
                          "age": 34,
                          "age_display": "Show Exact Age",
                          "orientation": "Straight",
                          "short_intro": "Looking for meaningful connections",
                          "weight_mesurement": "kg",
                          "weight": 70,
                          "height_mesurement": "cm",
                          "height": 175,
                          "extended_descriptions": [
                            {
                              "id": 1,
                              "description": "I love traveling and exploring new cultures",
                              "order": 1
                            }
                          ],
                          "family_views": "Open to having children",
                          "financial_views": "Financial stability is important",
                          "long_term_views": "Looking for a life partner",
                          "secret_text": "I'm secretly a great cook",
                          "education_level": "Bachelor's Degree",
                          "profession": "Software Engineer",
                          "religion": "Christian",
                          "ethnicity": "Caucasian",
                          "astrology_belief": "Moderately interested",
                          "personality_type": "INTJ",
                          "location_residence": "New York, NY, USA",
                          "location_residence_place_id": "ChIJOwg_06VPwokRYv534QaPC8g",
                          "location_residence_latitude": 40.7128,
                          "location_residence_longitude": -74.0060,
                          "location_residence_secondary_text": "Manhattan",
                          "relocation_readiness": "Open to relocation",
                          "location_search": "San Francisco, CA, USA",
                          "location_search_place_id": "ChIJIQBpAG2ahYAR_6128GcTUEo",
                          "location_search_latitude": 37.7749,
                          "location_search_longitude": -122.4194,
                          "location_search_secondary_text": "Bay Area",
                          "location_difference_reason": "Career opportunities",
                          "languages": [
                            {
                              "id": 1,
                              "code": "en",
                              "name": "English",
                              "fluency": 5
                            },
                            {
                              "id": 2,
                              "code": "es",
                              "name": "Spanish",
                              "fluency": 3
                            }
                          ],
                          "hobbies": [
                            {
                              "id": 1,
                              "name": "Photography",
                              "emoji": "📸",
                              "icon_url": "https://example.com/icons/photography.png",
                              "icon_url_active": "https://example.com/icons/photography-active.png"
                            }
                          ],
                          "created_at": "2024-01-15T10:30:00.000000Z",
                          "updated_at": "2024-01-20T14:45:00.000000Z"
                        },
                        "financialProfile": null,
                        "lifestyle_support_budget": "5000.00",
                        "lifestyle_support_budget_trimmed": "5,000",
                        "profileImages": [
                          {
                            "id": 123,
                            "url": "https://example.com/profile.jpg",
                            "thumbnail_url": "https://example.com/profile_thumb.jpg"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/visibility": {
      "post": {
        "summary": "Update Visibility Settings",
        "description": "Update your profile visibility settings.\n\n**Status of Registration**: Choose whether unregistered visitors can see your profile. Note that some registered users may use for their search another device whilst being not logged in. However, if the parameter is not set to registered users only, the photos will become publicly available the same way as they would in Instagram or other social networks.\n\n**Financial Verification Status**: Financial verification means that a user stating certain monthly budget confirms his commitment by buying the annual subscription that costs multiple amounts of the monthly budget and confirms by that his financial soundness. Note that this does not amount to a full guarantee of the financial soundness. Even if you choose \"All Users\", only those having purchased Annual subscription would be able to contact you. This setting affects only the visibility to those without the Annual subscription. Your profile will not be seen even by those who have verified their monthly budget but set it lower than the budget set by SP.\n\n**Mutual Interest Requirement**: Indicate whether there is a requirement that the user should be marked by you as interesting before they are able to see your profile. If this option is set, your profile will be invisible for everyone except those whose profiles were found by you on the Search Page and marked as Interesting.",
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status_of_registration": {
                    "type": "string",
                    "description": "Choose who can see your profile based on registration status",
                    "enum": ["all", "registered"],
                    "example": "registered"
                  },
                  "financial_verification_status": {
                    "type": "string",
                    "description": "Choose who can see your profile based on financial verification",
                    "enum": ["verified", "all"],
                    "example": "verified"
                  },
                  "mutual_interest_requirement": {
                    "type": "string",
                    "description": "Require mutual interest for profile visibility",
                    "enum": ["all", "marked"],
                    "example": "marked"
                  }
                }
              },
              "x-examples": {
                "Example 1": {
                  "status_of_registration": "registered",
                  "financial_verification_status": "verified",
                  "mutual_interest_requirement": "marked"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Visibility settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Visibility setting has been updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Visibility setting ID",
                          "example": 1
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "User ID",
                          "example": 123
                        },
                        "status_of_registration": {
                          "type": "string",
                          "description": "Registration status visibility - \"all\" (Any Visitor) or \"registered\" (Registered Visitor)",
                          "enum": ["all", "registered"],
                          "example": "registered"
                        },
                        "financial_verification_status": {
                          "type": "string",
                          "description": "Financial verification status - \"verified\" (Only Verified-Finance Users) or \"all\" (All Users)",
                          "enum": ["verified", "all"],
                          "example": "verified"
                        },
                        "mutual_interest_requirement": {
                          "type": "string",
                          "description": "Mutual interest requirement - \"all\" (Any Visitors) or \"marked\" (Only marked by me)",
                          "enum": ["all", "marked"],
                          "example": "marked"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp",
                          "example": "2024-01-15T10:30:00.000000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp",
                          "example": "2024-01-20T14:45:00.000000Z"
                        }
                      }
                    },
                    "changes": {
                      "type": "object",
                      "description": "Object containing all modified fields with old values, new values, and formatted messages. Only changed fields are included.",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "old": {
                            "description": "Previous value"
                          },
                          "new": {
                            "description": "New value"
                          },
                          "message": {
                            "type": "string",
                            "description": "HTML-formatted user-friendly description of the change (formatted by ChangeFormatterService)"
                          },
                          "plain_message": {
                            "type": "string",
                            "description": "Plain text version of the change message for mobile display"
                          },
                          "display_value": {
                            "description": "The formatted new value for styling purposes (e.g., \"70 kg\", \"enabled\")"
                          },
                          "old_display_value": {
                            "description": "The formatted old value for styling purposes (e.g., \"75 kg\", \"disabled\")"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Visibility setting has been updated successfully",
                      "data": {
                        "id": 1,
                        "user_id": 123,
                        "status_of_registration": "registered",
                        "financial_verification_status": "verified",
                        "mutual_interest_requirement": "marked",
                        "created_at": "2024-01-15T10:30:00.000000Z",
                        "updated_at": "2024-01-20T14:45:00.000000Z"
                      },
                      "changes": {
                        "status_of_registration": {
                          "old": "all",
                          "new": "registered",
                          "message": "Status of registration has been changed from Any Visitor to Registered Visitor",
                          "plain_message": "Status of registration has been changed from Any Visitor to Registered Visitor",
                          "display_value": "Registered Visitor",
                          "old_display_value": "Any Visitor"
                        },
                        "financial_verification_status": {
                          "old": "all",
                          "new": "verified",
                          "message": "Financial verification status has been changed from All Users to Only Verified-Finance Users",
                          "plain_message": "Financial verification status has been changed from All Users to Only Verified-Finance Users",
                          "display_value": "Only Verified-Finance Users",
                          "old_display_value": "All Users"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please check your inputs and try again."
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "status_of_registration": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The status of registration field must be a boolean."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places/autocomplete": {
      "get": {
        "summary": "Get Place Suggestions",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "suggestions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "placePrediction": {
                            "type": "object",
                            "properties": {
                              "text": {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string"
                                  },
                                  "matches": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "endOffset": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "place": {
                                "type": "string"
                              },
                              "types": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "placeId": {
                                "type": "string"
                              },
                              "structuredFormat": {
                                "type": "object",
                                "properties": {
                                  "mainText": {
                                    "type": "object",
                                    "properties": {
                                      "text": {
                                        "type": "string"
                                      },
                                      "matches": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "endOffset": {
                                              "type": "integer"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "secondaryText": {
                                    "type": "object",
                                    "properties": {
                                      "text": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "suggestions": [
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJRcbZaklDXz4RYlEphFBu5r0",
                            "types": [
                              "locality",
                              "political",
                              "geocode"
                            ],
                            "placeId": "ChIJRcbZaklDXz4RYlEphFBu5r0",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai Mall - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "types": [
                              "shopping_mall",
                              "point_of_interest",
                              "establishment"
                            ],
                            "placeId": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai Mall",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Dubai - United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai Hills Mall - Al Khail Road - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJ7d_LEEJvXz4R8oq3hLV_PmQ",
                            "types": [
                              "point_of_interest",
                              "establishment",
                              "shopping_mall"
                            ],
                            "placeId": "ChIJ7d_LEEJvXz4R8oq3hLV_PmQ",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai Hills Mall",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Al Khail Road - Dubai - United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai International Airport (DXB) - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJaQ4mkwZdXz4R6e5IegDUleY",
                            "types": [
                              "airport",
                              "establishment",
                              "point_of_interest",
                              "international_airport"
                            ],
                            "placeId": "ChIJaQ4mkwZdXz4R6e5IegDUleY",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai International Airport (DXB)",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Dubai - United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai Marina - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJ4ybBAlRrXz4RfG3EVWYeUbk",
                            "types": [
                              "neighborhood",
                              "political",
                              "geocode"
                            ],
                            "placeId": "ChIJ4ybBAlRrXz4RfG3EVWYeUbk",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai Marina",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Dubai - United Arab Emirates"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "suggestions": [
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJRcbZaklDXz4RYlEphFBu5r0",
                            "types": [
                              "locality",
                              "political",
                              "geocode"
                            ],
                            "placeId": "ChIJRcbZaklDXz4RYlEphFBu5r0",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai Mall - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "types": [
                              "shopping_mall",
                              "point_of_interest",
                              "establishment"
                            ],
                            "placeId": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai Mall",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Dubai - United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai Hills Mall - Al Khail Road - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJ7d_LEEJvXz4R8oq3hLV_PmQ",
                            "types": [
                              "point_of_interest",
                              "establishment",
                              "shopping_mall"
                            ],
                            "placeId": "ChIJ7d_LEEJvXz4R8oq3hLV_PmQ",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai Hills Mall",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Al Khail Road - Dubai - United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai International Airport (DXB) - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJaQ4mkwZdXz4R6e5IegDUleY",
                            "types": [
                              "airport",
                              "establishment",
                              "point_of_interest",
                              "international_airport"
                            ],
                            "placeId": "ChIJaQ4mkwZdXz4R6e5IegDUleY",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai International Airport (DXB)",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Dubai - United Arab Emirates"
                              }
                            }
                          }
                        },
                        {
                          "placePrediction": {
                            "text": {
                              "text": "Dubai Marina - Dubai - United Arab Emirates",
                              "matches": [
                                {
                                  "endOffset": 5
                                }
                              ]
                            },
                            "place": "places/ChIJ4ybBAlRrXz4RfG3EVWYeUbk",
                            "types": [
                              "neighborhood",
                              "political",
                              "geocode"
                            ],
                            "placeId": "ChIJ4ybBAlRrXz4RfG3EVWYeUbk",
                            "structuredFormat": {
                              "mainText": {
                                "text": "Dubai Marina",
                                "matches": [
                                  {
                                    "endOffset": 5
                                  }
                                ]
                              },
                              "secondaryText": {
                                "text": "Dubai - United Arab Emirates"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-places-autocomplete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "input"
          }
        ]
      }
    },
    "/places/details": {
      "get": {
        "summary": "Get Place's Details",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "types": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "location": {
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "number"
                        },
                        "longitude": {
                          "type": "number"
                        }
                      }
                    },
                    "displayName": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "languageCode": {
                          "type": "string"
                        }
                      }
                    },
                    "formattedAddress": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": "ElZKbC4gTWVycGF0aSwgVGViaW5nIFRpbmdnaSBPa3VyYSwgS2VjLiBSdW1iYWkgUGVzaXNpciwgS290YSBQZWthbmJhcnUsIFJpYXUsIEluZG9uZXNpYSIuKiwKFAoSCeveS3AzrdUxEQPRJaQdsrCKEhQKEgnPsgE4nlLUMRFv7lJV5LLYFQ",
                      "types": [
                        "route"
                      ],
                      "location": {
                        "latitude": 0.5887691,
                        "longitude": 101.4962924
                      },
                      "displayName": {
                        "text": "Jalan Merpati",
                        "languageCode": "id"
                      },
                      "formattedAddress": "Jl. Merpati, Tebing Tinggi Okura, Kec. Rumbai Pesisir, Kota Pekanbaru, Riau, Indonesia"
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": "ChIJRcbZaklDXz4RYlEphFBu5r0",
                      "types": [
                        "locality",
                        "political"
                      ],
                      "formattedAddress": "Dubai - United Arab Emirates",
                      "location": {
                        "latitude": 25.2048493,
                        "longitude": 55.2707828
                      },
                      "displayName": {
                        "text": "Dubai",
                        "languageCode": "en"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-places-detail",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "place_id"
          }
        ]
      },
      "parameters": []
    },
    "/places/reverse-geocode": {
      "get": {
        "summary": "Get Place details using lat lng",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plus_code": {
                      "type": "object",
                      "properties": {
                        "compound_code": {
                          "type": "string"
                        },
                        "global_code": {
                          "type": "string"
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address_components": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "long_name": {
                                  "type": "string"
                                },
                                "short_name": {
                                  "type": "string"
                                },
                                "types": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "formatted_address": {
                            "type": "string"
                          },
                          "geometry": {
                            "type": "object",
                            "properties": {
                              "bounds": {
                                "type": "object",
                                "properties": {
                                  "northeast": {
                                    "type": "object",
                                    "properties": {
                                      "lat": {
                                        "type": "number"
                                      },
                                      "lng": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "southwest": {
                                    "type": "object",
                                    "properties": {
                                      "lat": {
                                        "type": "number"
                                      },
                                      "lng": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              },
                              "location": {
                                "type": "object",
                                "properties": {
                                  "lat": {
                                    "type": "number"
                                  },
                                  "lng": {
                                    "type": "number"
                                  }
                                }
                              },
                              "location_type": {
                                "type": "string"
                              },
                              "viewport": {
                                "type": "object",
                                "properties": {
                                  "northeast": {
                                    "type": "object",
                                    "properties": {
                                      "lat": {
                                        "type": "number"
                                      },
                                      "lng": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "southwest": {
                                    "type": "object",
                                    "properties": {
                                      "lat": {
                                        "type": "number"
                                      },
                                      "lng": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "place_id": {
                            "type": "string"
                          },
                          "types": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "plus_code": {
                        "compound_code": "5C7R+54G Dubai - United Arab Emirates",
                        "global_code": "7HQQ5C7R+54G"
                      },
                      "results": [
                        {
                          "address_components": [
                            {
                              "long_name": "Tariaq Bedon Esm",
                              "short_name": "Tariaq Bedon Esm",
                              "types": [
                                "route"
                              ]
                            },
                            {
                              "long_name": "Warisan",
                              "short_name": "Warisan",
                              "types": [
                                "neighborhood",
                                "political"
                              ]
                            },
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "locality",
                                "political"
                              ]
                            },
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "administrative_area_level_1",
                                "political"
                              ]
                            },
                            {
                              "long_name": "United Arab Emirates",
                              "short_name": "AE",
                              "types": [
                                "country",
                                "political"
                              ]
                            }
                          ],
                          "formatted_address": "Tariaq Bedon Esm - Warisan - Dubai - United Arab Emirates",
                          "geometry": {
                            "bounds": {
                              "northeast": {
                                "lat": 25.1629646,
                                "lng": 55.4471573
                              },
                              "southwest": {
                                "lat": 25.1608828,
                                "lng": 55.4387188
                              }
                            },
                            "location": {
                              "lat": 25.1619908,
                              "lng": 55.442958
                            },
                            "location_type": "GEOMETRIC_CENTER",
                            "viewport": {
                              "northeast": {
                                "lat": 25.1632726802915,
                                "lng": 55.4471573
                              },
                              "southwest": {
                                "lat": 25.1605747197085,
                                "lng": 55.4387188
                              }
                            }
                          },
                          "place_id": "ChIJq1o-8n5hXz4Romnf_RDLWL8",
                          "types": [
                            "route"
                          ]
                        },
                        {
                          "address_components": [
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "locality",
                                "political"
                              ]
                            },
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "administrative_area_level_1",
                                "political"
                              ]
                            },
                            {
                              "long_name": "United Arab Emirates",
                              "short_name": "AE",
                              "types": [
                                "country",
                                "political"
                              ]
                            }
                          ],
                          "formatted_address": "Dubai - United Arab Emirates",
                          "geometry": {
                            "bounds": {
                              "northeast": {
                                "lat": 25.3585607,
                                "lng": 55.5645216
                              },
                              "southwest": {
                                "lat": 24.7934842,
                                "lng": 54.89045429999999
                              }
                            },
                            "location": {
                              "lat": 25.2048493,
                              "lng": 55.2707828
                            },
                            "location_type": "APPROXIMATE",
                            "viewport": {
                              "northeast": {
                                "lat": 25.3585607,
                                "lng": 55.5645216
                              },
                              "southwest": {
                                "lat": 24.7934842,
                                "lng": 54.89045429999999
                              }
                            }
                          },
                          "place_id": "ChIJRcbZaklDXz4RYlEphFBu5r0",
                          "types": [
                            "locality",
                            "political"
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "plus_code": {
                        "compound_code": "5C7R+54G Dubai - United Arab Emirates",
                        "global_code": "7HQQ5C7R+54G"
                      },
                      "results": [
                        {
                          "address_components": [
                            {
                              "long_name": "Tariaq Bedon Esm",
                              "short_name": "Tariaq Bedon Esm",
                              "types": [
                                "route"
                              ]
                            },
                            {
                              "long_name": "Warisan",
                              "short_name": "Warisan",
                              "types": [
                                "neighborhood",
                                "political"
                              ]
                            },
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "locality",
                                "political"
                              ]
                            },
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "administrative_area_level_1",
                                "political"
                              ]
                            },
                            {
                              "long_name": "United Arab Emirates",
                              "short_name": "AE",
                              "types": [
                                "country",
                                "political"
                              ]
                            }
                          ],
                          "formatted_address": "Tariaq Bedon Esm - Warisan - Dubai - United Arab Emirates",
                          "geometry": {
                            "bounds": {
                              "northeast": {
                                "lat": 25.1629646,
                                "lng": 55.4471573
                              },
                              "southwest": {
                                "lat": 25.1608828,
                                "lng": 55.4387188
                              }
                            },
                            "location": {
                              "lat": 25.1619908,
                              "lng": 55.442958
                            },
                            "location_type": "GEOMETRIC_CENTER",
                            "viewport": {
                              "northeast": {
                                "lat": 25.1632726802915,
                                "lng": 55.4471573
                              },
                              "southwest": {
                                "lat": 25.1605747197085,
                                "lng": 55.4387188
                              }
                            }
                          },
                          "place_id": "ChIJq1o-8n5hXz4Romnf_RDLWL8",
                          "types": [
                            "route"
                          ]
                        },
                        {
                          "address_components": [
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "locality",
                                "political"
                              ]
                            },
                            {
                              "long_name": "Dubai",
                              "short_name": "Dubai",
                              "types": [
                                "administrative_area_level_1",
                                "political"
                              ]
                            },
                            {
                              "long_name": "United Arab Emirates",
                              "short_name": "AE",
                              "types": [
                                "country",
                                "political"
                              ]
                            }
                          ],
                          "formatted_address": "Dubai - United Arab Emirates",
                          "geometry": {
                            "bounds": {
                              "northeast": {
                                "lat": 25.3585607,
                                "lng": 55.5645216
                              },
                              "southwest": {
                                "lat": 24.7934842,
                                "lng": 54.89045429999999
                              }
                            },
                            "location": {
                              "lat": 25.2048493,
                              "lng": 55.2707828
                            },
                            "location_type": "APPROXIMATE",
                            "viewport": {
                              "northeast": {
                                "lat": 25.3585607,
                                "lng": 55.5645216
                              },
                              "southwest": {
                                "lat": 24.7934842,
                                "lng": 54.89045429999999
                              }
                            }
                          },
                          "place_id": "ChIJRcbZaklDXz4RYlEphFBu5r0",
                          "types": [
                            "locality",
                            "political"
                          ]
                        }
                      ],
                      "status": "OK"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-places-reverse-geocode",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "longitude"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "latitude"
          }
        ]
      }
    },
    "/custom-parameter-categories": {
      "get": {
        "summary": "Get Custom Parameter Categories",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "placeholder": {
                            "type": "string"
                          },
                          "input_type": {
                            "type": "string"
                          },
                          "options": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string"
                                },
                                "label": {
                                  "type": "string"
                                },
                                "img": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": [
                        {
                          "id": "profession",
                          "name": "Profession",
                          "description": "Search by profession or occupation",
                          "placeholder": "e.g., Software Engineer, Doctor, Teacher",
                          "input_type": "text"
                        },
                        {
                          "id": "education",
                          "name": "Education Level and Field",
                          "description": "Search by education level and field of study",
                          "placeholder": "e.g., Bachelor's in Computer Science, MBA",
                          "input_type": "text"
                        },
                        {
                          "id": "relationship_goals",
                          "name": "Relationship Goals",
                          "description": "Search by relationship goals and intentions",
                          "placeholder": "Select relationship goal",
                          "input_type": "select",
                          "options": [
                            {
                              "value": "medium_term",
                              "label": "For a medium-term relationship",
                              "img": "http://localhost:8001/static/icons/rt_medium_term.png"
                            },
                            {
                              "value": "long_term",
                              "label": "For a long-term relationship",
                              "img": "http://localhost:8001/static/icons/rt_long_term.png"
                            },
                            {
                              "value": "childbirth",
                              "label": "For a childbirth relationship",
                              "img": "http://localhost:8001/static/icons/rt_childbirth.png"
                            }
                          ]
                        },
                        {
                          "id": "religion",
                          "name": "Religion",
                          "description": "Search by religious affiliation",
                          "placeholder": "Select religion",
                          "input_type": "select",
                          "options": [
                            {
                              "value": "christianity",
                              "label": "Christianity"
                            },
                            {
                              "value": "islam",
                              "label": "Islam"
                            },
                            {
                              "value": "hinduism",
                              "label": "Hinduism"
                            },
                            {
                              "value": "buddhism",
                              "label": "Buddhism"
                            },
                            {
                              "value": "sikhism",
                              "label": "Sikhism"
                            },
                            {
                              "value": "judaism",
                              "label": "Judaism"
                            },
                            {
                              "value": "other",
                              "label": "Other"
                            },
                            {
                              "value": "none",
                              "label": "None"
                            },
                            {
                              "value": "spiritual",
                              "label": "Spiritual but not religious"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "data": [
                        {
                          "id": "profession",
                          "name": "Profession",
                          "description": "Search by profession or occupation",
                          "placeholder": "e.g., Software Engineer, Doctor, Teacher",
                          "input_type": "text"
                        },
                        {
                          "id": "education",
                          "name": "Education Level and Field",
                          "description": "Search by education level and field of study",
                          "placeholder": "e.g., Bachelor's in Computer Science, MBA",
                          "input_type": "text"
                        },
                        {
                          "id": "relationship_goals",
                          "name": "Relationship Goals",
                          "description": "Search by relationship goals and intentions",
                          "placeholder": "Select relationship goal",
                          "input_type": "select",
                          "options": [
                            {
                              "value": "medium_term",
                              "label": "For a medium-term relationship",
                              "img": "http://localhost:8001/static/icons/rt_medium_term.png"
                            },
                            {
                              "value": "long_term",
                              "label": "For a long-term relationship",
                              "img": "http://localhost:8001/static/icons/rt_long_term.png"
                            },
                            {
                              "value": "childbirth",
                              "label": "For a childbirth relationship",
                              "img": "http://localhost:8001/static/icons/rt_childbirth.png"
                            }
                          ]
                        },
                        {
                          "id": "religion",
                          "name": "Religion",
                          "description": "Search by religious affiliation",
                          "placeholder": "Select religion",
                          "input_type": "select",
                          "options": [
                            {
                              "value": "christianity",
                              "label": "Christianity"
                            },
                            {
                              "value": "islam",
                              "label": "Islam"
                            },
                            {
                              "value": "hinduism",
                              "label": "Hinduism"
                            },
                            {
                              "value": "buddhism",
                              "label": "Buddhism"
                            },
                            {
                              "value": "sikhism",
                              "label": "Sikhism"
                            },
                            {
                              "value": "judaism",
                              "label": "Judaism"
                            },
                            {
                              "value": "other",
                              "label": "Other"
                            },
                            {
                              "value": "none",
                              "label": "None"
                            },
                            {
                              "value": "spiritual",
                              "label": "Spiritual but not religious"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-custom-parameter-categories",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/custom-parameter-categories/v2": {
      "get": {
        "summary": "Get All Custom Parameter Categories (v2)",
        "tags": [
          "Search"
        ],
        "description": "Returns a comprehensive list of all available custom parameter categories grouped by logical sections (General Info, Relationship and Availability, Financial Profile, Living Preferences). Each category contains fields with their types, options, and configurations that can be used for profile creation, editing, advanced search criteria, search templates, and custom matching algorithms.\n\n## Field Types\n\n- **dropdown**: Select from predefined options\n- **currency**: Monetary value input that supports range filtering (min-max)\n- **range_number**: Numeric range input (e.g., hours of availability)\n\n## Currency Handling\n\n- Uses the authenticated user's preferred currency from their financial profile\n- Defaults to USD if no user currency is set\n- Currency fields with `range: true` support minimum and maximum value filtering\n- Currency values are automatically converted using real-time exchange rates for consistent comparisons during search\n\n## Search Implementation\n\n- All fields can be used with `scopeCustomSearch` method for filtering user profiles\n- Range fields (`range_number`, `currency` with `range: true`) accept `valueRange` parameter with `min` and `max` values\n- Dropdown fields accept single `value` parameter matching one of the predefined options\n- Age, weight, and height use range-based filtering with hyphenated values (e.g., \"25-33\")\n\n## Special Search Behaviors\n\n- **Age**: Calculated dynamically from birth_date, not stored as a static value\n- **Hobbies**: Uses relationship query to match user hobbies\n- **Currency Fields**: Automatically converts between user currencies using exchange rates before comparison\n- **Capital Growth Bonus**: Stored as percentage/ratio (no currency conversion applied)\n- **Available Time Fields**: Support range filtering for morning, afternoon, and evening availability\n\n## Use Cases\n\n- Advanced search criteria to filter profiles\n- Profile creation and editing\n- Search templates for saved searches\n- Custom matching algorithms\n- Lifestyle, financial expectations, and relationship preference matching",
        "responses": {
          "200": {
            "description": "OK - Successfully retrieved all custom parameter categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates if there was an error"
                    },
                    "data": {
                      "type": "array",
                      "description": "Array of category objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique identifier for the category"
                          },
                          "name": {
                            "type": "string",
                            "description": "Display name of the category"
                          },
                          "fields": {
                            "type": "array",
                            "description": "Array of field objects in this category",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Unique identifier for the field"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Display name of the field"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "dropdown",
                                    "currency",
                                    "range_number"
                                  ],
                                  "description": "Type of input field"
                                },
                                "options": {
                                  "type": "array",
                                  "description": "Array of options (only present for dropdown type)",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "label": {
                                        "type": "string",
                                        "description": "Display label for the option"
                                      },
                                      "value": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "type": "integer"
                                          }
                                        ],
                                        "description": "Value of the option (can be string or integer)"
                                      }
                                    }
                                  }
                                },
                                "range": {
                                  "type": "boolean",
                                  "description": "Boolean indicating if the field accepts range values (for currency type)"
                                },
                                "suffix": {
                                  "type": "string",
                                  "description": "Text suffix for the field (e.g., 'Hour' for time fields)"
                                }
                              },
                              "required": [
                                "key",
                                "name",
                                "type"
                              ]
                            }
                          }
                        },
                        "required": [
                          "key",
                          "name",
                          "fields"
                        ]
                      }
                    }
                  },
                  "required": [
                    "error",
                    "data"
                  ]
                },
                "examples": {
                  "Success Example": {
                    "value": {
                      "error": false,
                      "data": [
                        {
                          "key": "general_info",
                          "name": "General Info",
                          "fields": [
                            {
                              "key": "age",
                              "name": "Age",
                              "type": "dropdown",
                              "options": [
                                {
                                  "label": "18-24",
                                  "value": "18-24"
                                },
                                {
                                  "label": "25-33",
                                  "value": "25-33"
                                },
                                {
                                  "label": "33-40",
                                  "value": "33-40"
                                },
                                {
                                  "label": "40-49",
                                  "value": "40-49"
                                },
                                {
                                  "label": "50-59",
                                  "value": "50-59"
                                },
                                {
                                  "label": "60-69",
                                  "value": "60-69"
                                }
                              ]
                            },
                            {
                              "key": "religion",
                              "name": "Religion",
                              "type": "dropdown",
                              "options": [
                                {
                                  "label": "Christianity",
                                  "value": "christianity"
                                },
                                {
                                  "label": "Islam",
                                  "value": "islam"
                                },
                                {
                                  "label": "Hinduism",
                                  "value": "hinduism"
                                },
                                {
                                  "label": "Buddhism",
                                  "value": "buddhism"
                                }
                              ]
                            },
                            {
                              "key": "hobbies",
                              "name": "Hobbies",
                              "type": "dropdown",
                              "options": [
                                {
                                  "value": 1,
                                  "label": "Reading"
                                },
                                {
                                  "value": 2,
                                  "label": "Photography"
                                },
                                {
                                  "value": 3,
                                  "label": "Gaming"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "key": "relationship_and_availability",
                          "name": "Relationship and Availability",
                          "fields": [
                            {
                              "key": "relationship_goals",
                              "name": "Relationship Goals",
                              "type": "dropdown",
                              "options": [
                                {
                                  "label": "Just Relationship Itself",
                                  "value": "just_relationship"
                                },
                                {
                                  "label": "Relationship Itself and Possibly Kids",
                                  "value": "relationship_and_possibly_kids"
                                },
                                {
                                  "label": "Relationship and Kids",
                                  "value": "relationship_and_kids"
                                }
                              ]
                            },
                            {
                              "key": "available_time_morning",
                              "name": "Available Time – Morning",
                              "type": "range_number",
                              "suffix": "Hour"
                            }
                          ]
                        },
                        {
                          "key": "financial_profile",
                          "name": "Financial Profile",
                          "fields": [
                            {
                              "key": "capital_level_precise",
                              "name": "Capital Level (Precise)",
                              "type": "currency",
                              "range": true
                            },
                            {
                              "key": "monthly_income_precise",
                              "name": "Monthly Income (Precise)",
                              "type": "currency",
                              "range": true
                            }
                          ]
                        },
                        {
                          "key": "living_preferences",
                          "name": "Living Preferences",
                          "fields": [
                            {
                              "key": "driving_license_availability",
                              "name": "Driving License Availability",
                              "type": "dropdown",
                              "options": [
                                {
                                  "value": "yes",
                                  "label": "Yes"
                                },
                                {
                                  "value": "no",
                                  "label": "No"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Error Example": {
                    "value": {
                      "error": true,
                      "message": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-custom-parameter-categories-v2",
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "Dropdown Field Search Example",
            "source": "// Example: Search by religion\nconst searchCriteria = {\n  category: \"general_info\",\n  field: \"religion\",\n  value: \"islam\"\n};"
          },
          {
            "lang": "JavaScript",
            "label": "Range Number Field Search Example",
            "source": "// Example: Search by available time\nconst searchCriteria = {\n  category: \"relationship_and_availability\",\n  field: \"available_time_morning\",\n  valueRange: {\n    min: 2,\n    max: 5\n  }\n};"
          },
          {
            "lang": "JavaScript",
            "label": "Currency Range Field Search Example",
            "source": "// Example: Search by monthly income\nconst searchCriteria = {\n  category: \"financial_profile\",\n  field: \"monthly_income_precise\",\n  valueRange: {\n    min: 5000,\n    max: 10000\n  },\n  filterCurrency: \"USD\"\n};"
          },
          {
            "lang": "JavaScript",
            "label": "Range Value Field Search Example",
            "source": "// Example: Search by age range\nconst searchCriteria = {\n  category: \"general_info\",\n  field: \"age\",\n  value: \"25-33\"\n};"
          }
        ]
      }
    },
    "/search-templates": {
      "get": {
        "summary": "Get User's Search Templates",
        "tags": [
          "Search"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "criteria": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "type": "object",
                            "properties": {
                              "places": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "types": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "radius": {
                                      "type": "integer"
                                    },
                                    "location": {
                                      "type": "object",
                                      "properties": {
                                        "latitude": {
                                          "type": "number"
                                        },
                                        "longitude": {
                                          "type": "number"
                                        }
                                      }
                                    },
                                    "place_id": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "secondary_text": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "is_worldwide": {
                                "type": "boolean"
                              }
                            }
                          },
                          "languages": {
                            "type": "object",
                            "properties": {
                              "selected": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "match_mode": {
                                "type": "string"
                              }
                            }
                          },
                          "monthly_budget": {
                            "type": "object",
                            "properties": {
                              "max": {
                                "type": "integer"
                              },
                              "min": {
                                "type": "integer"
                              }
                            }
                          },
                          "custom_parameters": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {}
                            }
                          }
                        }
                      },
                      "is_default": {
                        "type": "boolean"
                      },
                      "created_at": {
                        "type": "string"
                      },
                      "updated_at": {
                        "type": "string"
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": [
                      {
                        "id": 40,
                        "name": "Search Template 1",
                        "criteria": {
                          "location": {
                            "places": [
                              {
                                "id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                                "name": "Medan",
                                "types": [
                                  "locality",
                                  "political",
                                  "geocode"
                                ],
                                "radius": 10,
                                "location": {
                                  "latitude": 3.5951956000000003,
                                  "longitude": 98.6722227
                                },
                                "place_id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                                "description": "Medan, Medan City, North Sumatra, Indonesia",
                                "secondary_text": "Medan City, North Sumatra, Indonesia"
                              }
                            ],
                            "is_worldwide": false
                          },
                          "languages": {
                            "selected": [
                              "English"
                            ],
                            "match_mode": "any"
                          },
                          "monthly_budget": {
                            "max": 10000,
                            "min": 1000
                          },
                          "custom_parameters": []
                        },
                        "is_default": false,
                        "created_at": "2025-05-02T11:33:13.000000Z",
                        "updated_at": "2025-05-09T12:49:53.000000Z"
                      }
                    ]
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": [
                      {
                        "id": 40,
                        "name": "Search Template 1",
                        "criteria": {
                          "location": {
                            "places": [
                              {
                                "id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                                "name": "Medan",
                                "types": [
                                  "locality",
                                  "political",
                                  "geocode"
                                ],
                                "radius": 10,
                                "location": {
                                  "latitude": 3.5951956000000003,
                                  "longitude": 98.6722227
                                },
                                "place_id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                                "description": "Medan, Medan City, North Sumatra, Indonesia",
                                "secondary_text": "Medan City, North Sumatra, Indonesia"
                              }
                            ],
                            "is_worldwide": false
                          },
                          "languages": {
                            "selected": [
                              "English"
                            ],
                            "match_mode": "any"
                          },
                          "monthly_budget": {
                            "max": 10000,
                            "min": 1000
                          },
                          "custom_parameters": []
                        },
                        "is_default": false,
                        "created_at": "2025-05-02T11:33:13.000000Z",
                        "updated_at": "2025-05-09T12:49:53.000000Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "operationId": "get-search-templates",
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "post": {
        "summary": "Create New Search Template",
        "tags": [
          "Search"
        ],
        "responses": {},
        "operationId": "post-search-templates",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "criteria": {
                    "type": "object",
                    "properties": {
                      "location": {
                        "type": "object",
                        "properties": {
                          "places": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "types": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "radius": {
                                  "type": "integer"
                                },
                                "location": {
                                  "type": "object",
                                  "properties": {
                                    "latitude": {
                                      "type": "number"
                                    },
                                    "longitude": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "place_id": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "secondary_text": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "is_worldwide": {
                            "type": "boolean"
                          }
                        }
                      },
                      "languages": {
                        "type": "object",
                        "properties": {
                          "selected": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "match_mode": {
                            "type": "string"
                          }
                        }
                      },
                      "monthly_budget": {
                        "type": "object",
                        "properties": {
                          "max": {
                            "type": "string"
                          },
                          "min": {
                            "type": "string"
                          }
                        }
                      },
                      "custom_parameters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {}
                        }
                      }
                    }
                  }
                },
                "x-examples": {
                  "Example 1": {
                    "name": "Search Dubai",
                    "criteria": {
                      "location": {
                        "places": [
                          {
                            "id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "name": "Dubai Mall",
                            "types": [
                              "establishment",
                              "point_of_interest",
                              "shopping_mall"
                            ],
                            "radius": 10,
                            "location": {
                              "latitude": 25.1972295,
                              "longitude": 55.279747
                            },
                            "place_id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "description": "Dubai Mall - Dubai - United Arab Emirates",
                            "secondary_text": "Dubai - United Arab Emirates"
                          }
                        ],
                        "is_worldwide": false
                      },
                      "languages": {
                        "selected": [
                          "English"
                        ],
                        "match_mode": "any"
                      },
                      "monthly_budget": {
                        "max": "50000",
                        "min": "0"
                      },
                      "custom_parameters": []
                    }
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "name": "Search Dubai",
                    "criteria": {
                      "location": {
                        "places": [
                          {
                            "id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "name": "Dubai Mall",
                            "types": [
                              "establishment",
                              "point_of_interest",
                              "shopping_mall"
                            ],
                            "radius": 10,
                            "location": {
                              "latitude": 25.1972295,
                              "longitude": 55.279747
                            },
                            "place_id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "description": "Dubai Mall - Dubai - United Arab Emirates",
                            "secondary_text": "Dubai - United Arab Emirates"
                          }
                        ],
                        "is_worldwide": false
                      },
                      "languages": {
                        "selected": [
                          "English"
                        ],
                        "match_mode": "any"
                      },
                      "monthly_budget": {
                        "max": "50000",
                        "min": "0"
                      },
                      "custom_parameters": []
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search-templates/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Search Template Details",
        "tags": [
          "Search"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "user_id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "criteria": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "object",
                          "properties": {
                            "places": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "types": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "radius": {
                                    "type": "integer"
                                  },
                                  "location": {
                                    "type": "object",
                                    "properties": {
                                      "latitude": {
                                        "type": "number"
                                      },
                                      "longitude": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "place_id": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "secondary_text": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "is_worldwide": {
                              "type": "boolean"
                            }
                          }
                        },
                        "languages": {
                          "type": "object",
                          "properties": {
                            "selected": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "match_mode": {
                              "type": "string"
                            }
                          }
                        },
                        "monthly_budget": {
                          "type": "object",
                          "properties": {
                            "max": {
                              "type": "integer"
                            },
                            "min": {
                              "type": "integer"
                            }
                          }
                        },
                        "custom_parameters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {}
                          }
                        }
                      }
                    },
                    "is_default": {
                      "type": "boolean"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "updated_at": {
                      "type": "string"
                    },
                    "deleted_at": {
                      "type": "null"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "id": 40,
                      "user_id": 14,
                      "name": "Search Template 1",
                      "criteria": {
                        "location": {
                          "places": [
                            {
                              "id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                              "name": "Medan",
                              "types": [
                                "locality",
                                "political",
                                "geocode"
                              ],
                              "radius": 10,
                              "location": {
                                "latitude": 3.5951956000000003,
                                "longitude": 98.6722227
                              },
                              "place_id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                              "description": "Medan, Medan City, North Sumatra, Indonesia",
                              "secondary_text": "Medan City, North Sumatra, Indonesia"
                            }
                          ],
                          "is_worldwide": false
                        },
                        "languages": {
                          "selected": [
                            "English"
                          ],
                          "match_mode": "any"
                        },
                        "monthly_budget": {
                          "max": 10000,
                          "min": 1000
                        },
                        "custom_parameters": []
                      },
                      "is_default": false,
                      "created_at": "2025-05-02T11:33:13.000000Z",
                      "updated_at": "2025-05-09T12:49:53.000000Z",
                      "deleted_at": null
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "id": 40,
                      "user_id": 14,
                      "name": "Search Template 1",
                      "criteria": {
                        "location": {
                          "places": [
                            {
                              "id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                              "name": "Medan",
                              "types": [
                                "locality",
                                "political",
                                "geocode"
                              ],
                              "radius": 10,
                              "location": {
                                "latitude": 3.5951956000000003,
                                "longitude": 98.6722227
                              },
                              "place_id": "ChIJ_bI-HMwxMTARYoKQpsgx1CM",
                              "description": "Medan, Medan City, North Sumatra, Indonesia",
                              "secondary_text": "Medan City, North Sumatra, Indonesia"
                            }
                          ],
                          "is_worldwide": false
                        },
                        "languages": {
                          "selected": [
                            "English"
                          ],
                          "match_mode": "any"
                        },
                        "monthly_budget": {
                          "max": 10000,
                          "min": 1000
                        },
                        "custom_parameters": []
                      },
                      "is_default": false,
                      "created_at": "2025-05-02T11:33:13.000000Z",
                      "updated_at": "2025-05-09T12:49:53.000000Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-search-templates-id",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": []
      },
      "put": {
        "summary": "Update Search Template",
        "tags": [
          "Search"
        ],
        "responses": {},
        "operationId": "put-search-templates-id",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "criteria": {
                    "type": "object",
                    "properties": {
                      "location": {
                        "type": "object",
                        "properties": {
                          "places": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "types": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "radius": {
                                  "type": "integer"
                                },
                                "location": {
                                  "type": "object",
                                  "properties": {
                                    "latitude": {
                                      "type": "number"
                                    },
                                    "longitude": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "place_id": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "secondary_text": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "is_worldwide": {
                            "type": "boolean"
                          }
                        }
                      },
                      "languages": {
                        "type": "object",
                        "properties": {
                          "selected": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "match_mode": {
                            "type": "string"
                          }
                        }
                      },
                      "monthly_budget": {
                        "type": "object",
                        "properties": {
                          "max": {
                            "type": "string"
                          },
                          "min": {
                            "type": "string"
                          }
                        }
                      },
                      "custom_parameters": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "category": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "x-examples": {
                  "Example 1": {
                    "criteria": {
                      "location": {
                        "places": [
                          {
                            "id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "name": "Dubai Mall",
                            "types": [
                              "establishment",
                              "point_of_interest",
                              "shopping_mall"
                            ],
                            "radius": 10,
                            "location": {
                              "latitude": 25.1972295,
                              "longitude": 55.279747
                            },
                            "place_id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "description": "Dubai Mall - Dubai - United Arab Emirates",
                            "secondary_text": "Dubai - United Arab Emirates"
                          }
                        ],
                        "is_worldwide": false
                      },
                      "languages": {
                        "selected": [
                          "English",
                          "German",
                          "French"
                        ],
                        "match_mode": "any"
                      },
                      "monthly_budget": {
                        "max": "50000",
                        "min": "0"
                      },
                      "custom_parameters": [
                        {
                          "value": "Software Engineer",
                          "category": "Profession"
                        }
                      ]
                    }
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "criteria": {
                      "location": {
                        "places": [
                          {
                            "id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "name": "Dubai Mall",
                            "types": [
                              "establishment",
                              "point_of_interest",
                              "shopping_mall"
                            ],
                            "radius": 10,
                            "location": {
                              "latitude": 25.1972295,
                              "longitude": 55.279747
                            },
                            "place_id": "ChIJB1zIKShoXz4RnbaTPPup7aU",
                            "description": "Dubai Mall - Dubai - United Arab Emirates",
                            "secondary_text": "Dubai - United Arab Emirates"
                          }
                        ],
                        "is_worldwide": false
                      },
                      "languages": {
                        "selected": [
                          "English",
                          "German",
                          "French"
                        ],
                        "match_mode": "any"
                      },
                      "monthly_budget": {
                        "max": "50000",
                        "min": "0"
                      },
                      "custom_parameters": [
                        {
                          "value": "Software Engineer",
                          "category": "Profession"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "post": {
        "summary": "Search Profiles",
        "description": "Search for user profiles with advanced filtering options. Supports location-based search, budget filtering, language matching, and custom parameter filtering.\n\n## Key Features\n\n**Role-based Filtering**: Results are automatically filtered based on user's role:\n- \"rs\" (sponsor) users see only \"srs\" (seeker) profiles\n- \"srs\" (seeker) users see only \"rs\" (sponsor) profiles\n\n**Automatic Exclusions**: Excludes deleted users, current user, deleted profiles, and archived profiles\n\n**Mutual Interest**: Respects visibility settings (\"all\" visible to everyone, \"marked\" only visible to marked users)\n\n**Location Search**: Uses Haversine formula for distance calculations, supports multiple locations with different radii, defaults to user's location with 10km radius\n\n**Monthly Budget**: Handles currency conversion automatically using latest exchange rates, considers user's minimum budget requirements\n\n**Language Matching**: Considers fluency level with \"any\" (matches any language) or \"all\" (matches all languages) modes\n\n**Custom Parameters**: Supports filtering by:\n- **General Info**: age, weight, height, orientation, education_level, profession, religion, ethnicity, hobbies\n- **Relationship & Availability**: relationship_goals, partner_preferences, duration_of_relationship, available_time_morning, available_time_afternoon, available_time_evening\n- **Financial Profile**: capital_level_less_precise, capital_level_precise, monthly_income_less_precise, monthly_income_precise, one_time_payment_first_child, one_time_payment_second_child, one_time_payment_third_child, monthly_budget_per_child, financial_gift_upon_marriage, capital_growth_bonus, relationship_termination_compensation\n- **Living Preferences**: driving_license_availability, car_availability, driver_availability, living_format_test_moon, living_format_preliminary_contract, living_format_final_contract\n\n**Sorting Options**: Sort by monthly_budget (converted to search currency), age (birth date), or created_at (default)\n\n**Subscription-based Filtering**: Sponsors without active subscriptions only see profiles that don't require financial verification\n\n**Range-based Searches**: Age, weight, height use hyphenated format (e.g., \"25-33\"). Time availability and currency fields use value_range object with min/max properties (numeric). Currency fields should include filter_currency for cross-currency comparisons.",
        "tags": [
          "Search"
        ],
        "operationId": "post-search",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pagination": {
                    "type": "object",
                    "description": "Pagination settings for search results",
                    "properties": {
                      "page": {
                        "type": "integer",
                        "description": "The page number for pagination (default: 1)",
                        "default": 1,
                        "minimum": 1
                      },
                      "per_page": {
                        "type": "integer",
                        "description": "Number of results per page (default: 10)",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 100
                      }
                    }
                  },
                  "sort": {
                    "type": "object",
                    "description": "Sorting configuration for search results",
                    "properties": {
                      "by": {
                        "type": "string",
                        "description": "Field to sort by. Options: monthly_budget, age, created_at (default: created_at)",
                        "enum": ["monthly_budget", "age", "created_at"],
                        "default": "created_at"
                      },
                      "order": {
                        "type": "string",
                        "description": "Sort direction. Options: asc, desc (default: desc)",
                        "enum": ["asc", "desc"],
                        "default": "desc"
                      }
                    }
                  },
                  "location": {
                    "type": "object",
                    "description": "Location-based search configuration",
                    "properties": {
                      "is_worldwide": {
                        "type": "boolean",
                        "description": "If true, search worldwide. If false, use specific locations or user's location",
                        "default": false
                      },
                      "places": {
                        "type": "array",
                        "description": "Array of location objects for specific location search",
                        "items": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "object",
                              "required": ["latitude", "longitude"],
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "Location latitude (required if places provided)",
                                  "minimum": -90,
                                  "maximum": 90
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "Location longitude (required if places provided)",
                                  "minimum": -180,
                                  "maximum": 180
                                }
                              }
                            },
                            "radius": {
                              "type": "number",
                              "format": "double",
                              "description": "Search radius in kilometers (required if places provided)",
                              "minimum": 0.1,
                              "maximum": 1000
                            }
                          }
                        }
                      }
                    }
                  },
                  "monthly_budget": {
                    "type": "object",
                    "description": "Monthly budget filtering configuration",
                    "properties": {
                      "min": {
                        "type": "number",
                        "format": "double",
                        "description": "Minimum monthly budget"
                      },
                      "max": {
                        "type": "number",
                        "format": "double",
                        "description": "Maximum monthly budget (required for sponsor users)"
                      },
                      "currency": {
                        "type": "string",
                        "description": "Currency code (e.g., 'USD', 'AED'). Defaults to system default currency",
                        "pattern": "^[A-Z]{3}$"
                      }
                    }
                  },
                  "languages": {
                    "type": "object",
                    "description": "Language filtering configuration",
                    "properties": {
                      "selected": {
                        "type": "array",
                        "description": "Array of language names to search for",
                        "items": {
                          "type": "string"
                        }
                      },
                      "match_mode": {
                        "type": "string",
                        "description": "How to match languages. Options: any, all (required if languages.selected is provided)",
                        "enum": ["any", "all"]
                      }
                    }
                  },
                  "custom_parameters": {
                    "type": "array",
                    "description": "Array of custom parameter objects for advanced filtering",
                    "items": {
                      "type": "object",
                      "required": ["category_key", "field_key"],
                      "properties": {
                        "category_key": {
                          "type": "string",
                          "description": "Custom parameter category key (required)"
                        },
                        "field_key": {
                          "type": "string",
                          "description": "Custom parameter field key (required)"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value to match against (required for dropdown and single-value fields)"
                        },
                        "value_range": {
                          "type": "object",
                          "description": "Range object with min/max values for range-based searches (required for currency and range_number fields)",
                          "properties": {
                            "min": {
                              "type": "number",
                              "description": "Minimum value for range"
                            },
                            "max": {
                              "type": "number",
                              "description": "Maximum value for range"
                            }
                          }
                        },
                        "filter_currency": {
                          "type": "string",
                          "description": "Currency code for financial field searches (e.g., 'USD'). Used to convert values for comparison",
                          "pattern": "^[A-Z]{3}$"
                        }
                      }
                    }
                  }
                },
                "x-examples": {
                  "Comprehensive Search Example": {
                    "pagination": {
                      "page": 1,
                      "per_page": 10
                    },
                    "sort": {
                      "by": "monthly_budget",
                      "order": "desc"
                    },
                    "location": {
                      "is_worldwide": false,
                      "places": [
                        {
                          "location": {
                            "latitude": 25.276987,
                            "longitude": 55.296249
                          },
                          "radius": 10
                        }
                      ]
                    },
                    "monthly_budget": {
                      "min": 1000,
                      "max": 10000,
                      "currency": "USD"
                    },
                    "languages": {
                      "selected": ["English", "Arabic"],
                      "match_mode": "any"
                    },
                    "custom_parameters": [
                      {
                        "category_key": "general_info",
                        "field_key": "education_level",
                        "value": "bachelor_science"
                      },
                      {
                        "category_key": "general_info",
                        "field_key": "age",
                        "value": "25-33"
                      },
                      {
                        "category_key": "relationship_and_availability",
                        "field_key": "available_time_morning",
                        "value_range": {
                          "min": 2,
                          "max": 5
                        }
                      },
                      {
                        "category_key": "financial_profile",
                        "field_key": "monthly_income_precise",
                        "value_range": {
                          "min": 5000,
                          "max": 15000
                        },
                        "filter_currency": "USD"
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Comprehensive Search Example": {
                  "summary": "Search for profiles in Dubai with advanced criteria",
                  "description": "Search for profiles within 10km of Dubai with budget between $1,000-$10,000, who speak English or Arabic, with various custom parameters including education, age ranges, time availability, and financial criteria",
                  "value": {
                    "pagination": {
                      "page": 1,
                      "per_page": 10
                    },
                    "sort": {
                      "by": "monthly_budget",
                      "order": "desc"
                    },
                    "location": {
                      "is_worldwide": false,
                      "places": [
                        {
                          "location": {
                            "latitude": 25.276987,
                            "longitude": 55.296249
                          },
                          "radius": 10
                        }
                      ]
                    },
                    "monthly_budget": {
                      "min": 1000,
                      "max": 10000,
                      "currency": "USD"
                    },
                    "languages": {
                      "selected": ["English", "Arabic"],
                      "match_mode": "any"
                    },
                    "custom_parameters": [
                      {
                        "category_key": "general_info",
                        "field_key": "education_level",
                        "value": "bachelor_science"
                      },
                      {
                        "category_key": "general_info",
                        "field_key": "age",
                        "value": "25-33"
                      },
                      {
                        "category_key": "relationship_and_availability",
                        "field_key": "available_time_morning",
                        "value_range": {
                          "min": 2,
                          "max": 5
                        }
                      },
                      {
                        "category_key": "financial_profile",
                        "field_key": "monthly_income_precise",
                        "value_range": {
                          "min": 5000,
                          "max": 15000
                        },
                        "filter_currency": "USD"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Array of user profile objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "User ID"
                          },
                          "public_username": {
                            "type": "string",
                            "description": "Public username for the profile"
                          },
                          "login_name": {
                            "type": "string",
                            "description": "Login name"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "User's first name"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "User's last name"
                          },
                          "full_name": {
                            "type": "string",
                            "description": "User's full name"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "description": "User's email address"
                          },
                          "gender": {
                            "type": "string",
                            "enum": ["male", "female"],
                            "description": "User's gender"
                          },
                          "partner_preference": {
                            "type": "string",
                            "enum": ["male", "female"],
                            "description": "Preferred partner gender"
                          },
                          "relationship_goals": {
                            "type": "string",
                            "description": "Relationship goals (e.g., 'marriage')"
                          },
                          "role": {
                            "type": "string",
                            "enum": ["rs", "srs"],
                            "description": "User role (rs=sponsor, srs=seeker)"
                          },
                          "profile_picture_url": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL to profile picture"
                          },
                          "hide_images": {
                            "type": "boolean",
                            "description": "Whether images are hidden"
                          },
                          "initials": {
                            "type": "string",
                            "description": "User's initials"
                          },
                          "profile": {
                            "type": "object",
                            "description": "Detailed profile information",
                            "properties": {
                              "birth_date": {
                                "type": "string",
                                "format": "date",
                                "description": "User's birth date"
                              },
                              "gender": {
                                "type": "string",
                                "enum": ["male", "female"],
                                "description": "User's gender"
                              },
                              "location_residence_latitude": {
                                "type": "number",
                                "format": "double",
                                "description": "Residence latitude"
                              },
                              "location_residence_longitude": {
                                "type": "number",
                                "format": "double",
                                "description": "Residence longitude"
                              },
                              "weight": {
                                "type": "number",
                                "format": "double",
                                "description": "Weight in kg"
                              },
                              "height": {
                                "type": "number",
                                "format": "double",
                                "description": "Height in cm"
                              },
                              "orientation": {
                                "type": "string",
                                "description": "Sexual orientation"
                              },
                              "education_level": {
                                "type": "string",
                                "description": "Education level"
                              },
                              "profession": {
                                "type": "string",
                                "description": "Profession or occupation"
                              },
                              "religion": {
                                "type": "string",
                                "description": "Religious affiliation"
                              },
                              "ethnicity": {
                                "type": "string",
                                "description": "Ethnic background"
                              }
                            }
                          },
                          "financialProfile": {
                            "type": "object",
                            "description": "Financial profile information",
                            "properties": {
                              "lifestyle_support_budget": {
                                "type": "number",
                                "format": "double",
                                "description": "Monthly lifestyle support budget"
                              },
                              "currency": {
                                "type": "string",
                                "description": "Currency code"
                              },
                              "capital_level_less_precise": {
                                "type": "string",
                                "description": "Capital level (less precise)"
                              },
                              "monthly_income_less_precise": {
                                "type": "string",
                                "description": "Monthly income (less precise)"
                              }
                            }
                          },
                          "lifestyle_support_budget": {
                            "type": "number",
                            "format": "double",
                            "description": "Monthly lifestyle support budget"
                          },
                          "lifestyle_support_budget_trimmed": {
                            "type": "string",
                            "description": "Formatted lifestyle support budget"
                          },
                          "profileImages": {
                            "type": "array",
                            "description": "Array of profile images",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "description": "Image ID"
                                },
                                "url": {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "Image URL"
                                },
                                "thumbnail_url": {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "Thumbnail URL"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "description": "Pagination metadata",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "Last page number"
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Results per page"
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of results"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success Response": {
                    "summary": "Successful search results",
                    "description": "Search results with user profiles and pagination metadata",
                    "value": {
                      "data": [
                        {
                          "id": 1,
                          "public_username": "johndoe",
                          "login_name": "johndoe",
                          "first_name": "John",
                          "last_name": "Doe",
                          "full_name": "John Doe",
                          "email": "john@example.com",
                          "gender": "male",
                          "partner_preference": "female",
                          "relationship_goals": "marriage",
                          "role": "srs",
                          "profile_picture_url": "https://example.com/profile.jpg",
                          "hide_images": false,
                          "initials": "JD",
                          "profile": {
                            "birth_date": "1990-01-01",
                            "gender": "male",
                            "location_residence_latitude": 25.276987,
                            "location_residence_longitude": 55.296249,
                            "weight": 70,
                            "height": 175,
                            "orientation": "straight",
                            "education_level": "bachelor",
                            "profession": "engineer",
                            "religion": "muslim",
                            "ethnicity": "arab"
                          },
                          "financialProfile": {
                            "lifestyle_support_budget": 5000,
                            "currency": "USD",
                            "capital_level_less_precise": "high",
                            "monthly_income_less_precise": "high"
                          },
                          "lifestyle_support_budget": 5000,
                          "lifestyle_support_budget_trimmed": "5,000",
                          "profileImages": [
                            {
                              "id": 1,
                              "url": "https://example.com/image1.jpg",
                              "thumbnail_url": "https://example.com/thumb1.jpg"
                            }
                          ]
                        }
                      ],
                      "meta": {
                        "current_page": 1,
                        "last_page": 5,
                        "per_page": 10,
                        "total": 50
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User location not found. Please update your location in your profile."
                    },
                    "currentUser": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "public_username": {
                          "type": "string",
                          "example": "currentuser"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Error Response": {
                    "summary": "Error when user location is not found",
                    "description": "Error response when the user's location is not available for search",
                    "value": {
                      "error": true,
                      "message": "User location not found. Please update your location in your profile.",
                      "currentUser": {
                        "id": 1,
                        "public_username": "currentuser"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/check-custom-parameter": {
      "post": {
        "summary": "Check Custom Parameter",
        "description": "Validate and check custom parameter values for search functionality. This endpoint helps verify if custom parameter values are valid before using them in search queries.",
        "tags": [
          "Search"
        ],
        "operationId": "post-search-check-custom-parameter",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["value", "category"],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The value to validate for the custom parameter"
                  },
                  "category": {
                    "type": "string",
                    "description": "The category of the custom parameter to validate",
                    "enum": ["general_info", "relationship", "financial", "living", "profession"]
                  }
                },
                "x-examples": {
                  "Profession Example": {
                    "value": "Software Engineer",
                    "category": "profession"
                  },
                  "Education Example": {
                    "value": "bachelor",
                    "category": "general_info"
                  }
                }
              },
              "examples": {
                "Profession Example": {
                  "summary": "Check profession parameter",
                  "description": "Validate a profession value for search",
                  "value": {
                    "value": "Software Engineer",
                    "category": "profession"
                  }
                },
                "Education Example": {
                  "summary": "Check education parameter",
                  "description": "Validate an education level value for search",
                  "value": {
                    "value": "bachelor",
                    "category": "general_info"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom parameter validation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean",
                      "description": "Whether the parameter value is valid"
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation message"
                    },
                    "suggestions": {
                      "type": "array",
                      "description": "Suggested values if the provided value is not exact",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "Valid Parameter": {
                    "summary": "Valid parameter value",
                    "description": "Response when the parameter value is valid",
                    "value": {
                      "valid": true,
                      "message": "Parameter value is valid",
                      "suggestions": []
                    }
                  },
                  "Invalid Parameter": {
                    "summary": "Invalid parameter value with suggestions",
                    "description": "Response when the parameter value is invalid but suggestions are provided",
                    "value": {
                      "valid": false,
                      "message": "Parameter value not found",
                      "suggestions": ["Software Engineer", "Software Developer", "Programmer"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid category or value provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication token required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallet/balance": {
      "get": {
        "summary": "Get Current Balance",
        "description": "Retrieves the current balance information for the authenticated user, including active balance, affiliate earnings, total available balance, and purchase power.",
        "tags": [
          "Wallet"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Balance information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "active_balance": {
                      "type": "number",
                      "format": "decimal",
                      "description": "Current active balance (numeric)",
                      "example": 1250.50
                    },
                    "active_balance_trimmed": {
                      "type": "string",
                      "description": "Formatted active balance with commas",
                      "example": "1,250.50"
                    },
                    "total_available_balance": {
                      "type": "number",
                      "format": "decimal",
                      "description": "Total available balance (active + affiliate earnings)",
                      "example": 2100.75
                    },
                    "total_available_balance_trimmed": {
                      "type": "string",
                      "description": "Formatted total available balance",
                      "example": "2,100.75"
                    },
                    "affiliate_earning_balance": {
                      "type": "number",
                      "format": "decimal",
                      "description": "Earnings from affiliate program (numeric)",
                      "example": 850.25
                    },
                    "affiliate_earning_balance_trimmed": {
                      "type": "string",
                      "description": "Formatted affiliate earnings balance",
                      "example": "850.25"
                    },
                    "purchase_power": {
                      "type": "number",
                      "format": "decimal",
                      "description": "Total purchase power (active + affiliate earnings)",
                      "example": 2100.75
                    },
                    "purchase_power_trimmed": {
                      "type": "string",
                      "description": "Formatted purchase power",
                      "example": "2,100.75"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency code (e.g., USD, EUR, GBP)",
                      "example": "USD"
                    },
                    "currency_detail": {
                      "type": "object",
                      "description": "Currency information object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Currency ID",
                          "example": 1
                        },
                        "code": {
                          "type": "string",
                          "description": "Currency code",
                          "example": "USD"
                        },
                        "name": {
                          "type": "string",
                          "description": "Currency name",
                          "example": "US Dollar"
                        },
                        "symbol": {
                          "type": "string",
                          "description": "Currency symbol",
                          "example": "$"
                        },
                        "exchange_rate": {
                          "type": "number",
                          "format": "decimal",
                          "description": "Exchange rate to base currency",
                          "example": 1.0
                        },
                        "is_default": {
                          "type": "boolean",
                          "description": "Whether this is the default currency",
                          "example": true
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Creation timestamp",
                          "example": "2024-01-01T00:00:00.000000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Last update timestamp",
                          "example": "2024-01-01T00:00:00.000000Z"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "active_balance": 1250.50,
                      "active_balance_trimmed": "1,250.50",
                      "total_available_balance": 2100.75,
                      "total_available_balance_trimmed": "2,100.75",
                      "affiliate_earning_balance": 850.25,
                      "affiliate_earning_balance_trimmed": "850.25",
                      "purchase_power": 2100.75,
                      "purchase_power_trimmed": "2,100.75",
                      "currency": "USD",
                      "currency_detail": {
                        "id": 1,
                        "code": "USD",
                        "name": "US Dollar",
                        "symbol": "$",
                        "exchange_rate": 1.0,
                        "is_default": true,
                        "created_at": "2024-01-01T00:00:00.000000Z",
                        "updated_at": "2024-01-01T00:00:00.000000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-wallet-balance",
        "security": [
          {
            "Authorization": []
          }
        ],
        "x-rate-limit": {
          "description": "Rate limiting: 60 requests per minute per user, 1000 requests per hour per user"
        }
      }
    },

    "/deposit/submit": {
      "post": {
        "summary": "Submit Deposit",
        "description": "Creates a new deposit transaction for the authenticated user. The system will process the deposit using the specified payment method and return transaction details including any external payment URLs for completion.",
        "tags": [
          "Wallet"
        ],
        "operationId": "post-deposit-submit",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["amount", "method"],
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "description": "The amount to deposit",
                    "example": 100.00
                  },
                  "method": {
                    "type": "string",
                    "description": "Payment method to use for the deposit",
                    "example": "STRIPE"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment for the deposit",
                    "example": "Account top-up"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency code (default: 'USD')",
                    "default": "USD",
                    "example": "USD"
                  }
                }
              },
              "examples": {
                "Stripe Payment": {
                  "summary": "Credit card payment via Stripe",
                  "value": {
                    "amount": 100.00,
                    "method": "STRIPE",
                    "comment": "Account top-up",
                    "currency": "USD"
                  }
                },
                "Cryptocurrency Payment": {
                  "summary": "Cryptocurrency payment via CoinGate",
                  "value": {
                    "amount": 50.00,
                    "method": "COINGATE",
                    "comment": "Crypto deposit",
                    "currency": "USD"
                  }
                },
                "Bank Transfer": {
                  "summary": "Bank transfer via SWIFT",
                  "value": {
                    "amount": 500.00,
                    "method": "SWIFT",
                    "comment": "Bank transfer deposit",
                    "currency": "USD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deposit submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable message about the result",
                      "example": "Deposit submitted successfully"
                    },
                    "transaction_id": {
                      "type": "integer",
                      "description": "Internal transaction ID",
                      "example": 123
                    },
                    "transaction_number": {
                      "type": "string",
                      "description": "Human-readable transaction number",
                      "example": "20250125123456"
                    },
                    "redirect_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "External payment URL for completion (if applicable)",
                      "example": "https://checkout.stripe.com/pay/cs_test_..."
                    },
                    "webview_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "Internal payment waiting page URL with authentication token",
                      "example": "https://startup2050.com/finance/payment/waiting/20250125123456?token=abc123..."
                    }
                  }
                },
                "examples": {
                  "Success with Redirect": {
                    "summary": "Successful deposit with external payment URL",
                    "value": {
                      "error": false,
                      "message": "Deposit submitted successfully",
                      "transaction_id": 123,
                      "transaction_number": "20250125123456",
                      "redirect_url": "https://checkout.stripe.com/pay/cs_test_...",
                      "webview_url": "https://startup2050.com/finance/payment/waiting/20250125123456?token=abc123..."
                    }
                  },
                  "Success without Redirect": {
                    "summary": "Successful deposit without external payment URL (e.g., BALANCE method)",
                    "value": {
                      "error": false,
                      "message": "Deposit submitted successfully",
                      "transaction_id": 124,
                      "transaction_number": "20250125123457",
                      "redirect_url": null,
                      "webview_url": "https://startup2050.com/finance/payment/waiting/20250125123457?token=def456..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please enter the amount to deposit"
                    }
                  }
                },
                "examples": {
                  "Missing Amount": {
                    "summary": "Amount parameter is missing",
                    "value": {
                      "error": true,
                      "message": "Please enter the amount to deposit"
                    }
                  },
                  "Invalid Method": {
                    "summary": "Invalid payment method",
                    "value": {
                      "error": true,
                      "message": "Invalid payment method selected"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Sorry, something went wrong. Please try again."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/withdrawal/submit": {
      "post": {
        "summary": "Submit Withdrawal",
        "description": "Creates a new withdrawal transaction for the authenticated user. The system validates the user's available balance and processes the withdrawal request using the specified payment method and banking details.\n\n## Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login\n\n## Withdrawal Methods\n\n| Method | Type | Description | Required Fields |\n|--------|------|-------------|-----------------|\n| `SWIFT` | Bank Transfer | International bank transfer via SWIFT | bank_name, bank_swift_code, bank_account_number, bank_receiver_name |\n| `SEPA` | Bank Transfer | European bank transfer via SEPA | bank_name, bank_swift_code, bank_account_number, bank_receiver_name |\n| `USDT` | Cryptocurrency | USDT withdrawal to wallet | wallet_address |\n| `BTC` | Cryptocurrency | Bitcoin withdrawal to wallet | wallet_address |\n\n## Validation Rules\n- **Amount**: Must be numeric and greater than or equal to 0\n- **Method**: Must be one of the valid withdrawal methods\n- **Currency**: Required field\n- **Bank Details**: Required only for SWIFT and SEPA methods\n- **Wallet Address**: Required only for USDT and BTC methods\n\n## Balance Requirements\n- Withdrawals can only use **available balance** (active_balance + affiliate_earning_balance)\n- The system checks available balance before processing the withdrawal\n- Pending or locked balances cannot be withdrawn\n\n## Transaction Processing\n1. **Validation**: All required fields are validated based on the selected method\n2. **Balance Check**: System verifies sufficient available balance\n3. **Transaction Creation**: A new withdrawal transaction is created with status 'pending'\n4. **Banking Details**: Withdrawal-specific banking information is stored\n5. **Response**: Transaction details are returned for tracking\n\n## Banking Information Storage\n\nThe system stores the following withdrawal-specific information:\n- `withdrawal_bank_name` - Bank name for bank transfers\n- `withdrawal_bank_swift_code` - SWIFT code for bank transfers\n- `withdrawal_bank_account_number` - Account number for bank transfers\n- `withdrawal_bank_receiver_name` - Account holder name for bank transfers\n- `withdrawal_wallet_address` - Wallet address for cryptocurrency withdrawals\n\n## Notes\n- Withdrawal transactions are created with 'pending' status and require manual processing\n- All withdrawal attempts are logged for audit purposes\n- Banking details are securely stored for processing\n- Users can track withdrawal status through the `/transactions` endpoint\n- Withdrawal processing times vary by method (bank transfers typically take 1-3 business days)\n\n## Related Endpoints\n- `GET /transactions` - View transaction history including withdrawals\n- `GET /balance` - Check current available balance\n- `GET /payment-methods?type=withdrawal` - Get available withdrawal methods",
        "tags": [
          "Wallet"
        ],
        "operationId": "post-withdrawal-submit",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["amount", "method", "currency"],
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "description": "The amount to withdraw (must be ≥ 0)"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["SWIFT", "SEPA", "USDT", "BTC"],
                    "description": "Withdrawal method"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency code for the withdrawal"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Optional comment for the withdrawal"
                  },
                  "bank_name": {
                    "type": "string",
                    "description": "Bank name (required for SWIFT/SEPA)"
                  },
                  "bank_swift_code": {
                    "type": "string",
                    "description": "Bank SWIFT code (required for SWIFT/SEPA)"
                  },
                  "bank_account_number": {
                    "type": "string",
                    "description": "Bank account number (required for SWIFT/SEPA)"
                  },
                  "bank_receiver_name": {
                    "type": "string",
                    "description": "Account holder name (required for SWIFT/SEPA)"
                  },
                  "wallet_address": {
                    "type": "string",
                    "description": "Cryptocurrency wallet address (required for USDT/BTC)"
                  }
                }
              },
              "examples": {
                "SWIFT Bank Transfer": {
                  "summary": "International bank transfer via SWIFT",
                  "value": {
                    "amount": 500.00,
                    "method": "SWIFT",
                    "currency": "USD",
                    "comment": "Monthly withdrawal",
                    "bank_name": "Chase Bank",
                    "bank_swift_code": "CHASUS33",
                    "bank_account_number": "1234567890",
                    "bank_receiver_name": "John Doe"
                  }
                },
                "SEPA Bank Transfer": {
                  "summary": "European bank transfer via SEPA",
                  "value": {
                    "amount": 1000.00,
                    "method": "SEPA",
                    "currency": "EUR",
                    "comment": "Quarterly withdrawal",
                    "bank_name": "Deutsche Bank",
                    "bank_swift_code": "DEUTDEFF",
                    "bank_account_number": "DE89370400440532013000",
                    "bank_receiver_name": "Jane Smith"
                  }
                },
                "USDT Cryptocurrency": {
                  "summary": "USDT withdrawal to wallet",
                  "value": {
                    "amount": 100.00,
                    "method": "USDT",
                    "currency": "USD",
                    "comment": "Crypto withdrawal",
                    "wallet_address": "0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6"
                  }
                },
                "BTC Cryptocurrency": {
                  "summary": "Bitcoin withdrawal to wallet",
                  "value": {
                    "amount": 0.05,
                    "method": "BTC",
                    "currency": "USD",
                    "comment": "Bitcoin withdrawal",
                    "wallet_address": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false,
                      "description": "Indicates if the request was successful"
                    },
                    "message": {
                      "type": "string",
                      "example": "Withdrawal submitted successfully",
                      "description": "Human-readable message about the result"
                    },
                    "transaction_id": {
                      "type": "integer",
                      "example": 456,
                      "description": "Internal transaction ID (deprecated, use transaction_number)"
                    },
                    "transaction_number": {
                      "type": "string",
                      "example": "20250125123456",
                      "description": "Human-readable transaction number (primary identifier)"
                    },
                    "webview_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "Internal payment waiting page URL with authentication token",
                      "example": "https://startup2050.com/finance/payment/waiting/20250125123456?token=abc123..."
                    }
                  }
                },
                "examples": {
                  "Success Response": {
                    "value": {
                      "error": false,
                      "message": "Withdrawal submitted successfully",
                      "transaction_id": 456,
                      "transaction_number": "20250125123456",
                      "webview_url": "https://startup2050.com/finance/payment/waiting/20250125123456?token=abc123..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation errors or insufficient balance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates if the request was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable message about the error"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Validation errors (only present on validation failure)",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Validation Errors": {
                    "summary": "Validation errors for missing or invalid fields",
                    "value": {
                      "error": true,
                      "message": "Please fill in all the fields correctly",
                      "errors": {
                        "amount": ["The amount field is required."],
                        "method": ["The method must be a valid method."],
                        "bank_name": ["The bank name field is required."]
                      }
                    }
                  },
                  "Insufficient Balance": {
                    "summary": "Insufficient balance error",
                    "value": {
                      "error": true,
                      "message": "Insufficient balance"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "The given data was invalid."
                    },
                    "errors": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Error message details"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "Get Transactions List",
        "description": "Retrieves a paginated list of the authenticated user's transactions with optional filtering.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login\n\n#### Available Status Values\n- `pending` - Transaction is pending processing\n- `completed` - Transaction has been completed successfully\n- `failed` - Transaction has failed\n- `cancelled` - Transaction has been cancelled\n\n#### Available Transaction Types\n- `deposit` - Money deposit to user account\n- `subscription` - Subscription purchase\n- `budget_upgrade` - Budget upgrade payment\n- `withdrawal` - Money withdrawal from user account",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of transactions per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by transaction status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "completed", "failed", "cancelled"]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by transaction type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["deposit", "subscription", "budget_upgrade", "withdrawal"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transactions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "transactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Transaction ID"
                          },
                          "transaction_number": {
                            "type": "string",
                            "description": "Human-readable transaction number"
                          },
                          "user_id": {
                            "type": "integer",
                            "description": "User ID"
                          },
                          "transaction_type": {
                            "type": "string",
                            "description": "Transaction type"
                          },
                          "type_label": {
                            "type": "string",
                            "description": "Human-readable transaction type"
                          },
                          "status": {
                            "type": "string",
                            "description": "Transaction status"
                          },
                          "status_label": {
                            "type": "string",
                            "description": "Human-readable status"
                          },
                          "status_classes_str": {
                            "type": "string",
                            "description": "Tailwind CSS classes for styling"
                          },
                          "status_bg_color": {
                            "type": "string",
                            "description": "Hex color code for background"
                          },
                          "status_text_color": {
                            "type": "string",
                            "description": "Hex color code for text"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Base transaction amount"
                          },
                          "amount_in_lc": {
                            "type": "number",
                            "description": "Amount in local currency"
                          },
                          "grand_total": {
                            "type": "number",
                            "description": "Total amount including fees"
                          },
                          "grand_total_in_lc": {
                            "type": "number",
                            "description": "Grand total in local currency"
                          },
                          "exchange_rate": {
                            "type": "number",
                            "description": "Currency exchange rate"
                          },
                          "balance_used": {
                            "type": "number",
                            "description": "Amount deducted from user balance"
                          },
                          "deposited_amount": {
                            "type": "number",
                            "description": "Actual amount deposited/withdrawn"
                          },
                          "deposited_amount_in_lc": {
                            "type": "number",
                            "description": "Deposited amount in local currency"
                          },
                          "amount_trimmed": {
                            "type": "string",
                            "description": "Formatted amount for display"
                          },
                          "grand_total_trimmed": {
                            "type": "string",
                            "description": "Formatted grand total for display"
                          },
                          "grand_total_in_lc_trimmed": {
                            "type": "string",
                            "description": "Formatted grand total in local currency"
                          },
                          "balance_used_trimmed": {
                            "type": "string",
                            "description": "Formatted balance used for display"
                          },
                          "deposited_amount_trimmed": {
                            "type": "string",
                            "description": "Formatted deposited amount for display"
                          },
                          "deposited_amount_in_lc_trimmed": {
                            "type": "string",
                            "description": "Formatted deposited amount in local currency"
                          },
                          "currency": {
                            "type": "string",
                            "description": "Transaction currency"
                          },
                          "subscription_error": {
                            "type": "string",
                            "nullable": true,
                            "description": "Subscription error message if any"
                          },
                          "user_currency": {
                            "type": "string",
                            "nullable": true,
                            "description": "User's preferred currency"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "description": "Transaction description"
                          },
                          "counterparty": {
                            "type": "object",
                            "description": "Counterparty user information",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "nullable": true,
                                "description": "Counterparty user ID"
                              },
                              "first_name": {
                                "type": "string",
                                "description": "Counterparty first name"
                              },
                              "last_name": {
                                "type": "string",
                                "description": "Counterparty last name"
                              },
                              "public_username": {
                                "type": "string",
                                "description": "Counterparty public username"
                              },
                              "profile_picture_url": {
                                "type": "string",
                                "description": "Counterparty profile picture URL"
                              }
                            }
                          },
                          "payments": {
                            "type": "array",
                            "description": "Collection of payment attempts for the transaction",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "description": "Payment ID"
                                },
                                "transaction_id": {
                                  "type": "integer",
                                  "description": "Transaction ID"
                                },
                                "amount": {
                                  "type": "number",
                                  "description": "Payment amount"
                                },
                                "amount_trimmed": {
                                  "type": "string",
                                  "description": "Formatted payment amount"
                                },
                                "currency": {
                                  "type": "string",
                                  "description": "Payment currency"
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Payment status"
                                },
                                "payment_method": {
                                  "type": "string",
                                  "description": "Payment method used"
                                },
                                "payment_session_id": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Payment session ID for tracking"
                                },
                                "payment_url": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Payment URL for redirect-based payments"
                                },
                                "amount_in_lc": {
                                  "type": "number",
                                  "description": "Payment amount in local currency"
                                },
                                "created_at": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Payment creation timestamp"
                                },
                                "updated_at": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Payment last update timestamp"
                                }
                              }
                            }
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Transaction creation timestamp"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Transaction last update timestamp"
                          },
                          "subscription_plan": {
                            "type": "object",
                            "description": "Subscription plan information",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Subscription plan ID"
                              },
                              "name": {
                                "type": "string",
                                "description": "Subscription plan name"
                              },
                              "price": {
                                "type": "number",
                                "nullable": true,
                                "description": "Subscription plan price"
                              }
                            }
                          },
                          "created_at_local": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Transaction creation time in local timezone"
                          },
                          "created_at_local_formatted": {
                            "type": "string",
                            "description": "Human-readable local creation time"
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "description": "Pagination metadata",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of transactions"
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of transactions per page"
                        },
                        "current_page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "Last page number"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "transactions": [
                        {
                          "id": 1,
                          "transaction_number": "20250125123456",
                          "user_id": 1,
                          "transaction_type": "subscription",
                          "type_label": "Subscription",
                          "status": "completed",
                          "status_label": "Completed",
                          "status_classes_str": "bg-green-100 text-green-700",
                          "status_bg_color": "#dcfce7",
                          "status_text_color": "#15803d",
                          "amount": 464.00,
                          "amount_in_lc": 464.00,
                          "grand_total": 464.00,
                          "grand_total_in_lc": 464.00,
                          "exchange_rate": 1.00,
                          "balance_used": 0.00,
                          "deposited_amount": 464.00,
                          "deposited_amount_trimmed": "464",
                          "deposited_amount_in_lc": 464.00,
                          "deposited_amount_in_lc_trimmed": "464",
                          "amount_trimmed": "464",
                          "grand_total_trimmed": "464",
                          "grand_total_in_lc_trimmed": "464",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": "USD",
                          "description": "Premium Annual Plan subscription",
                          "subscription_plan": {
                            "id": 2,
                            "name": "Premium Annual Plan",
                            "price": 464.00
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "https://startup2050.com/static/images/logo.png"
                          },
                          "subscription_error": null,
                          "payments": [
                            {
                              "id": 1,
                              "transaction_id": 1,
                              "amount": 464.00,
                              "amount_trimmed": "464",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "BTC",
                              "created_at": "2024-01-01T10:00:00.000000Z",
                              "updated_at": "2024-01-01T10:00:00.000000Z"
                            }
                          ],
                          "created_at": "2024-01-01T10:00:00.000000Z",
                          "updated_at": "2024-01-01T10:00:00.000000Z",
                          "created_at_local": "2024-01-01T18:00:00.000000Z",
                          "created_at_local_formatted": "01 Jan 2024 06:00 pm"
                        },
                        {
                          "id": 176,
                          "user_id": 14,
                          "transaction_type": "deposit",
                          "status": "cancelled",
                          "amount": "2400.00000000",
                          "amount_in_lc": "2400.00",
                          "grand_total": "2400.00000000",
                          "grand_total_in_lc": "2400.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "2400.00000000",
                          "deposited_amount_in_lc": "2400.00",
                          "amount_trimmed": "2,400",
                          "grand_total_trimmed": "2,400",
                          "grand_total_in_lc_trimmed": "2,400",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": "USD",
                          "description": "Deposit",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [
                            {
                              "id": 174,
                              "transaction_id": 176,
                              "amount": "2400.00000000",
                              "currency": "USD",
                              "status": "cancelled",
                              "payment_method": "CARD",
                              "created_at": "2025-06-09T00:19:39.000000Z",
                              "updated_at": "2025-06-09T00:21:43.000000Z"
                            }
                          ],
                          "created_at": "2025-06-09T00:19:38.000000Z",
                          "updated_at": "2025-06-09T00:21:43.000000Z"
                        },
                        {
                          "id": 175,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "cancelled",
                          "amount": "328.00000000",
                          "amount_in_lc": "328.00",
                          "grand_total": "328.00000000",
                          "grand_total_in_lc": "328.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "20.00000000",
                          "deposited_amount": "328.00000000",
                          "deposited_amount_in_lc": "328.00",
                          "amount_trimmed": "328",
                          "grand_total_trimmed": "328",
                          "grand_total_in_lc_trimmed": "328",
                          "balance_used_trimmed": "20",
                          "currency": "USD",
                          "user_currency": "USD",
                          "description": "Subscription purchase for plan Standard Annual Plan",
                          "subscription_plan": {
                            "id": 14,
                            "name": "Standard Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 172,
                              "transaction_id": 175,
                              "amount": "20.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-06-09T00:15:24.000000Z",
                              "updated_at": "2025-06-09T00:15:24.000000Z"
                            },
                            {
                              "id": 173,
                              "transaction_id": 175,
                              "amount": "328.00000000",
                              "currency": "USD",
                              "status": "cancelled",
                              "payment_method": "CARD",
                              "created_at": "2025-06-09T00:15:25.000000Z",
                              "updated_at": "2025-06-09T00:19:10.000000Z"
                            }
                          ],
                          "created_at": "2025-06-09T00:15:24.000000Z",
                          "updated_at": "2025-06-09T00:19:10.000000Z"
                        },
                        {
                          "id": 158,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "completed",
                          "amount": "444.00000000",
                          "amount_in_lc": "444.00",
                          "grand_total": "444.00000000",
                          "grand_total_in_lc": "444.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "20.00000000",
                          "deposited_amount": "444.00000000",
                          "deposited_amount_in_lc": "444.00",
                          "amount_trimmed": "444",
                          "grand_total_trimmed": "444",
                          "grand_total_in_lc_trimmed": "444",
                          "balance_used_trimmed": "20",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Subscription purchase for plan Premium Annual Plan",
                          "subscription_plan": {
                            "id": 15,
                            "name": "Premium Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 155,
                              "transaction_id": 158,
                              "amount": "20.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-06-03T02:14:24.000000Z",
                              "updated_at": "2025-06-03T02:14:24.000000Z"
                            },
                            {
                              "id": 156,
                              "transaction_id": 158,
                              "amount": "444.00000000",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "SWIFT",
                              "created_at": "2025-06-03T02:14:24.000000Z",
                              "updated_at": "2025-06-03T02:35:31.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T02:14:24.000000Z",
                          "updated_at": "2025-06-03T02:35:31.000000Z"
                        },
                        {
                          "id": 157,
                          "user_id": 14,
                          "transaction_type": "withdrawal",
                          "status": "canceled",
                          "amount": "200000.00000000",
                          "amount_in_lc": "200000.00",
                          "grand_total": "200000.00000000",
                          "grand_total_in_lc": "200000.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "200000.00000000",
                          "deposited_amount_in_lc": "200000.00",
                          "amount_trimmed": "200,000",
                          "grand_total_trimmed": "200,000",
                          "grand_total_in_lc_trimmed": "200,000",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Withdrawal Request",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [],
                          "created_at": "2025-06-03T02:07:45.000000Z",
                          "updated_at": "2025-06-03T02:07:45.000000Z"
                        },
                        {
                          "id": 156,
                          "user_id": 14,
                          "transaction_type": "withdrawal",
                          "status": "completed",
                          "amount": "12000.00000000",
                          "amount_in_lc": "12000.00",
                          "grand_total": "12000.00000000",
                          "grand_total_in_lc": "12000.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "12000.00000000",
                          "deposited_amount_in_lc": "12000.00",
                          "amount_trimmed": "12,000",
                          "grand_total_trimmed": "12,000",
                          "grand_total_in_lc_trimmed": "12,000",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Withdrawal Request",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [],
                          "created_at": "2025-06-03T02:07:24.000000Z",
                          "updated_at": "2025-06-03T02:07:44.000000Z"
                        },
                        {
                          "id": 155,
                          "user_id": 14,
                          "transaction_type": "deposit",
                          "status": "completed",
                          "amount": "10.00000000",
                          "amount_in_lc": "10.00",
                          "grand_total": "10.00000000",
                          "grand_total_in_lc": "10.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "10.00000000",
                          "deposited_amount_in_lc": "10.00",
                          "amount_trimmed": "10",
                          "grand_total_trimmed": "10",
                          "grand_total_in_lc_trimmed": "10",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Deposit",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [
                            {
                              "id": 154,
                              "transaction_id": 155,
                              "amount": "10.00000000",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "SWIFT",
                              "created_at": "2025-06-03T02:06:55.000000Z",
                              "updated_at": "2025-06-03T02:08:05.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T02:06:54.000000Z",
                          "updated_at": "2025-06-03T02:08:05.000000Z"
                        },
                        {
                          "id": 154,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "completed",
                          "amount": "0.00000000",
                          "amount_in_lc": "0.00",
                          "grand_total": "0.00000000",
                          "grand_total_in_lc": "0.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "116.00000000",
                          "deposited_amount": "0.00000000",
                          "deposited_amount_in_lc": "0.00",
                          "amount_trimmed": "0",
                          "grand_total_trimmed": "0",
                          "grand_total_in_lc_trimmed": "0",
                          "balance_used_trimmed": "116",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Subscription upgrade from Premium Annual Plan to VIP Annual Plan",
                          "subscription_plan": {
                            "id": 16,
                            "name": "VIP Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 153,
                              "transaction_id": 154,
                              "amount": "116.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-06-03T02:02:19.000000Z",
                              "updated_at": "2025-06-03T02:02:19.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T02:02:19.000000Z",
                          "updated_at": "2025-06-03T02:02:19.000000Z"
                        },
                        {
                          "id": 153,
                          "user_id": 14,
                          "transaction_type": "deposit",
                          "status": "completed",
                          "amount": "240000.00000000",
                          "amount_in_lc": "240000.00",
                          "grand_total": "240000.00000000",
                          "grand_total_in_lc": "240000.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "240000.00000000",
                          "deposited_amount_in_lc": "240000.00",
                          "amount_trimmed": "240,000",
                          "grand_total_trimmed": "240,000",
                          "grand_total_in_lc_trimmed": "240,000",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": null,
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [
                            {
                              "id": 152,
                              "transaction_id": 153,
                              "amount": "240000.00000000",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "SWIFT",
                              "created_at": "2025-06-03T01:48:08.000000Z",
                              "updated_at": "2025-06-03T01:57:44.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T01:48:08.000000Z",
                          "updated_at": "2025-06-03T01:57:44.000000Z"
                        },
                        {
                          "id": 152,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "completed",
                          "amount": "0.00000000",
                          "amount_in_lc": "0.00",
                          "grand_total": "0.00000000",
                          "grand_total_in_lc": "0.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "464.00000000",
                          "deposited_amount": "0.00000000",
                          "deposited_amount_in_lc": "0.00",
                          "amount_trimmed": "0",
                          "grand_total_trimmed": "0",
                          "grand_total_in_lc_trimmed": "0",
                          "balance_used_trimmed": "464",
                          "currency": "USD",
                          "user_currency": null,
                          "description": null,
                          "subscription_plan": {
                            "id": 15,
                            "name": "Premium Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 151,
                              "transaction_id": 152,
                              "amount": "464.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-05-29T14:27:44.000000Z",
                              "updated_at": "2025-05-29T14:27:44.000000Z"
                            }
                          ],
                          "created_at": "2025-05-29T14:27:44.000000Z",
                          "updated_at": "2025-05-29T14:27:44.000000Z"
                        }
                      ],
                      "pagination": {
                        "total": 25,
                        "per_page": 10,
                        "current_page": 1,
                        "last_page": 3
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "transactions": [
                        {
                          "id": 177,
                          "user_id": 14,
                          "transaction_type": "withdrawal",
                          "status": "pending",
                          "amount": "2900.00000000",
                          "amount_in_lc": "2900.00",
                          "grand_total": "2900.00000000",
                          "grand_total_in_lc": "2900.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "2900.00000000",
                          "deposited_amount_in_lc": "2900.00",
                          "amount_trimmed": "2,900",
                          "grand_total_trimmed": "2,900",
                          "grand_total_in_lc_trimmed": "2,900",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": "USD",
                          "description": "Withdrawal Request",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [],
                          "created_at": "2025-06-09T00:22:56.000000Z",
                          "updated_at": "2025-06-09T00:22:56.000000Z"
                        },
                        {
                          "id": 176,
                          "user_id": 14,
                          "transaction_type": "deposit",
                          "status": "cancelled",
                          "amount": "2400.00000000",
                          "amount_in_lc": "2400.00",
                          "grand_total": "2400.00000000",
                          "grand_total_in_lc": "2400.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "2400.00000000",
                          "deposited_amount_in_lc": "2400.00",
                          "amount_trimmed": "2,400",
                          "grand_total_trimmed": "2,400",
                          "grand_total_in_lc_trimmed": "2,400",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": "USD",
                          "description": "Deposit",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [
                            {
                              "id": 174,
                              "transaction_id": 176,
                              "amount": "2400.00000000",
                              "currency": "USD",
                              "status": "cancelled",
                              "payment_method": "CARD",
                              "created_at": "2025-06-09T00:19:39.000000Z",
                              "updated_at": "2025-06-09T00:21:43.000000Z"
                            }
                          ],
                          "created_at": "2025-06-09T00:19:38.000000Z",
                          "updated_at": "2025-06-09T00:21:43.000000Z"
                        },
                        {
                          "id": 175,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "cancelled",
                          "amount": "328.00000000",
                          "amount_in_lc": "328.00",
                          "grand_total": "328.00000000",
                          "grand_total_in_lc": "328.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "20.00000000",
                          "deposited_amount": "328.00000000",
                          "deposited_amount_in_lc": "328.00",
                          "amount_trimmed": "328",
                          "grand_total_trimmed": "328",
                          "grand_total_in_lc_trimmed": "328",
                          "balance_used_trimmed": "20",
                          "currency": "USD",
                          "user_currency": "USD",
                          "description": "Subscription purchase for plan Standard Annual Plan",
                          "subscription_plan": {
                            "id": 14,
                            "name": "Standard Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 172,
                              "transaction_id": 175,
                              "amount": "20.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-06-09T00:15:24.000000Z",
                              "updated_at": "2025-06-09T00:15:24.000000Z"
                            },
                            {
                              "id": 173,
                              "transaction_id": 175,
                              "amount": "328.00000000",
                              "currency": "USD",
                              "status": "cancelled",
                              "payment_method": "CARD",
                              "created_at": "2025-06-09T00:15:25.000000Z",
                              "updated_at": "2025-06-09T00:19:10.000000Z"
                            }
                          ],
                          "created_at": "2025-06-09T00:15:24.000000Z",
                          "updated_at": "2025-06-09T00:19:10.000000Z"
                        },
                        {
                          "id": 158,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "completed",
                          "amount": "444.00000000",
                          "amount_in_lc": "444.00",
                          "grand_total": "444.00000000",
                          "grand_total_in_lc": "444.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "20.00000000",
                          "deposited_amount": "444.00000000",
                          "deposited_amount_in_lc": "444.00",
                          "amount_trimmed": "444",
                          "grand_total_trimmed": "444",
                          "grand_total_in_lc_trimmed": "444",
                          "balance_used_trimmed": "20",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Subscription purchase for plan Premium Annual Plan",
                          "subscription_plan": {
                            "id": 15,
                            "name": "Premium Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 155,
                              "transaction_id": 158,
                              "amount": "20.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-06-03T02:14:24.000000Z",
                              "updated_at": "2025-06-03T02:14:24.000000Z"
                            },
                            {
                              "id": 156,
                              "transaction_id": 158,
                              "amount": "444.00000000",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "SWIFT",
                              "created_at": "2025-06-03T02:14:24.000000Z",
                              "updated_at": "2025-06-03T02:35:31.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T02:14:24.000000Z",
                          "updated_at": "2025-06-03T02:35:31.000000Z"
                        },
                        {
                          "id": 157,
                          "user_id": 14,
                          "transaction_type": "withdrawal",
                          "status": "canceled",
                          "amount": "200000.00000000",
                          "amount_in_lc": "200000.00",
                          "grand_total": "200000.00000000",
                          "grand_total_in_lc": "200000.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "200000.00000000",
                          "deposited_amount_in_lc": "200000.00",
                          "amount_trimmed": "200,000",
                          "grand_total_trimmed": "200,000",
                          "grand_total_in_lc_trimmed": "200,000",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Withdrawal Request",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [],
                          "created_at": "2025-06-03T02:07:45.000000Z",
                          "updated_at": "2025-06-03T02:07:45.000000Z"
                        },
                        {
                          "id": 156,
                          "user_id": 14,
                          "transaction_type": "withdrawal",
                          "status": "completed",
                          "amount": "12000.00000000",
                          "amount_in_lc": "12000.00",
                          "grand_total": "12000.00000000",
                          "grand_total_in_lc": "12000.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "12000.00000000",
                          "deposited_amount_in_lc": "12000.00",
                          "amount_trimmed": "12,000",
                          "grand_total_trimmed": "12,000",
                          "grand_total_in_lc_trimmed": "12,000",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Withdrawal Request",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [],
                          "created_at": "2025-06-03T02:07:24.000000Z",
                          "updated_at": "2025-06-03T02:07:44.000000Z"
                        },
                        {
                          "id": 155,
                          "user_id": 14,
                          "transaction_type": "deposit",
                          "status": "completed",
                          "amount": "10.00000000",
                          "amount_in_lc": "10.00",
                          "grand_total": "10.00000000",
                          "grand_total_in_lc": "10.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "10.00000000",
                          "deposited_amount_in_lc": "10.00",
                          "amount_trimmed": "10",
                          "grand_total_trimmed": "10",
                          "grand_total_in_lc_trimmed": "10",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Deposit",
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [
                            {
                              "id": 154,
                              "transaction_id": 155,
                              "amount": "10.00000000",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "SWIFT",
                              "created_at": "2025-06-03T02:06:55.000000Z",
                              "updated_at": "2025-06-03T02:08:05.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T02:06:54.000000Z",
                          "updated_at": "2025-06-03T02:08:05.000000Z"
                        },
                        {
                          "id": 154,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "completed",
                          "amount": "0.00000000",
                          "amount_in_lc": "0.00",
                          "grand_total": "0.00000000",
                          "grand_total_in_lc": "0.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "116.00000000",
                          "deposited_amount": "0.00000000",
                          "deposited_amount_in_lc": "0.00",
                          "amount_trimmed": "0",
                          "grand_total_trimmed": "0",
                          "grand_total_in_lc_trimmed": "0",
                          "balance_used_trimmed": "116",
                          "currency": "USD",
                          "user_currency": null,
                          "description": "Subscription upgrade from Premium Annual Plan to VIP Annual Plan",
                          "subscription_plan": {
                            "id": 16,
                            "name": "VIP Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 153,
                              "transaction_id": 154,
                              "amount": "116.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-06-03T02:02:19.000000Z",
                              "updated_at": "2025-06-03T02:02:19.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T02:02:19.000000Z",
                          "updated_at": "2025-06-03T02:02:19.000000Z"
                        },
                        {
                          "id": 153,
                          "user_id": 14,
                          "transaction_type": "deposit",
                          "status": "completed",
                          "amount": "240000.00000000",
                          "amount_in_lc": "240000.00",
                          "grand_total": "240000.00000000",
                          "grand_total_in_lc": "240000.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "0.00000000",
                          "deposited_amount": "240000.00000000",
                          "deposited_amount_in_lc": "240000.00",
                          "amount_trimmed": "240,000",
                          "grand_total_trimmed": "240,000",
                          "grand_total_in_lc_trimmed": "240,000",
                          "balance_used_trimmed": "0",
                          "currency": "USD",
                          "user_currency": null,
                          "description": null,
                          "counterparty": {
                            "id": 14,
                            "first_name": "Alfi",
                            "last_name": "Syahri",
                            "public_username": "mrriyous",
                            "profile_picture_url": "http://localhost:8000/storage/profile-pictures/14_1748358438.jpg"
                          },
                          "payments": [
                            {
                              "id": 152,
                              "transaction_id": 153,
                              "amount": "240000.00000000",
                              "currency": "USD",
                              "status": "completed",
                              "payment_method": "SWIFT",
                              "created_at": "2025-06-03T01:48:08.000000Z",
                              "updated_at": "2025-06-03T01:57:44.000000Z"
                            }
                          ],
                          "created_at": "2025-06-03T01:48:08.000000Z",
                          "updated_at": "2025-06-03T01:57:44.000000Z"
                        },
                        {
                          "id": 152,
                          "user_id": 14,
                          "transaction_type": "subscription",
                          "status": "completed",
                          "amount": "0.00000000",
                          "amount_in_lc": "0.00",
                          "grand_total": "0.00000000",
                          "grand_total_in_lc": "0.00",
                          "exchange_rate": "1.00000000",
                          "balance_used": "464.00000000",
                          "deposited_amount": "0.00000000",
                          "deposited_amount_in_lc": "0.00",
                          "amount_trimmed": "0",
                          "grand_total_trimmed": "0",
                          "grand_total_in_lc_trimmed": "0",
                          "balance_used_trimmed": "464",
                          "currency": "USD",
                          "user_currency": null,
                          "description": null,
                          "subscription_plan": {
                            "id": 15,
                            "name": "Premium Annual Plan",
                            "price": null
                          },
                          "counterparty": {
                            "first_name": "MMM",
                            "last_name": "Finance",
                            "public_username": "",
                            "profile_picture_url": "http://localhost:8001/static/images/logo.png"
                          },
                          "payments": [
                            {
                              "id": 151,
                              "transaction_id": 152,
                              "amount": "464.00000000",
                              "currency": "USD",
                              "status": "reserved",
                              "payment_method": "BALANCE",
                              "created_at": "2025-05-29T14:27:44.000000Z",
                              "updated_at": "2025-05-29T14:27:44.000000Z"
                            }
                          ],
                          "created_at": "2025-05-29T14:27:44.000000Z",
                          "updated_at": "2025-05-29T14:27:44.000000Z"
                        }
                      ],
                      "pagination": {
                        "total": 25,
                        "per_page": 10,
                        "current_page": 1,
                        "last_page": 3
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Authentication required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Unauthorized": {
                      "value": {
                        "error": true,
                        "message": "Authentication required"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-transactions",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions/{transaction_number}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "transaction_number",
          "in": "path",
          "required": true,
          "description": "Transaction number (e.g., \"20250125123456\")"
        }
      ],
      "get": {
        "summary": "Get Transaction Details",
        "description": "Retrieves detailed information about a specific transaction, including related data like subscription plans, payments, and Stripe checkout sessions.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "transaction": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Transaction ID"
                        },
                        "transaction_number": {
                          "type": "string",
                          "description": "Human-readable transaction number"
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "User ID"
                        },
                        "transaction_type": {
                          "type": "string",
                          "description": "Transaction type"
                        },
                        "subscription_transaction_type": {
                          "type": "string",
                          "nullable": true,
                          "description": "Subscription transaction type"
                        },
                        "currency": {
                          "type": "string",
                          "description": "Transaction currency"
                        },
                        "user_currency": {
                          "type": "string",
                          "nullable": true,
                          "description": "User's preferred currency"
                        },
                        "status": {
                          "type": "string",
                          "description": "Transaction status"
                        },
                        "status_label": {
                          "type": "string",
                          "description": "Human-readable status"
                        },
                        "status_classes_str": {
                          "type": "string",
                          "description": "Tailwind CSS classes for styling"
                        },
                        "status_bg_color": {
                          "type": "string",
                          "description": "Hex color code for background"
                        },
                        "status_text_color": {
                          "type": "string",
                          "description": "Hex color code for text"
                        },
                        "payment_method": {
                          "type": "string",
                          "nullable": true,
                          "description": "Payment method used"
                        },
                        "amount": {
                          "type": "number",
                          "description": "Base transaction amount"
                        },
                        "amount_in_lc": {
                          "type": "number",
                          "description": "Amount in local currency"
                        },
                        "grand_total": {
                          "type": "number",
                          "description": "Total amount including fees"
                        },
                        "grand_total_in_lc": {
                          "type": "number",
                          "description": "Grand total in local currency"
                        },
                        "exchange_rate": {
                          "type": "number",
                          "description": "Currency exchange rate"
                        },
                        "balance_used": {
                          "type": "number",
                          "description": "Amount deducted from user balance"
                        },
                        "deposited_amount": {
                          "type": "number",
                          "description": "Actual amount deposited/withdrawn"
                        },
                        "deposited_amount_in_lc": {
                          "type": "number",
                          "description": "Deposited amount in local currency"
                        },
                        "subscription_plan_id": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Subscription plan ID"
                        },
                        "comment": {
                          "type": "string",
                          "nullable": true,
                          "description": "Additional comment"
                        },
                        "deposit_transaction_id": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Original deposit transaction ID"
                        },
                        "subscription_transaction_id": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Resulting subscription transaction ID"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Transaction description"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Transaction creation timestamp"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Transaction last update timestamp"
                        },
                        "deleted_at": {
                          "type": "string",
                          "nullable": true,
                          "format": "date-time",
                          "description": "Transaction deletion timestamp"
                        },
                        "withdrawal_bank_name": {
                          "type": "string",
                          "nullable": true,
                          "description": "Bank name for withdrawal"
                        },
                        "withdrawal_bank_swift_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Bank SWIFT code for withdrawal"
                        },
                        "withdrawal_bank_account_number": {
                          "type": "string",
                          "nullable": true,
                          "description": "Bank account number for withdrawal"
                        },
                        "withdrawal_bank_receiver_name": {
                          "type": "string",
                          "nullable": true,
                          "description": "Receiver name for withdrawal"
                        },
                        "withdrawal_wallet_address": {
                          "type": "string",
                          "nullable": true,
                          "description": "Wallet address for withdrawal"
                        },
                        "subscription_error": {
                          "type": "string",
                          "nullable": true,
                          "description": "Subscription error message if any"
                        },
                        "balance_used_trimmed": {
                          "type": "string",
                          "description": "Formatted balance used for display"
                        },
                        "amount_trimmed": {
                          "type": "string",
                          "description": "Formatted amount for display"
                        },
                        "grand_total_trimmed": {
                          "type": "string",
                          "description": "Formatted grand total for display"
                        },
                        "grand_total_in_lc_trimmed": {
                          "type": "string",
                          "description": "Formatted grand total in local currency"
                        },
                        "deposited_amount_in_lc_trimmed": {
                          "type": "string",
                          "description": "Formatted deposited amount in local currency"
                        },
                        "deposited_amount_trimmed": {
                          "type": "string",
                          "description": "Formatted deposited amount for display"
                        },
                        "subscription_plan": {
                          "type": "object",
                          "description": "Subscription plan information",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "Subscription plan ID"
                            },
                            "level": {
                              "type": "integer",
                              "description": "Subscription plan level"
                            },
                            "name": {
                              "type": "string",
                              "description": "Subscription plan name"
                            },
                            "description": {
                              "type": "string",
                              "description": "Subscription plan description"
                            },
                            "duration": {
                              "type": "integer",
                              "description": "Subscription duration in days"
                            },
                            "features": {
                              "type": "array",
                              "description": "Subscription plan features",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "title": {
                                    "type": "string",
                                    "description": "Feature title"
                                  },
                                  "support": {
                                    "type": "integer",
                                    "description": "Feature support level"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "stripe_checkout_session": {
                          "type": "object",
                          "nullable": true,
                          "description": "Stripe checkout session information"
                        },
                        "payments": {
                          "type": "array",
                          "description": "Collection of payment attempts for the transaction",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Payment ID"
                              },
                              "transaction_id": {
                                "type": "integer",
                                "description": "Transaction ID"
                              },
                              "payment_method": {
                                "type": "string",
                                "description": "Payment method used"
                              },
                              "amount": {
                                "type": "number",
                                "description": "Payment amount"
                              },
                              "amount_in_lc": {
                                "type": "number",
                                "description": "Payment amount in local currency"
                              },
                              "currency": {
                                "type": "string",
                                "description": "Payment currency"
                              },
                              "status": {
                                "type": "string",
                                "description": "Payment status"
                              },
                              "payment_session_id": {
                                "type": "string",
                                "description": "Payment session ID"
                              },
                              "payment_url": {
                                "type": "string",
                                "description": "Payment URL"
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Payment creation timestamp"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Payment last update timestamp"
                              }
                            }
                          }
                        },
                        "deposit_transaction": {
                          "type": "object",
                          "nullable": true,
                          "description": "Original deposit transaction information"
                        },
                        "subscription": {
                          "type": "object",
                          "description": "Subscription information",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "Subscription ID"
                            },
                            "user_id": {
                              "type": "integer",
                              "description": "User ID"
                            },
                            "subscription_plan_id": {
                              "type": "integer",
                              "description": "Subscription plan ID"
                            },
                            "status": {
                              "type": "string",
                              "description": "Subscription status"
                            },
                            "start_date": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Subscription start date"
                            },
                            "end_date": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Subscription end date"
                            }
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "transaction": {
                        "id": 1,
                        "user_id": 1,
                        "transaction_type": "subscription",
                        "subscription_transaction_type": "subscription",
                        "currency": "USD",
                        "user_currency": "USD",
                        "status": "completed",
                        "payment_method": "BTC",
                        "amount": 464.00,
                        "amount_in_lc": 464.00,
                        "grand_total": 464.00,
                        "grand_total_in_lc": 464.00,
                        "exchange_rate": 1.00,
                        "balance_used": 0.00,
                        "deposited_amount": 464.00,
                        "deposited_amount_in_lc": 464.00,
                        "subscription_plan_id": 2,
                        "comment": "Premium subscription purchase",
                        "description": "Premium Annual Plan subscription",
                        "subscription_error": null,
                        "deposit_transaction_id": null,
                        "subscription_transaction_id": null,
                        "subscription_plan": {
                          "id": 2,
                          "level": 2,
                          "name": "Premium Annual Plan",
                          "description": "Premium subscription plan with advanced features",
                          "duration": 365,
                          "features": [
                            {
                              "title": "All Standard Plan Features",
                              "support": 1
                            }
                          ]
                        },
                        "stripe_checkout_session": null,
                        "payments": [
                          {
                            "id": 1,
                            "transaction_id": 1,
                            "payment_method": "BTC",
                            "amount": 464.00,
                            "amount_in_lc": 464.00,
                            "currency": "USD",
                            "status": "completed",
                            "payment_session_id": "cg_123456",
                            "payment_url": "https://payment-gateway.com/pay/abc123",
                            "created_at": "2024-01-01T10:00:00.000000Z",
                            "updated_at": "2024-01-01T10:00:00.000000Z"
                          }
                        ],
                        "deposit_transaction": null,
                        "subscription": {
                          "id": 1,
                          "user_id": 1,
                          "subscription_plan_id": 2,
                          "status": "active",
                          "start_date": "2024-01-01T10:00:00.000000Z",
                          "end_date": "2024-12-31T23:59:59.000000Z"
                        },
                        "created_at": "2024-01-01T10:00:00.000000Z",
                        "updated_at": "2024-01-01T10:00:00.000000Z",
                        "deleted_at": null
                      }
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "transaction": {
                        "id": 1,
                        "transaction_number": "TXN-2024-001234",
                        "user_id": 1,
                        "transaction_type": "subscription",
                        "subscription_transaction_type": "subscription",
                        "currency": "USD",
                        "user_currency": "USD",
                        "status": "completed",
                        "status_label": "Completed",
                        "status_classes_str": "bg-green-100 text-green-700",
                        "status_bg_color": "#dcfce7",
                        "status_text_color": "#15803d",
                        "payment_method": "BTC",
                        "amount": 464.00,
                        "amount_in_lc": 464.00,
                        "grand_total": 464.00,
                        "grand_total_in_lc": 464.00,
                        "exchange_rate": 1.00,
                        "balance_used": 0.00,
                        "deposited_amount": 464.00,
                        "deposited_amount_in_lc": 464.00,
                        "subscription_plan_id": 2,
                        "comment": "Premium subscription purchase",
                        "description": "Premium Annual Plan subscription",
                        "subscription_error": null,
                        "deposit_transaction_id": null,
                        "subscription_transaction_id": null,
                        "subscription_plan": {
                          "id": 2,
                          "level": 2,
                          "name": "Premium Annual Plan",
                          "description": "Premium subscription plan with advanced features",
                          "duration": 365,
                          "features": [
                            {
                              "title": "All Standard Plan Features",
                              "support": 1
                            }
                          ]
                        },
                        "stripe_checkout_session": null,
                        "payments": [
                          {
                            "id": 1,
                            "transaction_id": 1,
                            "payment_method": "BTC",
                            "amount": 464.00,
                            "amount_in_lc": 464.00,
                            "currency": "USD",
                            "status": "completed",
                            "payment_session_id": "cg_123456",
                            "payment_url": "https://payment-gateway.com/pay/abc123",
                            "created_at": "2024-01-01T10:00:00.000000Z",
                            "updated_at": "2024-01-01T10:00:00.000000Z"
                          }
                        ],
                        "deposit_transaction": null,
                        "subscription": {
                          "id": 1,
                          "user_id": 1,
                          "subscription_plan_id": 2,
                          "status": "active",
                          "start_date": "2024-01-01T10:00:00.000000Z",
                          "end_date": "2024-12-31T23:59:59.000000Z"
                        },
                        "created_at": "2024-01-01T10:00:00.000000Z",
                        "updated_at": "2024-01-01T10:00:00.000000Z",
                        "deleted_at": null
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Authentication required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Unauthorized": {
                      "value": {
                        "error": true,
                        "message": "Authentication required"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Transaction not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Transaction Not Found": {
                      "value": {
                        "error": true,
                        "message": "Transaction not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-transactions-transaction-number",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions/{transaction_number}/status": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "transaction_number",
          "in": "path",
          "required": true,
          "description": "Transaction number (e.g., \"20250125123456\")"
        }
      ],
      "get": {
        "summary": "Get Transaction Status",
        "description": "Retrieves only the status of a specific transaction. Useful for checking transaction status without loading full details.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "status": "completed"
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "status": "completed"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Authentication required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Unauthorized": {
                      "value": {
                        "error": true,
                        "message": "Authentication required"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Transaction not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Transaction Not Found": {
                      "value": {
                        "error": true,
                        "message": "Transaction not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-transactions-transaction-number-status",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/transactions/{transaction_number}/cancel": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "transaction_number",
          "in": "path",
          "required": true,
          "description": "Transaction number (e.g., \"20250125123456\")"
        }
      ],
      "post": {
        "summary": "Cancel Transaction",
        "description": "Cancels a pending transaction. Only transactions in pending status can be cancelled.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Successfully cancelled transaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Transaction cancelled successfully"
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "message": "Transaction cancelled successfully"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Authentication required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Unauthorized": {
                      "value": {
                        "error": true,
                        "message": "Authentication required"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Cancellation failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Cancellation Failed": {
                      "value": {
                        "error": true,
                        "message": "Failed to cancel transaction"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Transaction not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "Transaction Not Found": {
                      "value": {
                        "error": true,
                        "message": "Transaction not found"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-transactions-transaction-number-cancel",
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/payment-methods": {
      "get": {
        "summary": "Get Payment Methods List",
        "description": "Retrieves all available payment methods with their configuration details. Can be filtered by type to show only methods available for specific operations. Cryptocurrency payments now use direct wallet addresses for manual transfers instead of redirecting to payment gateways.",
        "tags": ["Payment Methods"],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter payment methods by type. Accepts: subscription, deposit, withdrawal",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["subscription", "deposit", "withdrawal"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "description": "Always false for successful responses"
                    },
                    "type": {
                      "type": ["string", "null"],
                      "description": "The filter type applied, or null if no filter was used"
                    },
                    "data": {
                      "type": "array",
                      "description": "Array of payment method objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "withdrawal": {
                            "type": "boolean",
                            "description": "Whether this payment method supports withdrawals"
                          },
                          "type": {
                            "type": "string",
                            "description": "Payment method type (bank_transfer, card, crypto_wallet)",
                            "enum": ["bank_transfer", "card", "crypto_wallet"]
                          },
                          "icon": {
                            "type": "string",
                            "description": "Relative path to the payment method icon"
                          },
                          "icon_url": {
                            "type": "string",
                            "description": "Full URL to the payment method icon"
                          },
                          "name": {
                            "type": "string",
                            "description": "Display name of the payment method"
                          },
                          "fields": {
                            "type": "array",
                            "description": "Array of field objects (for bank transfers and crypto wallets)",
                            "items": {
                              "type": "object",
                              "properties": {
                                "label": {
                                  "type": "string",
                                  "description": "Display label for the field"
                                },
                                "value": {
                                  "type": "string",
                                  "description": "The actual value for the field"
                                }
                              }
                            }
                          },
                          "message": {
                            "type": "string",
                            "description": "User message for payment method (optional)"
                          },
                          "currency": {
                            "type": "string",
                            "description": "Currency code for crypto payments (optional)"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "All Payment Methods": {
                      "error": false,
                      "type": null,
                      "data": [
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_swift_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_swift_icon.svg",
                          "name": "SWIFT",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "005340104169"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "Regusto Inc."
                            },
                            {
                              "label": "Bank Name",
                              "value": "Banco de Oro"
                            },
                            {
                              "label": "Bank Address",
                              "value": "GC Corporate Plaza, Makati"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "BNORPHMM"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_sepa_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_sepa_icon.svg",
                          "name": "SEPA",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "SEPA-123456789"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "MMM Financial Services"
                            },
                            {
                              "label": "Bank Name",
                              "value": "Crédit Agricole Group"
                            },
                            {
                              "label": "IBAN",
                              "value": "FR76300060000"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "FR76300060000"
                            }
                          ]
                        },
                        {
                          "withdrawal": false,
                          "type": "card",
                          "icon": "static/icons/payment_card_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_card_icon.svg",
                          "name": "CARD",
                          "message": "You will be redirected to our secure payment gateway to complete your transaction."
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_usdt_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_usdt_icon.svg",
                          "name": "USDT",
                          "currency": "USDT",
                          "fields": [
                            {
                              "label": "USDT TRC20",
                              "value": "TNffNZoWwCv9Ep4e82cVexBVTfLdZna5tC"
                            },
                            {
                              "label": "USDT BEP20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            },
                            {
                              "label": "USDT ERC20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_bitcoin_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_bitcoin_icon.svg",
                          "name": "BTC",
                          "currency": "BTC",
                          "fields": [
                            {
                              "label": "BTC",
                              "value": "bc1qn3tlm2hxs5vsuu6xvpjt0f6uq738jnt53ae9qx"
                            }
                          ]
                        }
                      ]
                    },
                    "Withdrawal Methods Only": {
                      "error": false,
                      "type": "withdrawal",
                      "data": [
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_swift_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_swift_icon.svg",
                          "name": "SWIFT",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "005340104169"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "Regusto Inc."
                            },
                            {
                              "label": "Bank Name",
                              "value": "Banco de Oro"
                            },
                            {
                              "label": "Bank Address",
                              "value": "GC Corporate Plaza, Makati"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "BNORPHMM"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_sepa_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_sepa_icon.svg",
                          "name": "SEPA",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "SEPA-123456789"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "MMM Financial Services"
                            },
                            {
                              "label": "Bank Name",
                              "value": "Crédit Agricole Group"
                            },
                            {
                              "label": "IBAN",
                              "value": "FR76300060000"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "FR76300060000"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_usdt_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_usdt_icon.svg",
                          "name": "USDT",
                          "currency": "USDT",
                          "fields": [
                            {
                              "label": "USDT TRC20",
                              "value": "TNffNZoWwCv9Ep4e82cVexBVTfLdZna5tC"
                            },
                            {
                              "label": "USDT BEP20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            },
                            {
                              "label": "USDT ERC20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_bitcoin_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_bitcoin_icon.svg",
                          "name": "BTC",
                          "currency": "BTC",
                          "fields": [
                            {
                              "label": "BTC",
                              "value": "bc1qn3tlm2hxs5vsuu6xvpjt0f6uq738jnt53ae9qx"
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "All Payment Methods": {
                    "value": {
                      "error": false,
                      "type": null,
                      "data": [
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_swift_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_swift_icon.svg",
                          "name": "SWIFT",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "005340104169"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "Regusto Inc."
                            },
                            {
                              "label": "Bank Name",
                              "value": "Banco de Oro"
                            },
                            {
                              "label": "Bank Address",
                              "value": "GC Corporate Plaza, Makati"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "BNORPHMM"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_sepa_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_sepa_icon.svg",
                          "name": "SEPA",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "SEPA-123456789"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "MMM Financial Services"
                            },
                            {
                              "label": "Bank Name",
                              "value": "Crédit Agricole Group"
                            },
                            {
                              "label": "IBAN",
                              "value": "FR76300060000"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "FR76300060000"
                            }
                          ]
                        },
                        {
                          "withdrawal": false,
                          "type": "card",
                          "icon": "static/icons/payment_card_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_card_icon.svg",
                          "name": "CARD",
                          "message": "You will be redirected to our secure payment gateway to complete your transaction."
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_usdt_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_usdt_icon.svg",
                          "name": "USDT",
                          "currency": "USDT",
                          "fields": [
                            {
                              "label": "USDT TRC20",
                              "value": "TNffNZoWwCv9Ep4e82cVexBVTfLdZna5tC"
                            },
                            {
                              "label": "USDT BEP20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            },
                            {
                              "label": "USDT ERC20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_bitcoin_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_bitcoin_icon.svg",
                          "name": "BTC",
                          "currency": "BTC",
                          "fields": [
                            {
                              "label": "BTC",
                              "value": "bc1qn3tlm2hxs5vsuu6xvpjt0f6uq738jnt53ae9qx"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Withdrawal Methods Only": {
                    "value": {
                      "error": false,
                      "type": "withdrawal",
                      "data": [
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_swift_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_swift_icon.svg",
                          "name": "SWIFT",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "005340104169"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "Regusto Inc."
                            },
                            {
                              "label": "Bank Name",
                              "value": "Banco de Oro"
                            },
                            {
                              "label": "Bank Address",
                              "value": "GC Corporate Plaza, Makati"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "BNORPHMM"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "bank_transfer",
                          "icon": "static/icons/payment_sepa_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_sepa_icon.svg",
                          "name": "SEPA",
                          "fields": [
                            {
                              "label": "Account Number",
                              "value": "SEPA-123456789"
                            },
                            {
                              "label": "Account Holder Name",
                              "value": "MMM Financial Services"
                            },
                            {
                              "label": "Bank Name",
                              "value": "Crédit Agricole Group"
                            },
                            {
                              "label": "IBAN",
                              "value": "FR76300060000"
                            },
                            {
                              "label": "SWIFT Code",
                              "value": "FR76300060000"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_usdt_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_usdt_icon.svg",
                          "name": "USDT",
                          "currency": "USDT",
                          "fields": [
                            {
                              "label": "USDT TRC20",
                              "value": "TNffNZoWwCv9Ep4e82cVexBVTfLdZna5tC"
                            },
                            {
                              "label": "USDT BEP20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            },
                            {
                              "label": "USDT ERC20",
                              "value": "0xd220368fB7C910A552C26e725a18b1BfB3A6684E"
                            }
                          ]
                        },
                        {
                          "withdrawal": true,
                          "type": "crypto_wallet",
                          "icon": "static/icons/payment_bitcoin_icon.svg",
                          "icon_url": "https://startup2050.com/static/icons/payment_bitcoin_icon.svg",
                          "name": "BTC",
                          "currency": "BTC",
                          "fields": [
                            {
                              "label": "BTC",
                              "value": "bc1qn3tlm2hxs5vsuu6xvpjt0f6uq738jnt53ae9qx"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-payment-methods"
      }
    },
    "/currencies": {
      "get": {
        "summary": "Get Currencies",
        "tags": [
          "Currencies"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "code": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "symbol": {
                            "type": "string"
                          },
                          "prefix": {
                            "type": "string"
                          },
                          "suffix": {
                            "type": "string"
                          },
                          "icon": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "updated_at": {
                            "type": "string"
                          },
                          "deleted_at": {
                            "type": "null"
                          },
                          "icon_url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": [
                        {
                          "id": 10,
                          "code": "USD",
                          "name": "US Dollar",
                          "symbol": "$",
                          "prefix": "$",
                          "suffix": "",
                          "icon": "/static/icons/currency/usd.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/usd.png"
                        },
                        {
                          "id": 11,
                          "code": "EUR",
                          "name": "Euro",
                          "symbol": "€",
                          "prefix": "€",
                          "suffix": "",
                          "icon": "/static/icons/currency/eur.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/eur.png"
                        },
                        {
                          "id": 12,
                          "code": "GBP",
                          "name": "British Pound",
                          "symbol": "£",
                          "prefix": "£",
                          "suffix": "",
                          "icon": "/static/icons/currency/gbp.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/gbp.png"
                        },
                        {
                          "id": 13,
                          "code": "SGD",
                          "name": "Singapore Dollar",
                          "symbol": "S$",
                          "prefix": "S$",
                          "suffix": "",
                          "icon": "/static/icons/currency/sgd.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/sgd.png"
                        },
                        {
                          "id": 14,
                          "code": "HKD",
                          "name": "Hong Kong Dollar",
                          "symbol": "HK$",
                          "prefix": "HK$",
                          "suffix": "",
                          "icon": "/static/icons/currency/hkd.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/hkd.png"
                        },
                        {
                          "id": 15,
                          "code": "CNY",
                          "name": "Chinese Yuan",
                          "symbol": "¥",
                          "prefix": "¥",
                          "suffix": "",
                          "icon": "/static/icons/currency/cny.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/cny.png"
                        },
                        {
                          "id": 16,
                          "code": "PHP",
                          "name": "Philippine Peso",
                          "symbol": "₱",
                          "prefix": "₱",
                          "suffix": "",
                          "icon": "/static/icons/currency/php.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/php.png"
                        },
                        {
                          "id": 17,
                          "code": "RUB",
                          "name": "Russian Ruble",
                          "symbol": "₽",
                          "prefix": "₽",
                          "suffix": "",
                          "icon": "/static/icons/currency/rub.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/rub.png"
                        },
                        {
                          "id": 18,
                          "code": "JPY",
                          "name": "Japanese Yen",
                          "symbol": "¥",
                          "prefix": "¥",
                          "suffix": "",
                          "icon": "/static/icons/currency/jpy.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/jpy.png"
                        }
                      ]
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "error": false,
                      "data": [
                        {
                          "id": 10,
                          "code": "USD",
                          "name": "US Dollar",
                          "symbol": "$",
                          "prefix": "$",
                          "suffix": "",
                          "icon": "/static/icons/currency/usd.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/usd.png"
                        },
                        {
                          "id": 11,
                          "code": "EUR",
                          "name": "Euro",
                          "symbol": "€",
                          "prefix": "€",
                          "suffix": "",
                          "icon": "/static/icons/currency/eur.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/eur.png"
                        },
                        {
                          "id": 12,
                          "code": "GBP",
                          "name": "British Pound",
                          "symbol": "£",
                          "prefix": "£",
                          "suffix": "",
                          "icon": "/static/icons/currency/gbp.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/gbp.png"
                        },
                        {
                          "id": 13,
                          "code": "SGD",
                          "name": "Singapore Dollar",
                          "symbol": "S$",
                          "prefix": "S$",
                          "suffix": "",
                          "icon": "/static/icons/currency/sgd.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/sgd.png"
                        },
                        {
                          "id": 14,
                          "code": "HKD",
                          "name": "Hong Kong Dollar",
                          "symbol": "HK$",
                          "prefix": "HK$",
                          "suffix": "",
                          "icon": "/static/icons/currency/hkd.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/hkd.png"
                        },
                        {
                          "id": 15,
                          "code": "CNY",
                          "name": "Chinese Yuan",
                          "symbol": "¥",
                          "prefix": "¥",
                          "suffix": "",
                          "icon": "/static/icons/currency/cny.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/cny.png"
                        },
                        {
                          "id": 16,
                          "code": "PHP",
                          "name": "Philippine Peso",
                          "symbol": "₱",
                          "prefix": "₱",
                          "suffix": "",
                          "icon": "/static/icons/currency/php.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/php.png"
                        },
                        {
                          "id": 17,
                          "code": "RUB",
                          "name": "Russian Ruble",
                          "symbol": "₽",
                          "prefix": "₽",
                          "suffix": "",
                          "icon": "/static/icons/currency/rub.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/rub.png"
                        },
                        {
                          "id": 18,
                          "code": "JPY",
                          "name": "Japanese Yen",
                          "symbol": "¥",
                          "prefix": "¥",
                          "suffix": "",
                          "icon": "/static/icons/currency/jpy.png",
                          "created_at": "2025-06-03T12:31:20.000000Z",
                          "updated_at": "2025-06-03T12:31:20.000000Z",
                          "deleted_at": null,
                          "icon_url": "http://localhost:8001/static/icons/currency/jpy.png"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-currencies"
      }
    },
    "/chats": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get All Chats",
        "description": "Retrieves all chat rooms for the authenticated user with filtering options. Supports filtering by chat type (all, archived, deleted) and read status (all, read, unread). Returns comprehensive chat room information including last message, chat partner details, subscription info, and room metadata. Excludes muted chats from unread counts.",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": ["all", "archived", "deleted"],
              "default": "all"
            },
            "in": "query",
            "name": "type",
            "description": "Filter by chat type: all, archived, deleted (default: all)"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["all", "read", "unread"],
              "default": "all"
            },
            "in": "query",
            "name": "read_status",
            "description": "Filter by read status: all, read, unread (default: all)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "ims": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ChatRoom"
                          }
                        },
                        "count": {
                          "type": "integer",
                          "description": "Number of chat rooms returned",
                          "example": 1
                        },
                        "offset": {
                          "type": "integer",
                          "description": "Pagination offset",
                          "example": 0
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of chat rooms",
                          "example": 1
                        },
                        "success": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": {
                        "ims": [
                          {
                            "_id": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                            "t": "d",
                            "usernames": ["mrriyous", "nuaira"],
                            "usersCount": 2,
                            "msgs": 4,
                            "ts": "2025-08-01T13:14:47.204Z",
                            "uids": ["JrLpEa6BqoncKDyy4", "NBKRo3zLWeBBzwJSh"],
                            "default": false,
                            "ro": false,
                            "sysMes": true,
                            "_USERNAMES": ["mrriyous", "nuaira"],
                            "_updatedAt": "2025-08-03T15:51:48.248Z",
                            "lastMessage": {
                              "rid": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                              "msg": "testing bang",
                              "attachments": [],
                              "ts": "2025-08-03T15:51:48.215Z",
                              "u": {
                                "_id": "NBKRo3zLWeBBzwJSh",
                                "username": "mrriyous",
                                "name": "Alfi Syahri"
                              },
                              "_id": "ifo54W3D4WJSmg28F",
                              "_updatedAt": "2025-08-03T15:51:48.237Z",
                              "urls": [],
                              "mentions": [],
                              "channels": [],
                              "md": [
                                {
                                  "type": "PARAGRAPH",
                                  "value": [
                                    {
                                      "type": "PLAIN_TEXT",
                                      "value": "testing bang"
                                    }
                                  ]
                                }
                              ],
                              "ts_formatted_full_local": "August 03, 2025 10:51pm",
                              "msg_shortened": "testing bang"
                            },
                            "lm": "2025-08-03T15:51:48.215Z",
                            "subscription": {
                              "_id": "ybAnZN3aMvc6xszFL",
                              "rid": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                              "u": {
                                "_id": "NBKRo3zLWeBBzwJSh",
                                "username": "mrriyous"
                              },
                              "_updatedAt": "2025-08-05T12:58:38.234Z",
                              "alert": false,
                              "fname": "nuaira",
                              "groupMentions": 0,
                              "name": "nuaira",
                              "open": true,
                              "t": "d",
                              "ts": "2025-08-01T13:14:47.224Z",
                              "unread": 0,
                              "userMentions": 0,
                              "ls": "2025-08-05T12:58:38.234Z",
                              "ls_in_unix": 1754398718234,
                              "ls_in_date": "2025-08-05 19:58:38",
                              "ls_formatted": "07:58 pm",
                              "ls_formatted_full": "05 August 2025, 07:58pm",
                              "ts_in_unix": 1754054087224,
                              "ts_in_date": "2025-08-01 20:14:47",
                              "ts_formatted": "08:14 pm",
                              "ts_formatted_full": "01 August 2025, 08:14pm",
                              "has_unread_messages": false,
                              "unread_count": 0
                            },
                            "chat_partner": {
                              "id": 17,
                              "login_name": "nuaira",
                              "public_username": "nuaira",
                              "first_name": "Nuaira",
                              "last_name": "Nadira",
                              "email": "nuaira_nadira_nnansndad123@gmail.com",
                              "email_verified_at": null,
                              "hide_images": 0,
                              "email_verified": 1,
                              "gender": "female",
                              "partner_preference": "male",
                              "relationship_goals": "long_term",
                              "role": "srs",
                              "created_at": "2025-08-01T13:11:46.000000Z",
                              "updated_at": "2025-08-04T13:28:21.000000Z",
                              "deleted_at": null,
                              "rocketchat_registered": 1,
                              "rocketchat_user_id": "JrLpEa6BqoncKDyy4",
                              "rocketchat_username": "nuaira",
                              "rocketchat_token": "vXyNyiD8eepEwueqICeeBaoYM45Dp6L7GI9i2bli0-v",
                              "rocketchat_token_expires_at": "2025-10-30 13:13:54",
                              "timeoffset": 420,
                              "affiliate_code": "27F4F9",
                              "referred_by_code": null,
                              "referred_by_user_id": null,
                              "profile_picture_album_url": "http://localhost:8001/images/placeholder_empty_female.png",
                              "profile_picture_url": "http://localhost:8001/images/avatar_female.png",
                              "full_name": "Nuaira Nadira"
                            },
                            "updated_at_in_unixms": 1754236308248,
                            "ts_local": "2025-08-01T20:14:47.204Z",
                            "ts_formatted_local": "August 01, 2025 08:14pm",
                            "message_unread": false,
                            "chatroom_meta": {
                              "id": 2,
                              "room_id": 1,
                              "rocketchat_room_id": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                              "user_id": 16,
                              "rocketchat_user_id": "NBKRo3zLWeBBzwJSh",
                              "rocketchat_username": "mrriyous",
                              "last_seen_at": 1754398718237,
                              "unread_count": 0,
                              "closed_at": null,
                              "deleted_messages_count": 0,
                              "created_at": "2025-08-01T13:15:07.000000Z",
                              "updated_at": "2025-08-05T12:58:38.000000Z",
                              "deleted_at": null,
                              "archived_at": null,
                              "archived": 0,
                              "mute": 0,
                              "last_seen_at_ts": "2025-08-05 12:58:38",
                              "last_seen_at_ts_local": "2025-08-05 19:58:38"
                            },
                            "partners_room_meta": {
                              "id": 1,
                              "room_id": 1,
                              "rocketchat_room_id": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                              "user_id": 17,
                              "rocketchat_user_id": "JrLpEa6BqoncKDyy4",
                              "rocketchat_username": "nuaira",
                              "last_seen_at": 1754236292985,
                              "unread_count": 0,
                              "closed_at": null,
                              "deleted_messages_count": 0,
                              "created_at": "2025-08-01T13:14:47.000000Z",
                              "updated_at": "2025-08-03T15:51:32.000000Z",
                              "deleted_at": null,
                              "archived_at": null,
                              "archived": 0,
                              "mute": 1,
                              "last_seen_at_ts": "2025-08-03 15:51:32",
                              "last_seen_at_ts_local": "2025-08-03 22:51:32"
                            },
                            "is_archived": false,
                            "chat_disabled": false,
                            "is_deleted_after_last_message": false,
                            "message_hidden": false,
                            "message_hidden_text": ""
                          }
                        ],
                        "offset": 0,
                        "count": 1,
                        "total": 1,
                        "success": true
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - RocketChat authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to authenticate user in RocketChat"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/unread-count": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get Unread Count",
        "description": "Retrieves the total unread message count across all chats for the authenticated user (excluding muted chats). This endpoint provides a quick way to get the total number of unread messages without fetching all chat data.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Unread count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "unread_count": {
                          "type": "integer",
                          "description": "Total number of unread messages across all chat rooms",
                          "example": 12
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - RocketChat authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to authenticate user in RocketChat"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{username}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get Chat Room",
        "description": "Retrieves comprehensive information about a specific chat room with a user, including room metadata, last message, chat partner details, subscription information, and room settings. Returns detailed chat room data with timestamps, unread counts, and user preferences.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat room information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ChatRoomData"
                    }
                  }
                },
                "x-examples": {
                  "Example Response": {
                    "error": false,
                    "data": {
                      "_id": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                      "t": "d",
                      "usernames": [
                        "mrriyous",
                        "nuaira"
                      ],
                      "usersCount": 2,
                      "msgs": 4,
                      "ts": "2025-08-01T13:14:47.204Z",
                      "uids": [
                        "JrLpEa6BqoncKDyy4",
                        "NBKRo3zLWeBBzwJSh"
                      ],
                      "default": false,
                      "ro": false,
                      "sysMes": true,
                      "_USERNAMES": [
                        "mrriyous",
                        "nuaira"
                      ],
                      "_updatedAt": "2025-08-03T15:51:48.248Z",
                      "lastMessage": {
                        "rid": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                        "msg": "testing bang",
                        "attachments": [],
                        "ts": "2025-08-03T15:51:48.215Z",
                        "u": {
                          "_id": "NBKRo3zLWeBBzwJSh",
                          "username": "mrriyous",
                          "name": "Alfi Syahri"
                        },
                        "_id": "ifo54W3D4WJSmg28F",
                        "_updatedAt": "2025-08-03T15:51:48.237Z",
                        "urls": [],
                        "mentions": [],
                        "channels": [],
                        "md": [
                          {
                            "type": "PARAGRAPH",
                            "value": [
                              {
                                "type": "PLAIN_TEXT",
                                "value": "testing bang"
                              }
                            ]
                          }
                        ],
                        "ts_formatted_full_local": "August 03, 2025 10:51pm",
                        "msg_shortened": "testing bang"
                      },
                      "lm": "2025-08-03T15:51:48.215Z",
                      "subscription": {
                        "_id": "ybAnZN3aMvc6xszFL",
                        "rid": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                        "u": {
                          "_id": "NBKRo3zLWeBBzwJSh",
                          "username": "mrriyous"
                        },
                        "_updatedAt": "2025-08-05T12:58:38.234Z",
                        "alert": false,
                        "fname": "nuaira",
                        "groupMentions": 0,
                        "name": "nuaira",
                        "open": true,
                        "t": "d",
                        "ts": "2025-08-01T13:14:47.224Z",
                        "unread": 0,
                        "userMentions": 0,
                        "ls": "2025-08-05T12:58:38.234Z",
                        "ls_in_unix": 1754398718234,
                        "ls_in_date": "2025-08-05 19:58:38",
                        "ls_formatted": "07:58 pm",
                        "ls_formatted_full": "05 August 2025, 07:58pm",
                        "ts_in_unix": 1754054087224,
                        "ts_in_date": "2025-08-01 20:14:47",
                        "ts_formatted": "08:14 pm",
                        "ts_formatted_full": "01 August 2025, 08:14pm",
                        "has_unread_messages": false,
                        "unread_count": 0
                      },
                      "chat_partner": {
                        "id": 17,
                        "login_name": "nuaira",
                        "public_username": "nuaira",
                        "first_name": "Nuaira",
                        "last_name": "Nadira",
                        "email": "nuaira_nadira_nnansndad123@gmail.com",
                        "email_verified_at": null,
                        "hide_images": 0,
                        "email_verified": 1,
                        "gender": "female",
                        "partner_preference": "male",
                        "relationship_goals": "long_term",
                        "role": "srs",
                        "created_at": "2025-08-01T13:11:46.000000Z",
                        "updated_at": "2025-08-04T13:28:21.000000Z",
                        "deleted_at": null,
                        "rocketchat_registered": 1,
                        "rocketchat_user_id": "JrLpEa6BqoncKDyy4",
                        "rocketchat_username": "nuaira",
                        "rocketchat_token": "vXyNyiD8eepEwueqICeeBaoYM45Dp6L7GI9i2bli0-v",
                        "rocketchat_token_expires_at": "2025-10-30 13:13:54",
                        "timeoffset": 420,
                        "affiliate_code": "27F4F9",
                        "referred_by_code": null,
                        "referred_by_user_id": null,
                        "profile_picture_album_url": "http://localhost:8001/images/placeholder_empty_female.png",
                        "profile_picture_url": "http://localhost:8001/images/avatar_female.png",
                        "full_name": "Nuaira Nadira"
                      },
                      "updated_at_in_unixms": 1754236308248,
                      "ts_local": "2025-08-01T20:14:47.204Z",
                      "ts_formatted_local": "August 01, 2025 08:14pm",
                      "message_unread": false,
                      "chatroom_meta": {
                        "id": 2,
                        "room_id": 1,
                        "rocketchat_room_id": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                        "user_id": 16,
                        "rocketchat_user_id": "NBKRo3zLWeBBzwJSh",
                        "rocketchat_username": "mrriyous",
                        "last_seen_at": 1754398718237,
                        "unread_count": 0,
                        "closed_at": null,
                        "deleted_messages_count": 0,
                        "created_at": "2025-08-01T13:15:07.000000Z",
                        "updated_at": "2025-08-05T12:58:38.000000Z",
                        "deleted_at": null,
                        "archived_at": null,
                        "archived": 0,
                        "mute": 0,
                        "last_seen_at_ts": "2025-08-05 12:58:38",
                        "last_seen_at_ts_local": "2025-08-05 19:58:38"
                      },
                      "partners_room_meta": {
                        "id": 1,
                        "room_id": 1,
                        "rocketchat_room_id": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                        "user_id": 17,
                        "rocketchat_user_id": "JrLpEa6BqoncKDyy4",
                        "rocketchat_username": "nuaira",
                        "last_seen_at": 1754236292985,
                        "unread_count": 0,
                        "closed_at": null,
                        "deleted_messages_count": 0,
                        "created_at": "2025-08-01T13:14:47.000000Z",
                        "updated_at": "2025-08-03T15:51:32.000000Z",
                        "deleted_at": null,
                        "archived_at": null,
                        "archived": 0,
                        "mute": 1,
                        "last_seen_at_ts": "2025-08-03 15:51:32",
                        "last_seen_at_ts_local": "2025-08-03 22:51:32"
                      },
                      "is_archived": false,
                      "chat_disabled": false,
                      "is_deleted_after_last_message": false,
                      "message_hidden": false,
                      "message_hidden_text": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Chat room not found or user doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Chat room not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - RocketChat authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to authenticate user in RocketChat"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/subscription-info": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get Room Subscription Info",
        "description": "Retrieves detailed subscription information for a specific chat room, including read status, unread counts, timestamps, and partner room metadata. Optionally marks the chat as read when fetching the information.",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": ["Y", "N"]
            },
            "in": "query",
            "name": "mark_as_read",
            "description": "Set to 'Y' to mark as read when fetching info"
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription info retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string"
                        },
                        "rid": {
                          "type": "string"
                        },
                        "u": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "username": {
                              "type": "string"
                            }
                          }
                        },
                        "_updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "alert": {
                          "type": "boolean"
                        },
                        "fname": {
                          "type": "string"
                        },
                        "groupMentions": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "open": {
                          "type": "boolean"
                        },
                        "t": {
                          "type": "string"
                        },
                        "ts": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "unread": {
                          "type": "integer"
                        },
                        "userMentions": {
                          "type": "integer"
                        },
                        "ls": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "ls_in_unix": {
                          "type": "integer"
                        },
                        "ls_in_date": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "ts_in_date": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "partners_room_meta": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "room_id": {
                              "type": "integer"
                            },
                            "rocketchat_room_id": {
                              "type": "string"
                            },
                            "user_id": {
                              "type": "integer"
                            },
                            "rocketchat_user_id": {
                              "type": "string"
                            },
                            "rocketchat_username": {
                              "type": "string"
                            },
                            "last_seen_at": {
                              "type": "integer"
                            },
                            "unread_count": {
                              "type": "integer"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "deleted_at": {
                              "type": "string",
                              "format": "date-time",
                              "nullable": true
                            },
                            "last_seen_at_ts": {
                              "type": "string"
                            },
                            "last_seen_at_ts_local": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "_id": "sbruJaHHChAsuxqoY",
                        "rid": "PLN7BBfiHDZFgQqE9ugEqHdBXruwxZgt7a",
                        "u": {
                          "_id": "PLN7BBfiHDZFgQqE9",
                          "username": "mrriyous"
                        },
                        "_updatedAt": "2025-07-13T16:34:02.904Z",
                        "alert": false,
                        "fname": "nuaira",
                        "groupMentions": 0,
                        "name": "nuaira",
                        "open": true,
                        "t": "d",
                        "ts": "2025-07-02T17:40:29.217Z",
                        "unread": 0,
                        "userMentions": 0,
                        "ls": "2025-07-13T16:34:02.904Z",
                        "ls_in_unix": 1752424442904,
                        "ls_in_date": "2025-07-13T23:34:02.904000Z",
                        "ts_in_date": "2025-07-03T00:40:29.217000Z",
                        "partners_room_meta": {
                          "id": 3,
                          "room_id": 2,
                          "rocketchat_room_id": "PLN7BBfiHDZFgQqE9ugEqHdBXruwxZgt7a",
                          "user_id": 59,
                          "rocketchat_user_id": "ugEqHdBXruwxZgt7a",
                          "rocketchat_username": "nuaira",
                          "last_seen_at": 1752424536540,
                          "unread_count": 0,
                          "created_at": "2025-07-10T15:48:30.000000Z",
                          "updated_at": "2025-07-13T16:35:36.000000Z",
                          "deleted_at": null,
                          "last_seen_at_ts": "2025-07-13 16:35:36",
                          "last_seen_at_ts_local": "2025-07-13 23:35:36"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/messages": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get Messages",
        "description": "Retrieves messages from a specific chat room with pagination support. Returns message history with comprehensive details including timestamps, sender information, read status, and message metadata. Supports pagination to handle large message histories efficiently.",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "in": "query",
            "name": "page",
            "description": "Page number for pagination (default: 1)",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "messages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MessageObject"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "messages": [
                          {
                            "_id": "Wp3uFgMxLYAzCm76h",
                            "rid": "5xmeNGB5HALTftP3vPLN7BBfiHDZFgQqE9",
                            "msg": "Haloo",
                            "attachments": [],
                            "ts": "2025-07-14T05:00:09.481Z",
                            "u": {
                              "_id": "5xmeNGB5HALTftP3v",
                              "username": "sponsor_searcher",
                              "name": "Alamak Jang"
                            },
                            "_updatedAt": "2025-07-14T05:00:09.505Z",
                            "urls": [],
                            "mentions": [],
                            "channels": [],
                            "md": [
                              {
                                "type": "PARAGRAPH",
                                "value": [
                                  {
                                    "type": "PLAIN_TEXT",
                                    "value": "Haloo"
                                  }
                                ]
                              }
                            ],
                            "ts_in_unix": 1752469209481,
                            "has_been_read": true,
                            "ts_formatted": "05:00 am",
                            "ts_formatted_full": "14 July 2025, 05:00am",
                            "ts_formatted_local": "12:00 pm",
                            "ts_formatted_full_local": "14 July 2025, 12:00pm",
                            "ts_date_formatted": "July 14, 2025",
                            "is_sent_by_logged_in_user": false,
                            "editable": true,
                            "is_edited": false
                          },
                          {
                            "_id": "qykSn3xBKzew9uiDm",
                            "rid": "5xmeNGB5HALTftP3vPLN7BBfiHDZFgQqE9",
                            "msg": "bakaayraro",
                            "attachments": [],
                            "ts": "2025-07-13T16:35:24.316Z",
                            "u": {
                              "_id": "5xmeNGB5HALTftP3v",
                              "username": "sponsor_searcher",
                              "name": "Alamak Jang"
                            },
                            "_updatedAt": "2025-07-13T16:35:24.321Z",
                            "urls": [],
                            "mentions": [],
                            "channels": [],
                            "md": [
                              {
                                "type": "PARAGRAPH",
                                "value": [
                                  {
                                    "type": "PLAIN_TEXT",
                                    "value": "bakaayraro"
                                  }
                                ]
                              }
                            ],
                            "ts_in_unix": 1752424524316,
                            "has_been_read": true,
                            "ts_formatted": "04:35 pm",
                            "ts_formatted_full": "13 July 2025, 04:35pm",
                            "ts_formatted_local": "11:35 pm",
                            "ts_formatted_full_local": "13 July 2025, 11:35pm",
                            "ts_date_formatted": "July 13, 2025",
                            "is_sent_by_logged_in_user": false,
                            "editable": false,
                            "is_edited": false
                          },
                          {
                            "_id": "6GhopMT2pM5Ynf4pj",
                            "rid": "5xmeNGB5HALTftP3vPLN7BBfiHDZFgQqE9",
                            "msg": "Paansi",
                            "attachments": [],
                            "ts": "2025-07-13T16:35:19.063Z",
                            "u": {
                              "_id": "PLN7BBfiHDZFgQqE9",
                              "username": "mrriyous",
                              "name": "Alfi Syahri"
                            },
                            "_updatedAt": "2025-07-13T16:35:19.073Z",
                            "urls": [],
                            "mentions": [],
                            "channels": [],
                            "md": [
                              {
                                "type": "PARAGRAPH",
                                "value": [
                                  {
                                    "type": "PLAIN_TEXT",
                                    "value": "Paansi"
                                  }
                                ]
                              }
                            ],
                            "ts_in_unix": 1752424519063,
                            "has_been_read": false,
                            "ts_formatted": "04:35 pm",
                            "ts_formatted_full": "13 July 2025, 04:35pm",
                            "ts_formatted_local": "11:35 pm",
                            "ts_formatted_full_local": "13 July 2025, 11:35pm",
                            "ts_date_formatted": "July 13, 2025",
                            "is_sent_by_logged_in_user": true,
                            "editable": false,
                            "is_edited": false
                          },
                          {
                            "_id": "SnKJTYy6oSsDGidWL",
                            "rid": "5xmeNGB5HALTftP3vPLN7BBfiHDZFgQqE9",
                            "msg": "apasi",
                            "attachments": [],
                            "ts": "2025-07-13T16:34:19.760Z",
                            "u": {
                              "_id": "PLN7BBfiHDZFgQqE9",
                              "username": "mrriyous",
                              "name": "Alfi Syahri"
                            },
                            "_updatedAt": "2025-07-13T16:34:19.765Z",
                            "urls": [],
                            "mentions": [],
                            "channels": [],
                            "md": [
                              {
                                "type": "PARAGRAPH",
                                "value": [
                                  {
                                    "type": "PLAIN_TEXT",
                                    "value": "apasi"
                                  }
                                ]
                              }
                            ],
                            "ts_in_unix": 1752424459760,
                            "has_been_read": false,
                            "ts_formatted": "04:34 pm",
                            "ts_formatted_full": "13 July 2025, 04:34pm",
                            "ts_formatted_local": "11:34 pm",
                            "ts_formatted_full_local": "13 July 2025, 11:34pm",
                            "ts_date_formatted": "July 13, 2025",
                            "is_sent_by_logged_in_user": true,
                            "editable": false,
                            "is_edited": false
                          },
                          {
                            "_id": "Qx5PXHXyDMrniukY9",
                            "rid": "5xmeNGB5HALTftP3vPLN7BBfiHDZFgQqE9",
                            "msg": "basdf",
                            "attachments": [],
                            "ts": "2025-07-13T16:34:01.726Z",
                            "u": {
                              "_id": "5xmeNGB5HALTftP3v",
                              "username": "sponsor_searcher",
                              "name": "Alamak Jang"
                            },
                            "_updatedAt": "2025-07-13T16:34:01.735Z",
                            "urls": [],
                            "mentions": [],
                            "channels": [],
                            "md": [
                              {
                                "type": "PARAGRAPH",
                                "value": [
                                  {
                                    "type": "PLAIN_TEXT",
                                    "value": "basdf"
                                  }
                                ]
                              }
                            ],
                            "ts_in_unix": 1752424441726,
                            "has_been_read": true,
                            "ts_formatted": "04:34 pm",
                            "ts_formatted_full": "13 July 2025, 04:34pm",
                            "ts_formatted_local": "11:34 pm",
                            "ts_formatted_full_local": "13 July 2025, 11:34pm",
                            "ts_date_formatted": "July 13, 2025",
                            "is_sent_by_logged_in_user": false,
                            "editable": false,
                            "is_edited": false
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/send-message": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the recipient"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Send Message",
        "description": "Sends a message to a specific user. Supports both text messages and file attachments. Either message text or file attachment is required. AI-powered content moderation is applied to all messages, with inappropriate content being blocked and users receiving strikes. Supports message replies via replying_message_id parameter.",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Text message content (required if no file)"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File attachment (required if no message)"
                  },
                  "replying_message_id": {
                    "type": "string",
                    "description": "ID of the message being replied to"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Text message content (required if no file)"
                  },
                  "replying_message_id": {
                    "type": "string",
                    "description": "ID of the message being replied to"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "$ref": "#/components/schemas/MessageObject"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": {
                        "_id": "message_id_456",
                        "rid": "room_id_123",
                        "msg": "Hello! How are you doing?",
                        "ts": "2024-01-01T12:00:00.000Z",
                        "u": {
                          "_id": "user_id_123",
                          "username": "user1",
                          "name": "John Doe"
                        },
                        "mentions": [],
                        "channels": [],
                        "editedAt": null,
                        "editedBy": null,
                        "reactions": {},
                        "attachments": [],
                        "ts_in_unix": 1704067200000,
                        "has_been_read": false,
                        "ts_formatted": "12:00 pm",
                        "ts_formatted_full": "01 January 2024, 12:00pm",
                        "ts_formatted_local": "12:00 pm",
                        "ts_formatted_full_local": "01 January 2024, 12:00pm",
                        "ts_date_formatted": "January 01, 2024",
                        "is_sent_by_logged_in_user": true,
                        "editable": true,
                        "is_edited": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Please type a message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User blocked or chat disabled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "You have blocked this user and cannot send messages to them"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - AI moderation blocked message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Your message contains inappropriate content and has been blocked."
                    },
                    "moderation_reason": {
                      "type": "string",
                      "example": "Inappropriate language detected"
                    },
                    "message_strike_count": {
                      "type": "integer",
                      "example": 2
                    },
                    "chat_disabled": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to send message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/edit-message": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Edit Message",
        "description": "Edits an existing message within 6 minutes of sending. Only the original sender can edit their messages. AI-powered content moderation is applied to edited messages, with inappropriate content being blocked and users receiving strikes. Message content is limited to 1000 characters.",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message_id": {
                    "type": "string",
                    "description": "ID of the message to edit"
                  },
                  "message": {
                    "type": "string",
                    "description": "New message content (max 1000 characters)"
                  }
                },
                "required": ["message_id", "message"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MessageObject"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "_id": "message_id_123",
                        "rid": "room_id_123",
                        "msg": "Updated message content",
                        "ts": "2024-01-01T12:00:00.000Z",
                        "editedAt": "2024-01-01T12:05:00.000Z",
                        "editedBy": {
                          "_id": "user_id_123",
                          "username": "user1"
                        },
                        "u": {
                          "_id": "user_id_123",
                          "username": "user1",
                          "name": "John Doe"
                        },
                        "mentions": [],
                        "channels": [],
                        "reactions": {},
                        "attachments": [],
                        "ts_in_unix": 1704067200000,
                        "has_been_read": false,
                        "ts_formatted": "12:00 pm",
                        "ts_formatted_full": "01 January 2024, 12:00pm",
                        "ts_formatted_local": "12:00 pm",
                        "ts_formatted_full_local": "01 January 2024, 12:00pm",
                        "ts_date_formatted": "January 01, 2024",
                        "is_sent_by_logged_in_user": true,
                        "editable": true,
                        "is_edited": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message content is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot edit this message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only edit your own messages within 6 minutes of sending"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message not found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - AI moderation blocked edited message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Your edited message contains inappropriate content and has been blocked."
                    },
                    "moderation_reason": {
                      "type": "string",
                      "example": "Inappropriate language detected"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to edit message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to edit message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/delete-message": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Delete Message",
        "description": "Permanently deletes a message from the chat. Only the original sender can delete their own messages. Deleted messages cannot be recovered and are removed from the chat history for all participants.",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message_id": {
                    "type": "string",
                    "description": "The ID of the message to delete"
                  }
                },
                "required": ["message_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Message deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Cannot delete this message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "You can only delete your own messages"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Message not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Message not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to delete message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to delete message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/mark-as-read": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Mark as Read",
        "description": "Marks a chat room as read and updates the user's last seen timestamp. This action clears the unread count for the chat room and updates the user's last seen time to the current timestamp. Used to indicate that the user has viewed the chat.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Room marked as read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "room_meta": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "room_id": {
                          "type": "integer"
                        },
                        "rocketchat_room_id": {
                          "type": "string"
                        },
                        "user_id": {
                          "type": "integer"
                        },
                        "rocketchat_user_id": {
                          "type": "string"
                        },
                        "rocketchat_username": {
                          "type": "string"
                        },
                        "last_seen_at": {
                          "type": "integer"
                        },
                        "unread_count": {
                          "type": "integer"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "deleted_at": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "last_seen_at_ts": {
                          "type": "string"
                        },
                        "last_seen_at_ts_local": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Successfully marked as read",
                      "room_meta": {
                        "id": 2,
                        "room_id": 2,
                        "rocketchat_room_id": "PLN7BBfiHDZFgQqE9ugEqHdBXruwxZgt7a",
                        "user_id": 14,
                        "rocketchat_user_id": "PLN7BBfiHDZFgQqE9",
                        "rocketchat_username": "mrriyous",
                        "last_seen_at": 1752541841984,
                        "unread_count": 0,
                        "created_at": "2025-07-10T15:38:45.000000Z",
                        "updated_at": "2025-07-15T01:10:41.000000Z",
                        "deleted_at": null,
                        "last_seen_at_ts": "2025-07-15 01:10:41",
                        "last_seen_at_ts_local": "2025-07-15 08:10:41"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/archive-chat": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Archive Chat",
        "description": "Archives a chat room, moving it to the archived list. Archived chats are hidden from the main chat list but can be restored by sending a new message. This action is reversible and does not delete the chat history.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat room archived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Successfully archived chat room"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/delete-chat": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Delete Chat",
        "description": "Permanently deletes a chat room and all associated messages. This action is irreversible and cannot be undone. The chat will be removed from both participants' chat lists and all message history will be lost.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Chat room deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Successfully deleted chat room"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/room-subscriptions": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get All Subscriptions",
        "description": "Retrieves all room subscriptions for the authenticated user. Returns subscription information including room IDs, user details, read status, unread counts, and timestamps for all chat rooms the user is subscribed to.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Room subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rid": {
                            "type": "string"
                          },
                          "u": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "username": {
                                "type": "string"
                              }
                            }
                          },
                          "open": {
                            "type": "boolean"
                          },
                          "alert": {
                            "type": "boolean"
                          },
                          "unread": {
                            "type": "integer"
                          },
                          "ts": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "ls": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": [
                        {
                          "rid": "room_id_123",
                          "u": {
                            "_id": "user_id_123",
                            "username": "user1"
                          },
                          "open": true,
                          "alert": false,
                          "unread": 5,
                          "ts": "2024-01-01T00:00:00.000Z",
                          "ls": "2024-01-01T11:00:00.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/search-messages": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Search Messages",
        "description": "Searches for messages in a specific chat room using text matching. Returns matching messages with relevance scores, supporting pagination with configurable result limits. Search text must be between 1-100 characters.",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "search_text",
            "required": true,
            "description": "Text to search for (1-100 characters)"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            },
            "in": "query",
            "name": "limit",
            "description": "Maximum number of results (1-50, default: 10)"
          }
        ],
        "responses": {
          "200": {
            "description": "Messages found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MessageObject"
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "messages": [
                        {
                          "_id": "ZrvLFnKgyogFhCL6C",
                          "rid": "JrLpEa6BqoncKDyy4NBKRo3zLWeBBzwJSh",
                          "msg": "halo dek",
                          "attachments": [],
                          "ts": "2025-08-03T15:51:25.305Z",
                          "u": {
                            "_id": "JrLpEa6BqoncKDyy4",
                            "username": "nuaira",
                            "name": "Nuaira Nadira"
                          },
                          "_updatedAt": "2025-08-03T15:51:25.346Z",
                          "urls": [],
                          "mentions": [],
                          "channels": [],
                          "md": [
                            {
                              "type": "PARAGRAPH",
                              "value": [
                                {
                                  "type": "PLAIN_TEXT",
                                  "value": "halo dek"
                                }
                              ]
                            }
                          ],
                          "score": 0.75,
                          "ts_in_unix": 1754236285305,
                          "has_been_read": false,
                          "ts_formatted": "03:51 pm",
                          "ts_formatted_full": "03 August 2025, 03:51pm",
                          "ts_formatted_local": "10:51 pm",
                          "ts_formatted_full_local": "03 August 2025, 10:51pm",
                          "ts_date_formatted": "August 03, 2025",
                          "is_sent_by_logged_in_user": false,
                          "editable": false,
                          "is_edited": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Search text must be between 1-100 characters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/mute-notifications": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Mute Notifications",
        "description": "Toggles mute status for chat notifications. When muted, the user will not receive push notifications for new messages in this chat. Muted chats are excluded from unread counts. The mute status can be toggled on/off as needed.",
        "tags": [
          "Chat"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mute": {
                    "type": "boolean",
                    "description": "Whether to mute (true) or unmute (false) notifications"
                  }
                },
                "required": ["mute"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification mute status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "mute": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Notifications muted successfully",
                      "data": {
                        "mute": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{publicUsername}/request-webview": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "publicUsername",
          "in": "path",
          "required": true,
          "description": "Public username of the chat partner"
        }
      ],
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Request Webview",
        "description": "Generates a secure webview URL for accessing the chat in a web browser. The URL includes a temporary token that allows web-based access to the chat interface. Useful for embedding chat functionality in web applications or providing browser-based chat access.",
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "description": "Webview URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "webview_url": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "webview_url": "https://startup2050.com/chats/john_doe?webview_token=abc123def456"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Submit user report",
        "description": "Reports a user for inappropriate behavior or content",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "The user ID to report"
                  },
                  "message_id": {
                    "type": "integer",
                    "description": "The message ID if reporting a message"
                  },
                  "message_text": {
                    "type": "string",
                    "description": "The message text if reporting a message"
                  },
                  "reason": {
                    "type": "string",
                    "description": "The reason for reporting"
                  },
                  "block": {
                    "type": "boolean",
                    "description": "Whether to block the user after reporting"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User reported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Thank you for reporting. Our team will review this."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "Failed to report user, please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/request-zoom-call": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Request zoom call",
        "description": "Requests a zoom call with a partner user",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "partner_user_id"
                ],
                "properties": {
                  "partner_user_id": {
                    "type": "integer",
                    "description": "The user ID to request zoom call with"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Zoom call request sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Zoom call request sent successfully, Please wait for the response"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "You already have a pending zoom call request with this user, Please wait for the response"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/block": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Block a user",
        "description": "Blocks a user to prevent further interactions",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "The user ID to block"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User blocked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "block_id": {
                          "type": "integer",
                          "description": "Unique identifier for the block"
                        },
                        "blocked_user_id": {
                          "type": "integer",
                          "description": "ID of the blocked user"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "User has been blocked successfully.",
                      "data": {
                        "block_id": 456,
                        "blocked_user_id": 123
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "User not found."
                    },
                    "Example 2": {
                      "error": true,
                      "message": "You cannot block yourself."
                    },
                    "Example 3": {
                      "error": true,
                      "message": "User is already blocked."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/unblock": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Unblock a user",
        "description": "Removes a user from the blocked list",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "description": "ID of the user to unblock"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User unblocked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "User has been unblocked successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "User not found."
                    },
                    "Example 2": {
                      "error": true,
                      "message": "User is not blocked."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/blocked-users": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get blocked users list",
        "description": "Retrieves the list of users that the authenticated user has blocked",
        "tags": [
          "Reports & Interactions"
        ],
        "responses": {
          "200": {
            "description": "Blocked users list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_id": {
                            "type": "integer",
                            "description": "Unique identifier for the block"
                          },
                          "user_id": {
                            "type": "integer",
                            "description": "ID of the blocked user"
                          },
                          "user_name": {
                            "type": "string",
                            "description": "Name of the blocked user"
                          },
                          "user_avatar": {
                            "type": "string",
                            "description": "Avatar URL of the blocked user"
                          },
                          "blocked_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the user was blocked"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": [
                        {
                          "block_id": 456,
                          "user_id": 123,
                          "user_name": "John Doe",
                          "user_avatar": "http://localhost:8000/storage/profile-pictures/123_avatar.jpg",
                          "blocked_at": "2025-01-15T10:30:00.000000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/is-blocked/{user_id}": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Check if user is blocked",
        "description": "Checks whether a specific user is blocked by the authenticated user",
        "tags": [
          "Reports & Interactions"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user ID to check",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Block status checked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "is_blocked": {
                          "type": "boolean",
                          "description": "Whether the user is blocked"
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "ID of the user checked"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "is_blocked": true,
                        "user_id": 123
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "User not found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/archived": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get archived profiles",
        "description": "Retrieves the list of profiles that the authenticated user has archived",
        "tags": [
          "Reports & Interactions"
        ],
        "responses": {
          "200": {
            "description": "Archived profiles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "User ID"
                          },
                          "public_username": {
                            "type": "string",
                            "description": "Public username"
                          },
                          "login_name": {
                            "type": "string",
                            "description": "Login name"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "First name"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "Last name"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address"
                          },
                          "gender": {
                            "type": "string",
                            "description": "Gender"
                          },
                          "partner_preference": {
                            "type": "string",
                            "nullable": true,
                            "description": "Partner preference"
                          },
                          "relationship_goals": {
                            "type": "string",
                            "nullable": true,
                            "description": "Relationship goals"
                          },
                          "role": {
                            "type": "string",
                            "description": "User role"
                          },
                          "profile_picture_url": {
                            "type": "string",
                            "description": "Profile picture URL"
                          },
                          "email_verified": {
                            "type": "boolean",
                            "description": "Email verification status"
                          },
                          "hide_images": {
                            "type": "integer",
                            "description": "Image hiding preference"
                          },
                          "initials": {
                            "type": "string",
                            "description": "User initials"
                          },
                          "profile": {
                            "type": "object",
                            "description": "Profile information"
                          },
                          "financialProfile": {
                            "type": "object",
                            "description": "Financial profile information"
                          },
                          "lifestyle_support_budget": {
                            "type": "string",
                            "description": "Lifestyle support budget"
                          },
                          "lifestyle_support_budget_trimmed": {
                            "type": "string",
                            "description": "Formatted lifestyle support budget"
                          },
                          "profileImages": {
                            "type": "array",
                            "description": "Profile images"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Creation timestamp"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Last update timestamp"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "Last page number"
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Items per page"
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "data": [
                        {
                          "id": 34,
                          "public_username": "srs15",
                          "login_name": "srs15",
                          "first_name": "Melyna",
                          "last_name": "Willms",
                          "email": "srs15@example.com",
                          "gender": "female",
                          "partner_preference": null,
                          "relationship_goals": null,
                          "role": "srs",
                          "profile_picture_url": "http://localhost:8000/storage/profile-pictures/34_1746190380.jpg",
                          "email_verified": false,
                          "hide_images": 0,
                          "initials": "MW",
                          "profile": {},
                          "financialProfile": {},
                          "lifestyle_support_budget": "1466.00",
                          "lifestyle_support_budget_trimmed": "1,466",
                          "profileImages": [],
                          "created_at": "2025-05-01T03:51:49.000000Z",
                          "updated_at": "2025-05-02T12:53:00.000000Z"
                        }
                      ],
                      "meta": {
                        "current_page": 1,
                        "last_page": 1,
                        "per_page": 10,
                        "total": 7
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/archive": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Add profile to archived",
        "description": "Archives a user profile for the authenticated user",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "archived_user_id"
                ],
                "properties": {
                  "archived_user_id": {
                    "type": "integer",
                    "description": "The user ID to archive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile archived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "description": "UserBasicInfoResource"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Profile archived successfully",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "This user is already archived"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/unarchive": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Remove profile from archived",
        "description": "Removes a user profile from the archived list",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "archived_user_id"
                ],
                "properties": {
                  "archived_user_id": {
                    "type": "integer",
                    "description": "The user ID to unarchive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile removed from archive successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "message": "Profile removed from archive"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "Profile not found or not archived."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/saved": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get saved profiles",
        "description": "Retrieves the list of profiles that the authenticated user has saved",
        "tags": [
          "Reports & Interactions"
        ],
        "responses": {
          "200": {
            "description": "Saved profiles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "User ID"
                          },
                          "public_username": {
                            "type": "string",
                            "description": "Public username"
                          },
                          "login_name": {
                            "type": "string",
                            "description": "Login name"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "First name"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "Last name"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address"
                          },
                          "gender": {
                            "type": "string",
                            "description": "Gender"
                          },
                          "partner_preference": {
                            "type": "string",
                            "nullable": true,
                            "description": "Partner preference"
                          },
                          "relationship_goals": {
                            "type": "string",
                            "nullable": true,
                            "description": "Relationship goals"
                          },
                          "role": {
                            "type": "string",
                            "description": "User role"
                          },
                          "profile_picture_url": {
                            "type": "string",
                            "description": "Profile picture URL"
                          },
                          "email_verified": {
                            "type": "boolean",
                            "description": "Email verification status"
                          },
                          "hide_images": {
                            "type": "integer",
                            "description": "Image hiding preference"
                          },
                          "initials": {
                            "type": "string",
                            "description": "User initials"
                          },
                          "profile": {
                            "type": "object",
                            "description": "Profile information"
                          },
                          "financialProfile": {
                            "type": "object",
                            "description": "Financial profile information"
                          },
                          "lifestyle_support_budget": {
                            "type": "string",
                            "description": "Lifestyle support budget"
                          },
                          "lifestyle_support_budget_trimmed": {
                            "type": "string",
                            "description": "Formatted lifestyle support budget"
                          },
                          "profileImages": {
                            "type": "array",
                            "description": "Profile images"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Creation timestamp"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Last update timestamp"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "Last page number"
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Items per page"
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "data": [
                        {
                          "id": 56,
                          "public_username": "rs12",
                          "login_name": "rs12",
                          "first_name": "John",
                          "last_name": "Smith",
                          "email": "rs12@example.com",
                          "gender": "male",
                          "partner_preference": null,
                          "relationship_goals": null,
                          "role": "rs",
                          "profile_picture_url": "http://localhost:8000/storage/profile-pictures/56_1746190380.jpg",
                          "email_verified": true,
                          "hide_images": 0,
                          "initials": "JS",
                          "profile": {},
                          "financialProfile": {},
                          "lifestyle_support_budget": "2000.00",
                          "lifestyle_support_budget_trimmed": "2,000",
                          "profileImages": [],
                          "created_at": "2025-05-01T03:51:49.000000Z",
                          "updated_at": "2025-05-02T12:53:00.000000Z"
                        }
                      ],
                      "meta": {
                        "current_page": 1,
                        "last_page": 1,
                        "per_page": 10,
                        "total": 3
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/save": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Add profile to saved",
        "description": "Saves a user profile for the authenticated user",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "saved_user_id"
                ],
                "properties": {
                  "saved_user_id": {
                    "type": "integer",
                    "description": "The user ID to save"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "description": "UserBasicInfoResource"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Profile saved successfully",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "You already saved this user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/unsave": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Remove profile from saved",
        "description": "Removes a user profile from the saved list",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "saved_user_id"
                ],
                "properties": {
                  "saved_user_id": {
                    "type": "integer",
                    "description": "The user ID to unsave"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile removed from saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "message": "Profile removed from saved"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/interested": {
      "get": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Get interested profiles",
        "description": "Retrieves the list of profiles that the authenticated user has marked as interested",
        "tags": [
          "Reports & Interactions"
        ],
        "responses": {
          "200": {
            "description": "Interested profiles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "User ID"
                          },
                          "public_username": {
                            "type": "string",
                            "description": "Public username"
                          },
                          "login_name": {
                            "type": "string",
                            "description": "Login name"
                          },
                          "first_name": {
                            "type": "string",
                            "description": "First name"
                          },
                          "last_name": {
                            "type": "string",
                            "description": "Last name"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email address"
                          },
                          "gender": {
                            "type": "string",
                            "description": "Gender"
                          },
                          "partner_preference": {
                            "type": "string",
                            "nullable": true,
                            "description": "Partner preference"
                          },
                          "relationship_goals": {
                            "type": "string",
                            "nullable": true,
                            "description": "Relationship goals"
                          },
                          "role": {
                            "type": "string",
                            "description": "User role"
                          },
                          "profile_picture_url": {
                            "type": "string",
                            "description": "Profile picture URL"
                          },
                          "email_verified": {
                            "type": "boolean",
                            "description": "Email verification status"
                          },
                          "hide_images": {
                            "type": "integer",
                            "description": "Image hiding preference"
                          },
                          "initials": {
                            "type": "string",
                            "description": "User initials"
                          },
                          "profile": {
                            "type": "object",
                            "description": "Profile information"
                          },
                          "financialProfile": {
                            "type": "object",
                            "description": "Financial profile information"
                          },
                          "lifestyle_support_budget": {
                            "type": "string",
                            "description": "Lifestyle support budget"
                          },
                          "lifestyle_support_budget_trimmed": {
                            "type": "string",
                            "description": "Formatted lifestyle support budget"
                          },
                          "profileImages": {
                            "type": "array",
                            "description": "Profile images"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Creation timestamp"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Last update timestamp"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "last_page": {
                          "type": "integer",
                          "description": "Last page number"
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Items per page"
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items"
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "data": [
                        {
                          "id": 78,
                          "public_username": "srs22",
                          "login_name": "srs22",
                          "first_name": "Alice",
                          "last_name": "Johnson",
                          "email": "srs22@example.com",
                          "gender": "male",
                          "partner_preference": null,
                          "relationship_goals": null,
                          "role": "srs",
                          "profile_picture_url": "http://localhost:8000/storage/profile-pictures/78_1746190380.jpg",
                          "email_verified": true,
                          "hide_images": 0,
                          "initials": "AJ",
                          "profile": {},
                          "financialProfile": {},
                          "lifestyle_support_budget": "1800.00",
                          "lifestyle_support_budget_trimmed": "1,800",
                          "profileImages": [],
                          "created_at": "2025-05-01T03:51:49.000000Z",
                          "updated_at": "2025-05-02T12:53:00.000Z"
                        }
                      ],
                      "meta": {
                        "current_page": 1,
                        "last_page": 1,
                        "per_page": 10,
                        "total": 2
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/interest": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Add profile to interested",
        "description": "Marks a user profile as interested for the authenticated user",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "interested_user_id"
                ],
                "properties": {
                  "interested_user_id": {
                    "type": "integer",
                    "description": "The user ID to mark as interested"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile marked as interested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "description": "UserBasicInfoResource"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "message": "Profile marked as Interesting. The user has been notified.",
                      "data": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": true,
                      "message": "You already marked this user as interesting"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interactions/uninterest": {
      "post": {
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Remove profile from interested",
        "description": "Removes a user profile from the interested list",
        "tags": [
          "Reports & Interactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "interested_user_id"
                ],
                "properties": {
                  "interested_user_id": {
                    "type": "integer",
                    "description": "The user ID to unmark as interested"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile removed from interested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "message": "Interest in profile removed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/has-active-contracts": {
      "get": {
        "summary": "Check Active Contracts",
        "description": "Checks if the authenticated user has any active contracts.",
        "tags": ["Contracts"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HasActiveContractsResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "User has active contracts",
                    "value": {
                      "error": false,
                      "active_contracts": 1,
                      "has_active_contracts": true
                    }
                  },
                  "Example 2": {
                    "summary": "User has no active contracts",
                    "value": {
                      "error": false,
                      "active_contracts": 0,
                      "has_active_contracts": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts": {
      "get": {
        "summary": "Get All Contracts",
        "description": "Retrieves all contracts for the authenticated user (both as sponsor and seeker). Supports pagination and search functionality.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search by partner name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ContractListResponse"
                    }
                  }
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contracts list with pagination",
                    "value": {
                      "error": false,
                      "data": {
                        "data": [
                          {
                            "id": 1,
                            "contract_id": "ABC12345",
                            "contract_type": "test_moon",
                            "contract_type_str": "Test Moon",
                            "sponsor_id": 1,
                            "seeker_id": 2,
                            "duration_days": 30,
                            "monthly_amount": 1000.00,
                            "monthly_amount_formatted": "1,000.00",
                            "currency": "USD",
                            "financial_settings": {
                              "payment_schedule": "monthly",
                              "payment_method": "bank_transfer"
                            },
                            "start_date": "2024-01-15T10:00:00Z",
                            "start_date_str": "Jan 15, 2024",
                            "end_date": null,
                            "end_date_str": "Ongoing",
                            "expiration_date": "2024-02-14T10:00:00Z",
                            "expiration_date_str": "Feb 14, 2024",
                            "paused_at": null,
                            "stopped_at": null,
                            "status": "active",
                            "status_str": "Active",
                            "status_bg_color": "#DCFCE7",
                            "status_text_color": "#15803D",
                            "status_classes_str": "bg-green-100 text-green-800",
                            "is_test_moon": true,
                            "is_preliminary": false,
                            "is_main": false,
                            "official_agreement_signed": false,
                            "created_at": "2024-01-15T10:00:00Z",
                            "updated_at": "2024-01-15T10:00:00Z",
                            "sponsor": {
                              "id": 1,
                              "first_name": "John",
                              "last_name": "Doe",
                              "public_username": "johndoe"
                            },
                            "seeker": {
                              "id": 2,
                              "first_name": "Jane",
                              "last_name": "Smith",
                              "public_username": "janesmith"
                            },
                            "template": {
                              "id": 1,
                              "name": "Standard Test Moon",
                              "description": "Standard test moon contract template",
                              "contract_type": "test_moon",
                              "monthly_amount": 1000.00,
                              "currency": "USD",
                              "financial_settings": {
                                "payment_schedule": "monthly",
                                "payment_method": "bank_transfer"
                              },
                              "default_duration_days": 30
                            },
                            "partner": {
                              "id": 2,
                              "first_name": "Jane",
                              "last_name": "Smith",
                              "public_username": "janesmith"
                            },
                            "is_sponsor": true,
                            "is_seeker": false,
                            "can_be_changed": true,
                            "can_be_extended": true,
                            "can_be_upgraded": true,
                            "can_be_stopped": true,
                            "can_be_restarted": false,
                            "total_duration_days": 30
                          }
                        ],
                        "total": 1,
                        "per_page": 15,
                        "current_page": 1,
                        "last_page": 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create New Contract",
        "description": "Creates a new contract offer to a partner. The user cannot offer contract to themselves, cannot have active contracts while offering new ones, and the partner cannot have active contracts. Cannot have pending contracts with the same partner. Partner must exist and have the opposite role (sponsor/seeker).",
        "tags": ["Contracts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractRequest"
              },
              "examples": {
                "Example 1": {
                  "summary": "Create test moon contract",
                  "value": {
                    "partner_username": "janesmith",
                    "duration_days": 30,
                    "monthly_amount": 1000.00,
                    "currency": "USD",
                    "financial_settings": {
                      "payment_schedule": "monthly",
                      "payment_method": "bank_transfer"
                    },
                    "template_id": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContractResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract created successfully",
                    "value": {
                      "error": false,
                      "message": "Contract offer sent successfully",
                      "contract": {
                        "id": 1,
                        "contract_id": "ABC12345",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "sponsor_id": 1,
                        "seeker_id": 2,
                        "duration_days": 30,
                        "monthly_amount": 1000.00,
                        "monthly_amount_formatted": "1,000.00",
                        "currency": "USD",
                        "financial_settings": {
                          "payment_schedule": "monthly",
                          "payment_method": "bank_transfer"
                        },
                        "status": "awaiting_seeker_approval",
                        "status_str": "Awaiting Seeker Approval",
                        "status_bg_color": "#FEF3C7",
                        "status_text_color": "#A16207",
                        "is_test_moon": true,
                        "created_at": "2024-01-15T10:00:00Z",
                        "sponsor": {
                          "id": 1,
                          "first_name": "John",
                          "last_name": "Doe",
                          "public_username": "johndoe"
                        },
                        "seeker": {
                          "id": 2,
                          "first_name": "Jane",
                          "last_name": "Smith",
                          "public_username": "janesmith"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Cannot offer contract to yourself",
                    "value": {
                      "error": true,
                      "message": "You cannot offer a contract to yourself"
                    }
                  },
                  "Example 2": {
                    "summary": "Active contracts exist",
                    "value": {
                      "error": true,
                      "message": "Please stop the latest contract before you can make new offers"
                    }
                  },
                  "Example 3": {
                    "summary": "Partner not found",
                    "value": {
                      "error": true,
                      "message": "Partner not found"
                    }
                  },
                  "Example 4": {
                    "summary": "Pending contract exists",
                    "value": {
                      "error": true,
                      "message": "A contract with this partner is already pending. Please approve or wait for it to be resolved before creating a new offer."
                    }
                  },
                  "Example 5": {
                    "summary": "Partner has active contract",
                    "value": {
                      "error": true,
                      "message": "Partner already has an active contract"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Validation failed",
                    "value": {
                      "error": true,
                      "message": "Validation failed",
                      "errors": {
                        "partner_username": ["The selected partner username is invalid."],
                        "duration_days": ["The duration days must be at least 30."]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}": {
      "get": {
        "summary": "Get Specific Contract",
        "description": "Retrieves detailed information about a specific contract.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContractResponse"
                }
              }
            }
          },
          "404": {
            "description": "Contract not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/templates": {
      "get": {
        "summary": "Get Contract Templates",
        "description": "Retrieves available contract templates for the authenticated user.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contract_type",
            "in": "query",
            "description": "Filter by contract type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["test_moon", "preliminary", "main"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTemplatesResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Templates list",
                    "value": {
                      "error": false,
                      "templates": [
                        {
                          "id": 1,
                          "name": "Standard Test Moon",
                          "description": "Standard test moon contract template",
                          "contract_type": "test_moon",
                          "monthly_amount": 1000.00,
                          "currency": "USD",
                          "financial_settings": {
                            "payment_schedule": "monthly",
                            "payment_method": "bank_transfer"
                          },
                          "default_duration_days": 30,
                          "is_public": true,
                          "created_by": 1,
                          "created_at": "2024-01-15T10:00:00Z",
                          "created_by_user": {
                            "id": 1,
                            "first_name": "John",
                            "last_name": "Doe"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Save Contract Template",
        "description": "Creates a new contract template. Templates can be public or private and include default financial settings and duration.",
        "tags": ["Contracts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateRequest"
              },
              "examples": {
                "Example 1": {
                  "summary": "Create custom template",
                  "value": {
                    "name": "Custom Test Moon",
                    "description": "My custom test moon template",
                    "contract_type": "test_moon",
                    "monthly_amount": 1500.00,
                    "currency": "USD",
                    "financial_settings": {
                      "payment_schedule": "monthly",
                      "payment_method": "bank_transfer"
                    },
                    "default_duration_days": 60,
                    "is_public": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTemplateResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Template created successfully",
                    "value": {
                      "error": false,
                      "message": "Template saved successfully",
                      "template": {
                        "id": 2,
                        "name": "Custom Test Moon",
                        "description": "My custom test moon template",
                        "contract_type": "test_moon",
                        "monthly_amount": 1500.00,
                        "currency": "USD",
                        "financial_settings": {
                          "payment_schedule": "monthly",
                          "payment_method": "bank_transfer"
                        },
                        "default_duration_days": 60,
                        "is_public": false,
                        "created_by": 1,
                        "created_at": "2024-01-15T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/approve": {
      "post": {
        "summary": "Approve Contract",
        "description": "Approves a pending contract. Can optionally override the contract duration in days (30-365).",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration_days": {
                    "type": "integer",
                    "description": "Override the contract duration in days",
                    "minimum": 30,
                    "maximum": 365
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "summary": "Approve with custom duration",
                  "value": {
                    "duration_days": 45
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveContractResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract approved successfully",
                    "value": {
                      "error": false,
                      "message": "Congratulations, It's a Match!",
                      "sub_messages": "You've accepted the relationship contract. You're now officially connected — let the journey begin",
                      "contract": {
                        "id": 1,
                        "contract_id": "ABC12345",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "status": "active",
                        "status_str": "Active",
                        "start_date": "2024-01-15T10:00:00Z",
                        "start_date_str": "Jan 15, 2024",
                        "expiration_date": "2024-02-14T10:00:00Z",
                        "expiration_date_str": "Feb 14, 2024",
                        "sponsor": {
                          "id": 1,
                          "first_name": "John",
                          "last_name": "Doe"
                        },
                        "seeker": {
                          "id": 2,
                          "first_name": "Jane",
                          "last_name": "Smith"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract cannot be extended",
                    "value": {
                      "error": true,
                      "message": "Contract cannot be extended"
                    }
                  },
                  "Example 2": {
                    "summary": "Duration exceeds limit",
                    "value": {
                      "error": true,
                      "message": "The total contract duration cannot exceed 365 days. Please reduce the number of extension days."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/reject": {
      "post": {
        "summary": "Reject Contract",
        "description": "Rejects a pending contract.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejection"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectContractResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/extend": {
      "post": {
        "summary": "Extend Contract",
        "description": "Requests to extend an active contract.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["extension_days"],
                "properties": {
                  "extension_days": {
                    "type": "integer",
                    "description": "Number of days to extend",
                    "minimum": 1,
                    "maximum": 365
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendContractResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Extension request sent successfully",
                    "value": {
                      "error": false,
                      "message": "The extension request has been sent to the partner for approval. You will be notified of the result.",
                      "action": {
                        "id": 2,
                        "contract_id": 1,
                        "action_type": "extend",
                        "status": "pending",
                        "action_data": {
                          "extension_days": 30
                        },
                        "description": "Request to extend contract by 30 days",
                        "performed_by": 1,
                        "created_at": "2024-01-15T10:00:00Z",
                        "updated_at": "2024-01-15T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/start-next-stage": {
      "post": {
        "summary": "Start Next Stage",
        "description": "Requests to upgrade contract to the next stage (test_moon → preliminary → main). Contract type progression rules: test_moon can upgrade to preliminary or main, preliminary can upgrade to main, main cannot be upgraded further.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartNextStageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartNextStageResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Upgrade request sent successfully",
                    "value": {
                      "error": false,
                      "message": "Well done! Now let's wait for the partner's response.",
                      "action": {
                        "id": 3,
                        "contract_id": 1,
                        "action_type": "start_next_stage",
                        "status": "pending",
                        "action_data": {
                          "action": "start_next_stage",
                          "updates": {
                            "contract_type": {
                              "label": "Contract Type",
                              "old": "test_moon",
                              "new": "preliminary"
                            },
                            "monthly_amount": {
                              "label": "Monthly Budget",
                              "old": 1000.00,
                              "new": 2000.00
                            },
                            "monthly_budget_per_child": {
                              "label": "Monthly Budget Per Child",
                              "old": 0,
                              "new": 500.00
                            },
                            "financial_gift_per_milestone": {
                              "label": "Financial Gift Per Milestone",
                              "old": 0,
                              "new": 1000.00
                            },
                            "financial_gift_upon_marriage": {
                              "label": "Financial Gift Upon Marriage",
                              "old": 0,
                              "new": 5000.00
                            },
                            "relationship_termination_compensation": {
                              "label": "Relationship Termination Compensation",
                              "old": 0,
                              "new": 2000.00
                            },
                            "capital_growth_bonus": {
                              "label": "Capital Growth Bonus",
                              "old": 0,
                              "new": 10.5
                            }
                          }
                        },
                        "description": "Request to upgrade contract to preliminary",
                        "performed_by": 1,
                        "created_at": "2024-01-15T10:00:00Z",
                        "updated_at": "2024-01-15T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Invalid upgrade path",
                    "value": {
                      "error": true,
                      "message": "You can only upgrade from 'Test Moon' to: Preliminary or Main"
                    }
                  },
                  "Example 2": {
                    "summary": "Pending actions exist",
                    "value": {
                      "error": true,
                      "message": "You have pending contract actions that need to be resolved first: Extension, Next Stage"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/change": {
      "post": {
        "summary": "Change Contract",
        "description": "Requests to change contract terms.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeContractRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeContractResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Change request sent successfully",
                    "value": {
                      "error": false,
                      "message": "All done! Let's wait for your partner's approval of the changes.",
                      "action": {
                        "id": 4,
                        "contract_id": 1,
                        "action_type": "change",
                        "status": "pending",
                        "action_data": {
                          "action": "change",
                          "updates": {
                            "duration_days": {
                              "label": "Duration (Days)",
                              "old": 30,
                              "new": 120
                            },
                            "monthly_amount": {
                              "label": "Monthly Budget",
                              "old": 1000.00,
                              "new": 2500.00
                            },
                            "monthly_budget_per_child": {
                              "label": "Monthly Budget Per Child",
                              "old": 500.00,
                              "new": 600.00
                            },
                            "financial_gift_per_milestone": {
                              "label": "Financial Gift Per Milestone",
                              "old": 1000.00,
                              "new": 1200.00
                            },
                            "financial_gift_upon_marriage": {
                              "label": "Financial Gift Upon Marriage",
                              "old": 5000.00,
                              "new": 6000.00
                            },
                            "relationship_termination_compensation": {
                              "label": "Relationship Termination Compensation",
                              "old": 2000.00,
                              "new": 2500.00
                            },
                            "capital_growth_bonus": {
                              "label": "Capital Growth Bonus",
                              "old": 10.5,
                              "new": 12.5
                            }
                          }
                        },
                        "description": "Request to change contract terms",
                        "performed_by": 1,
                        "created_at": "2024-01-15T10:00:00Z",
                        "updated_at": "2024-01-15T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "No changes made",
                    "value": {
                      "error": true,
                      "message": "Please make sure there are changes in the contract terms"
                    }
                  },
                  "Example 2": {
                    "summary": "Conflicting changes",
                    "value": {
                      "error": true,
                      "message": "You have a pending change request that conflicts with the current request. Please wait for approval of the pending changes for: Monthly Budget, Duration (Days)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/stop": {
      "post": {
        "summary": "Stop Contract",
        "description": "Stops an active contract and starts a 72-hour cool-off period.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopContractResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract stopped successfully",
                    "value": {
                      "error": false,
                      "message": "The cool off period has been started.",
                      "sub_messages": "It will end by <b>10:00 am</b> of <b>18 Jan 2024</b>. If restarted, the skipped time will be added to the billing. If not, you will receive the last transfer until the current moment at the next billing date following the 3-day cool-off period.",
                      "cool_off_ends_at": "2024-01-18 10:00:00",
                      "contract": {
                        "id": 1,
                        "contract_id": "ABC12345",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "status": "paused",
                        "status_str": "Paused",
                        "paused_at": "2024-01-15T10:00:00Z",
                        "end_date": "2024-01-15",
                        "sponsor": {
                          "id": 1,
                          "first_name": "John",
                          "last_name": "Doe"
                        },
                        "seeker": {
                          "id": 2,
                          "first_name": "Jane",
                          "last_name": "Smith"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract cannot be stopped",
                    "value": {
                      "error": true,
                      "message": "Contract cannot be stopped"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/restart": {
      "post": {
        "summary": "Restart Contract",
        "description": "Restarts a stopped contract.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartContractResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract restarted successfully",
                    "value": {
                      "error": false,
                      "message": "Congratulations! Contract ABC12345 is now active again!",
                      "contract": {
                        "id": 1,
                        "contract_id": "ABC12345",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "status": "active",
                        "status_str": "Active",
                        "paused_at": null,
                        "end_date": null,
                        "expiration_date": "2024-03-15T10:00:00Z",
                        "expiration_date_str": "Mar 15, 2024",
                        "sponsor": {
                          "id": 1,
                          "first_name": "John",
                          "last_name": "Doe"
                        },
                        "seeker": {
                          "id": 2,
                          "first_name": "Jane",
                          "last_name": "Smith"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Contract cannot be restarted",
                    "value": {
                      "error": true,
                      "message": "Contract cannot be restarted"
                    }
                  },
                  "Example 2": {
                    "summary": "Cannot restart partner's contract",
                    "value": {
                      "error": true,
                      "message": "You cannot restart this contract. Please contact your partner to restart the contract."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/actions/{actionId}/approve": {
      "post": {
        "summary": "Approve Contract Action",
        "description": "Approves a pending contract action (extension, upgrade, or change request).",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The action ID to approve",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveActionResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Action approved successfully",
                    "value": {
                      "error": false,
                      "message": "Action approved successfully",
                      "contract": {
                        "id": 1,
                        "contract_id": "ABC12345",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "status": "active",
                        "status_str": "Active",
                        "expiration_date": "2024-03-15T10:00:00Z",
                        "expiration_date_str": "Mar 15, 2024",
                        "sponsor": {
                          "id": 1,
                          "first_name": "John",
                          "last_name": "Doe"
                        },
                        "seeker": {
                          "id": 2,
                          "first_name": "Jane",
                          "last_name": "Smith"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Action not found or not pending",
                    "value": {
                      "error": true,
                      "message": "Action not found or not pending"
                    }
                  },
                  "Example 2": {
                    "summary": "Cannot approve own action",
                    "value": {
                      "error": true,
                      "message": "You cannot approve your own action"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/actions/{actionId}/confirm-changes": {
      "post": {
        "summary": "Confirm Changes",
        "description": "Confirms or rejects specific changes in a contract change request.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The action ID to confirm",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["changes"],
                "properties": {
                  "changes": {
                    "type": "object",
                    "description": "Object containing field names as keys",
                    "additionalProperties": {
                      "type": "object",
                      "required": ["accepted", "rejected"],
                      "properties": {
                        "accepted": {
                          "type": "string",
                          "description": "\"Y\" if accepted, \"N\" if rejected",
                          "enum": ["Y", "N"]
                        },
                        "rejected": {
                          "type": "string",
                          "description": "\"Y\" if rejected, \"N\" if accepted",
                          "enum": ["Y", "N"]
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "summary": "Confirm some changes, reject others",
                  "value": {
                    "changes": {
                      "duration_days": {
                        "accepted": "Y",
                        "rejected": "N"
                      },
                      "monthly_amount": {
                        "accepted": "N",
                        "rejected": "Y"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmChangesResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Changes confirmed successfully",
                    "value": {
                      "error": false,
                      "message": "Contract changes confirmed successfully",
                      "contract": {
                        "id": 1,
                        "contract_id": "ABC12345",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "status": "active",
                        "status_str": "Active",
                        "duration_days": 120,
                        "monthly_amount": 1000.00,
                        "expiration_date": "2024-05-15T10:00:00Z",
                        "sponsor": {
                          "id": 1,
                          "first_name": "John",
                          "last_name": "Doe"
                        },
                        "seeker": {
                          "id": 2,
                          "first_name": "Jane",
                          "last_name": "Smith"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts/{contractId}/actions/{actionId}/reject": {
      "post": {
        "summary": "Reject Contract Action",
        "description": "Rejects a pending contract action.",
        "tags": ["Contracts"],
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "The unique contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The action ID to reject",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejecting the action"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RejectActionResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Action rejected successfully",
                    "value": {
                      "error": false,
                      "message": "Action rejected successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Example 1": {
                    "summary": "Action not found or not pending",
                    "value": {
                      "error": true,
                      "message": "Action not found or not pending"
                    }
                  },
                  "Example 2": {
                    "summary": "Cannot reject own action",
                    "value": {
                      "error": true,
                      "message": "You cannot reject your own action"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/people/{public_username}": {
      "get": {
        "summary": "Get User Profile",
        "description": "Retrieve a user's basic profile information including personal details, relationship preferences, financial information, living arrangements, and profile images. This endpoint returns comprehensive profile data that allows authenticated users to view other users' profiles using their public username. The response includes age display preferences - when a user has set their age display to 'Show Age Range', the exact birth date is hidden and an age range is shown instead.",
        "tags": ["People"],
        "parameters": [
          {
            "name": "public_username",
            "in": "path",
            "description": "The public username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserProfile"
                    }
                  }
                },
                "examples": {
                  "exact_age_example": {
                    "summary": "Profile with exact age display",
                    "value": {
                      "error": false,
                      "data": {
                        "id": 123,
                        "public_username": "john_doe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@example.com",
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "marriage",
                        "role": "user",
                        "profile_picture_url": "https://example.com/profile.jpg",
                        "hide_images": 0,
                        "initials": "JD",
                        "profile": {
                          "id": 123,
                          "birth_date": "1990-05-15",
                          "birth_date_formatted": "May 15, 1990",
                          "age": 34,
                          "age_display": "Show Exact Age",
                          "orientation": "Straight",
                          "short_intro": "Looking for meaningful connections",
                          "weight_mesurement": "kg",
                          "weight": 70,
                          "height_mesurement": "cm",
                          "height": 175,
                          "extended_descriptions": [
                            {
                              "id": 1,
                              "description": "I love traveling and exploring new cultures",
                              "order": 1
                            }
                          ],
                          "family_views": "Open to having children",
                          "financial_views": "Financial stability is important",
                          "long_term_views": "Looking for a life partner",
                          "secret_text": "I'm secretly a great cook",
                          "education_level": "Bachelor's Degree",
                          "profession": "Software Engineer",
                          "religion": "Christian",
                          "ethnicity": "Caucasian",
                          "astrology_belief": "Moderately interested",
                          "personality_type": "INTJ",
                          "location_residence": "New York, NY, USA",
                          "location_residence_place_id": "ChIJOwg_06VPwokRYv534QaPC8g",
                          "location_residence_latitude": 40.7128,
                          "location_residence_longitude": -74.0060,
                          "location_residence_secondary_text": "Manhattan",
                          "relocation_readiness": "Open to relocation",
                          "location_search": "San Francisco, CA, USA",
                          "location_search_place_id": "ChIJIQBpAG2ahYAR_6128GcTUEo",
                          "location_search_latitude": 37.7749,
                          "location_search_longitude": -122.4194,
                          "location_search_secondary_text": "Bay Area",
                          "location_difference_reason": "Career opportunities",
                          "languages": [
                            {
                              "id": 1,
                              "code": "en",
                              "name": "English",
                              "fluency": 5
                            },
                            {
                              "id": 2,
                              "code": "es",
                              "name": "Spanish",
                              "fluency": 3
                            }
                          ],
                          "hobbies": [
                            {
                              "id": 1,
                              "name": "Photography",
                              "emoji": "📸",
                              "icon_url": "https://example.com/icons/photography.png",
                              "icon_url_active": "https://example.com/icons/photography-active.png"
                            }
                          ],
                          "created_at": "2024-01-15T10:30:00.000000Z",
                          "updated_at": "2024-01-20T14:45:00.000000Z"
                        },
                        "financialProfile": null,
                        "lifestyle_support_budget": "5000.00",
                        "lifestyle_support_budget_trimmed": "5,000",
                        "profileImages": [
                          {
                            "id": 123,
                            "url": "https://example.com/profile.jpg",
                            "thumbnail_url": "https://example.com/profile_thumb.jpg"
                          }
                        ]
                      }
                    }
                  },
                  "age_range_example": {
                    "summary": "Profile with age range display",
                    "value": {
                      "error": false,
                      "data": {
                        "id": 123,
                        "public_username": "john_doe",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john@example.com",
                        "gender": "male",
                        "partner_preference": "female",
                        "relationship_goals": "marriage",
                        "role": "user",
                        "profile_picture_url": "https://example.com/profile.jpg",
                        "hide_images": 0,
                        "initials": "JD",
                        "profile": {
                          "id": 123,
                          "birth_date": null,
                          "birth_date_formatted": null,
                          "age": "31-35",
                          "age_display": "Show Age Range",
                          "orientation": "Straight",
                          "short_intro": "Looking for meaningful connections",
                          "weight_mesurement": "kg",
                          "weight": 70,
                          "height_mesurement": "cm",
                          "height": 175,
                          "extended_descriptions": [
                            {
                              "id": 1,
                              "description": "I love traveling and exploring new cultures",
                              "order": 1
                            }
                          ],
                          "family_views": "Open to having children",
                          "financial_views": "Financial stability is important",
                          "long_term_views": "Looking for a life partner",
                          "secret_text": "I'm secretly a great cook",
                          "education_level": "Bachelor's Degree",
                          "profession": "Software Engineer",
                          "religion": "Christian",
                          "ethnicity": "Caucasian",
                          "astrology_belief": "Moderately interested",
                          "personality_type": "INTJ",
                          "location_residence": "New York, NY, USA",
                          "location_residence_place_id": "ChIJOwg_06VPwokRYv534QaPC8g",
                          "location_residence_latitude": 40.7128,
                          "location_residence_longitude": -74.0060,
                          "location_residence_secondary_text": "Manhattan",
                          "relocation_readiness": "Open to relocation",
                          "location_search": "San Francisco, CA, USA",
                          "location_search_place_id": "ChIJIQBpAG2ahYAR_6128GcTUEo",
                          "location_search_latitude": 37.7749,
                          "location_search_longitude": -122.4194,
                          "location_search_secondary_text": "Bay Area",
                          "location_difference_reason": "Career opportunities",
                          "languages": [
                            {
                              "id": 1,
                              "code": "en",
                              "name": "English",
                              "fluency": 5
                            },
                            {
                              "id": 2,
                              "code": "es",
                              "name": "Spanish",
                              "fluency": 3
                            }
                          ],
                          "hobbies": [
                            {
                              "id": 1,
                              "name": "Photography",
                              "emoji": "📸",
                              "icon_url": "https://example.com/icons/photography.png",
                              "icon_url_active": "https://example.com/icons/photography-active.png"
                            }
                          ],
                          "created_at": "2024-01-15T10:30:00.000000Z",
                          "updated_at": "2024-01-20T14:45:00.000000Z"
                        },
                        "financialProfile": null,
                        "lifestyle_support_budget": "5000.00",
                        "lifestyle_support_budget_trimmed": "5,000",
                        "profileImages": [
                          {
                            "id": 123,
                            "url": "https://example.com/profile.jpg",
                            "thumbnail_url": "https://example.com/profile_thumb.jpg"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/people/{public_username}/relationship": {
      "get": {
        "summary": "Get User Relationship Information",
        "description": "Retrieve a user's relationship preferences and goals including relationship goals, partner preferences, duration preferences, and availability times. This endpoint provides detailed information about what the user is looking for in a relationship and their availability for different types of interactions.",
        "tags": ["People"],
        "parameters": [
          {
            "name": "public_username",
            "in": "path",
            "description": "The public username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserRelationshipInfo"
                    }
                  }
                },
                "examples": {
                  "relationship_info_example": {
                    "summary": "User relationship information",
                    "value": {
                      "error": false,
                      "data": {
                        "relationship_goals": "marriage",
                        "relationship_goals_text": "Looking for marriage",
                        "partner_preference": "female",
                        "duration_preference": "long_term",
                        "duration_preference_text": "Long-term relationship",
                        "available_time_morning": true,
                        "available_time_afternoon": true,
                        "available_time_evening": false
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/options/about-me": {
      "get": {
        "summary": "Get About Me Options",
        "description": "Returns all options related to the 'About Me' section of user profiles including education levels, professions, religions, age displays, ethnicities, orientations, personality types, languages, hobbies, and relocation readiness.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "About me options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AboutMeOptionsResponse"
                },
                "examples": {
                  "Sample Response": {
                    "value": {
                      "error": false,
                      "data": {
                        "education_levels": [
                          {
                            "label": "High School / Secondary School",
                            "value": "high_school"
                          },
                          {
                            "label": "Bachelor's in Arts / Humanities",
                            "value": "bachelor_arts"
                          }
                        ],
                        "professions": [
                          {
                            "label": "Accountant",
                            "value": "Accountant"
                          },
                          {
                            "label": "Engineer (Civil, Mechanical, Electrical, etc.)",
                            "value": "Engineer (Civil, Mechanical, Electrical, etc.)"
                          }
                        ],
                        "religions": [
                          {
                            "label": "Christianity",
                            "value": "christianity"
                          },
                          {
                            "label": "Islam",
                            "value": "islam"
                          }
                        ],
                        "age_displays": [
                          {
                            "label": "Show Exact Age",
                            "value": "Show Exact Age"
                          },
                          {
                            "label": "Show Age Range",
                            "value": "Show Age Range"
                          },
                          {
                            "label": "Hide Age",
                            "value": "Hide Age"
                          }
                        ],
                        "ethnicities": [
                          {
                            "label": "Asian",
                            "value": "Asian"
                          },
                          {
                            "label": "White/Caucasian",
                            "value": "White/Caucasian"
                          }
                        ],
                        "orientations": [
                          {
                            "label": "Heterosexual",
                            "value": "heterosexual"
                          },
                          {
                            "label": "Homosexual",
                            "value": "homosexual"
                          },
                          {
                            "label": "Bisexual",
                            "value": "bisexual"
                          }
                        ],
                        "personality_types": [
                          {
                            "label": "Extrovert",
                            "value": "extrovert"
                          },
                          {
                            "label": "Introvert",
                            "value": "introvert"
                          },
                          {
                            "label": "Ambivert",
                            "value": "ambivert"
                          },
                          {
                            "label": "Not sure",
                            "value": "unsure"
                          }
                        ],
                        "languages": [
                          {
                            "id": 1,
                            "name": "English",
                            "created_at": "2024-01-01T00:00:00.000000Z",
                            "updated_at": "2024-01-01T00:00:00.000000Z"
                          }
                        ],
                        "hobbies": [
                          {
                            "id": 1,
                            "name": "Reading",
                            "created_at": "2024-01-01T00:00:00.000000Z",
                            "updated_at": "2024-01-01T00:00:00.000000Z"
                          }
                        ],
                        "relocation_readiness": [
                          {
                            "label": "Yes",
                            "value": "yes"
                          },
                          {
                            "label": "No",
                            "value": "no"
                          },
                          {
                            "label": "Maybe/Depends",
                            "value": "maybe"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/options/relationship-preference": {
      "get": {
        "summary": "Get Relationship Preference Options",
        "description": "Returns options for relationship preferences and availability settings including relationship goals, partner preferences, duration preferences, and available time slots.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Relationship preference options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipPreferenceOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/options/financial-profile": {
      "get": {
        "summary": "Get Financial Profile Options",
        "description": "Returns financial profile options including capital levels and relationship milestone durations. Supports currency conversion via query parameter. When a currency parameter is provided, the capital_level labels will be converted to the specified currency using current exchange rates.",
        "tags": ["Options"],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency code for amount conversion (defaults to USD)",
            "required": false,
            "schema": {
              "type": "string",
              "default": "USD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Financial profile options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialProfileOptionsResponse"
                },
                "examples": {
                  "Sample Response": {
                    "value": {
                      "error": false,
                      "data": {
                        "capital_level": [
                          {
                            "label": "Below $1,000",
                            "value": "below_1000"
                          },
                          {
                            "label": "$1,000-1,999",
                            "value": "1000_1999"
                          },
                          {
                            "label": "$2,000-9,999",
                            "value": "2000_9999"
                          },
                          {
                            "label": "Above $10,000",
                            "value": "above_10000"
                          }
                        ],
                        "relationship_milestone_durations": [
                          {
                            "label": "3 months",
                            "value": "3m"
                          },
                          {
                            "label": "6 months",
                            "value": "6m"
                          },
                          {
                            "label": "1 year",
                            "value": "1y"
                          },
                          {
                            "label": "2 years",
                            "value": "2y"
                          },
                          {
                            "label": "3 years",
                            "value": "3y"
                          },
                          {
                            "label": "5 years",
                            "value": "5y"
                          },
                          {
                            "label": "7 years",
                            "value": "7y"
                          },
                          {
                            "label": "10 years",
                            "value": "10y"
                          },
                          {
                            "label": "15 years",
                            "value": "15y"
                          },
                          {
                            "label": "20 years",
                            "value": "20y"
                          },
                          {
                            "label": "25 years",
                            "value": "25y"
                          },
                          {
                            "label": "30 years",
                            "value": "30y"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/options/living-preferences": {
      "get": {
        "summary": "Get Living Preferences Options",
        "description": "Returns options for living arrangement preferences and availability settings including driving license, car availability, driver availability, and living format preferences.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Living preferences options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LivingPreferencesOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orientations": {
      "get": {
        "summary": "Get Sexual Orientation Options",
        "description": "Returns available sexual orientation options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Sexual orientation options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrientationOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/religions": {
      "get": {
        "summary": "Get Religion Options",
        "description": "Returns available religion options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Religion options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReligionOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ethnicities": {
      "get": {
        "summary": "Get Ethnicity Options",
        "description": "Returns available ethnicity options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Ethnicity options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EthnicityOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/personality-types": {
      "get": {
        "summary": "Get Personality Type Options",
        "description": "Returns available personality type options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Personality type options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalityTypeOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/relocation-readiness": {
      "get": {
        "summary": "Get Relocation Readiness Options",
        "description": "Returns available relocation readiness options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Relocation readiness options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelocationReadinessOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/education-levels": {
      "get": {
        "summary": "Get Education Level Options",
        "description": "Returns available education level options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Education level options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EducationLevelOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hobbies": {
      "get": {
        "summary": "Get Hobby Options",
        "description": "Returns available hobby options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Hobby options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HobbyOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/languages": {
      "get": {
        "summary": "Get Language Options",
        "description": "Returns available language options for user profiles.",
        "tags": ["Options"],
        "responses": {
          "200": {
            "description": "Language options retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageOptionsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/people/{public_username}/financial": {
      "get": {
        "summary": "Get User Financial Information",
        "description": "Retrieve a user's financial profile information including budget, capital level, income, milestone gifts, and financial preferences. This endpoint provides comprehensive financial data that helps users understand each other's financial capabilities and expectations in relationships. Supports currency conversion via query parameter.",
        "tags": ["People"],
        "parameters": [
          {
            "name": "public_username",
            "in": "path",
            "description": "The public username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency code for viewing amounts in a different currency (e.g., 'AED', 'EUR'). If not provided, uses the user's default currency.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserFinancialInfo"
                    }
                  }
                },
                "examples": {
                  "financial_info_example": {
                    "summary": "User financial information",
                    "value": {
                      "error": false,
                      "data": {
                        "currency": "USD",
                        "lifestyle_support_budget": "5000.00",
                        "lifestyle_support_budget_in_sc": "5000.00",
                        "lifestyle_support_budget_trimmed": "5,000",
                        "lifestyle_support_budget_trimmed_in_sc": "5,000",
                        "capital_level_precise": "1000000",
                        "capital_level_less_precise": "high",
                        "monthly_income_precise": "10000",
                        "monthly_income_less_precise": "high",
                        "first_child_payment": "1000.00",
                        "second_child_payment": "800.00",
                        "subsequent_child_payment": "600.00",
                        "monthly_child_budget": "500.00",
                        "marriage_gift": "50000.00",
                        "termination_comp": "10000.00",
                        "termination_clause": "3 months notice",
                        "milestone_gifts": [
                          {
                            "id": 1,
                            "amount": "1000.00",
                            "period": "monthly"
                          }
                        ],
                        "currency_detail": {
                          "id": 1,
                          "code": "USD",
                          "name": "US Dollar",
                          "symbol": "$",
                          "created_at": "2025-01-01T00:00:00.000000Z",
                          "updated_at": "2025-01-01T00:00:00.000000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/people/{public_username}/living": {
      "get": {
        "summary": "Get User Living Information",
        "description": "Retrieve a user's living preferences and arrangements including transportation availability, living format preferences, and housing information. This endpoint provides details about the user's current living situation and preferences for different stages of relationships.",
        "tags": ["People"],
        "parameters": [
          {
            "name": "public_username",
            "in": "path",
            "description": "The public username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/UserLivingInfo"
                    }
                  }
                },
                "examples": {
                  "living_info_example": {
                    "summary": "User living information",
                    "value": {
                      "error": false,
                      "data": {
                        "driving_license_availability": true,
                        "car_availability": true,
                        "driver_availability": true,
                        "living_format_test_moon": "apartment",
                        "living_format_preliminary_contract": "rental",
                        "living_format_final_contract": "purchase",
                        "living_format_test_moon_image_url": "https://example.com/test_moon.jpg",
                        "living_format_test_moon_image_thumbnail_url": "https://example.com/test_moon_thumb.jpg",
                        "living_format_preliminary_contract_image_url": "https://example.com/preliminary.jpg",
                        "living_format_preliminary_contract_image_thumbnail_url": "https://example.com/preliminary_thumb.jpg",
                        "living_format_final_contract_image_url": "https://example.com/final.jpg",
                        "living_format_final_contract_image_thumbnail_url": "https://example.com/final_thumb.jpg",
                        "housing_image_url": "https://example.com/housing.jpg",
                        "housing_image_thumbnail_url": "https://example.com/housing_thumb.jpg"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/people/{public_username}/images": {
      "get": {
        "summary": "Get User Images",
        "description": "Retrieve a user's profile images and album photos. This endpoint respects the user's privacy settings - if a user has hidden their images, only the profile picture will be returned. For managing your own profile images and albums, use the Profile Images and Albums API endpoints.",
        "tags": ["People"],
        "parameters": [
          {
            "name": "public_username",
            "in": "path",
            "description": "The public username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserImage"
                      }
                    }
                  }
                },
                "examples": {
                  "images_example": {
                    "summary": "User images",
                    "value": {
                      "error": false,
                      "data": [
                        {
                          "id": 123,
                          "url": "https://example.com/profile.jpg",
                          "thumbnail_url": "https://example.com/profile_thumb.jpg"
                        },
                        {
                          "id": 456,
                          "url": "https://example.com/album1.jpg",
                          "thumbnail_url": "https://example.com/album1_thumb.jpg"
                        },
                        {
                          "id": 789,
                          "url": "https://example.com/album2.jpg",
                          "thumbnail_url": "https://example.com/album2_thumb.jpg"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/age-ranges": {
      "get": {
        "summary": "Get Age Ranges",
        "description": "Retrieve all available age ranges that can be used for profile age display and search criteria. These ranges are used when users choose to display their age as a range instead of exact age. This is a public endpoint that does not require authentication.",
        "tags": ["People"],
        "responses": {
          "200": {
            "description": "Age ranges retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string",
                            "description": "Display label for the age range (e.g., '21-25')"
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum age in the range"
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum age in the range"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "age_ranges_example": {
                    "summary": "Available age ranges",
                    "value": {
                      "success": true,
                      "data": [
                        {
                          "label": "18+",
                          "min": 18,
                          "max": 20
                        },
                        {
                          "label": "21-25",
                          "min": 21,
                          "max": 25
                        },
                        {
                          "label": "26-30",
                          "min": 26,
                          "max": 30
                        },
                        {
                          "label": "31-35",
                          "min": 31,
                          "max": 35
                        },
                        {
                          "label": "36-40",
                          "min": 36,
                          "max": 40
                        },
                        {
                          "label": "41-45",
                          "min": 41,
                          "max": 45
                        },
                        {
                          "label": "46-50",
                          "min": 46,
                          "max": 50
                        },
                        {
                          "label": "51-55",
                          "min": 51,
                          "max": 55
                        },
                        {
                          "label": "56-60",
                          "min": 56,
                          "max": 60
                        },
                        {
                          "label": "61-65",
                          "min": 61,
                          "max": 65
                        },
                        {
                          "label": "66-70",
                          "min": 66,
                          "max": 70
                        },
                        {
                          "label": "71-75",
                          "min": 71,
                          "max": 75
                        },
                        {
                          "label": "76-80",
                          "min": 76,
                          "max": 80
                        },
                        {
                          "label": "80+",
                          "min": 81,
                          "max": 999
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "error_example": {
                    "summary": "Error response",
                    "value": {
                      "success": false,
                      "message": "Sorry, Something went wrong. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/people/{public_username}/contract-status": {
      "get": {
        "summary": "Get Contract Status",
        "description": "Retrieve the contract status between the authenticated user and the specified user. This endpoint provides comprehensive contract information including financial details, status, dates, and actions that can be performed on the contract.",
        "tags": ["People"],
        "parameters": [
          {
            "name": "public_username",
            "in": "path",
            "description": "The public username of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    }
                  }
                },
                "examples": {
                  "contract_status_example": {
                    "summary": "Active contract status",
                    "value": {
                      "error": false,
                      "contract": {
                        "id": 123,
                        "seeker_id": 456,
                        "sponsor_id": 789,
                        "contract_id": "CTR-2024-001",
                        "contract_type": "test_moon",
                        "contract_type_str": "Test Moon",
                        "duration_days": 30,
                        "monthly_amount": "5000.00",
                        "monthly_amount_formatted": "$5,000.00",
                        "monthly_budget_per_child": "1000.00",
                        "monthly_budget_per_child_formatted": "$1,000.00",
                        "financial_gift_per_milestone": "2000.00",
                        "financial_gift_per_milestone_formatted": "$2,000.00",
                        "financial_gift_upon_marriage": "50000.00",
                        "financial_gift_upon_marriage_formatted": "$50,000.00",
                        "capital_growth_bonus": "10000.00",
                        "capital_growth_bonus_formatted": "$10,000.00",
                        "relationship_termination_compensation": "5000.00",
                        "relationship_termination_compensation_formatted": "$5,000.00",
                        "currency": "USD",
                        "financial_settings": {
                          "monthly_amount": "5000.00",
                          "monthly_budget_per_child": "1000.00",
                          "financial_gift_per_milestone": "2000.00",
                          "financial_gift_upon_marriage": "50000.00",
                          "capital_growth_bonus": "10000.00",
                          "relationship_termination_compensation": "5000.00"
                        },
                        "start_date": "2024-01-15",
                        "start_date_str": "Jan 15, 2024",
                        "end_date": "2024-02-14",
                        "end_date_str": "Feb 14, 2024",
                        "expiration_date": "2024-02-14",
                        "expiration_date_str": "Feb 14, 2024",
                        "paused_at": null,
                        "stopped_at": null,
                        "status": "active",
                        "status_str": "Active",
                        "status_bg_color": "#10B981",
                        "status_text_color": "#FFFFFF",
                        "overal_contract_status": "Active",
                        "status_classes_str": "bg-green-500 text-white",
                        "is_test_moon": true,
                        "is_preliminary": false,
                        "is_main": false,
                        "official_agreement_signed": true,
                        "created_at": "2024-01-15T10:30:00.000000Z",
                        "updated_at": "2024-01-20T14:45:00.000000Z",
                        "sponsor": {
                          "id": 789,
                          "public_username": "sponsor_user",
                          "first_name": "Jane",
                          "last_name": "Smith",
                          "email": "jane@example.com",
                          "gender": "female",
                          "partner_preference": "male",
                          "relationship_goals": "marriage",
                          "role": "user",
                          "profile_picture_url": "https://example.com/jane_profile.jpg",
                          "hide_images": 0,
                          "initials": "JS"
                        },
                        "seeker": {
                          "id": 456,
                          "public_username": "john_doe",
                          "first_name": "John",
                          "last_name": "Doe",
                          "email": "john@example.com",
                          "gender": "male",
                          "partner_preference": "female",
                          "relationship_goals": "marriage",
                          "role": "user",
                          "profile_picture_url": "https://example.com/john_profile.jpg",
                          "hide_images": 0,
                          "initials": "JD"
                        },
                        "template": {
                          "id": 1,
                          "name": "Test Moon Template",
                          "description": "A template for test moon contracts",
                          "contract_type": "test_moon",
                          "monthly_amount": "5000.00",
                          "currency": "USD",
                          "financial_settings": {
                            "monthly_amount": "5000.00",
                            "monthly_budget_per_child": "1000.00",
                            "financial_gift_per_milestone": "2000.00",
                            "financial_gift_upon_marriage": "50000.00",
                            "capital_growth_bonus": "10000.00",
                            "relationship_termination_compensation": "5000.00"
                          },
                          "default_duration_days": 30
                        },
                        "actions": [
                          {
                            "id": 1,
                            "action_type": "contract_created",
                            "status": "approved",
                            "description": "Contract created successfully",
                            "created_at": "2024-01-15T10:30:00.000000Z",
                            "performed_by": {
                              "id": 789,
                              "public_username": "sponsor_user",
                              "first_name": "Jane",
                              "last_name": "Smith",
                              "initials": "JS"
                            },
                            "approved_by": {
                              "id": 456,
                              "public_username": "john_doe",
                              "first_name": "John",
                              "last_name": "Doe",
                              "initials": "JD"
                            },
                            "rejected_by": null
                          }
                        ],
                        "partner": {
                          "id": 456,
                          "public_username": "john_doe",
                          "first_name": "John",
                          "last_name": "Doe",
                          "email": "john@example.com",
                          "gender": "male",
                          "partner_preference": "female",
                          "relationship_goals": "marriage",
                          "role": "user",
                          "profile_picture_url": "https://example.com/john_profile.jpg",
                          "hide_images": 0,
                          "initials": "JD"
                        },
                        "is_sponsor": true,
                        "is_seeker": false,
                        "can_be_changed": true,
                        "can_be_extended": true,
                        "can_be_upgraded": false,
                        "can_be_stopped": true,
                        "can_be_restarted": false,
                        "total_duration_days": 30,
                        "created_by": 789
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          },
          "404": {
            "description": "User not found or no contract found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "user_not_found": {
                    "summary": "User not found",
                    "value": {
                      "error": true,
                      "message": "User not found"
                    }
                  },
                  "no_contract_found": {
                    "summary": "No contract found",
                    "value": {
                      "error": true,
                      "message": "No contract found between you and this user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/categories": {
      "get": {
        "summary": "Get Support Ticket Categories",
        "description": "Retrieve all available support ticket categories.",
        "tags": ["Support Tickets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": [
                        {
                          "key": "general",
                          "name": "General"
                        },
                        {
                          "key": "account_issues",
                          "name": "Account issues"
                        },
                        {
                          "key": "finance_issues",
                          "name": "Finance issues"
                        },
                        {
                          "key": "legal_issues",
                          "name": "Legal issues"
                        },
                        {
                          "key": "affiliate_issues",
                          "name": "Affiliate issues"
                        },
                        {
                          "key": "partnership_proposal",
                          "name": "Partnership proposal"
                        },
                        {
                          "key": "vip_requests",
                          "name": "VIP requests"
                        },
                        {
                          "key": "abuse_report",
                          "name": "Abuse report"
                        },
                        {
                          "key": "complaint",
                          "name": "Complaint"
                        },
                        {
                          "key": "rule_violation",
                          "name": "Report a violation of rules"
                        }
                      ],
                      "message": "Support ticket categories retrieved successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/statuses": {
      "get": {
        "summary": "Get Support Ticket Statuses",
        "description": "Retrieve all available support ticket statuses.",
        "tags": ["Support Tickets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": [
                        {
                          "key": "open",
                          "name": "Open"
                        },
                        {
                          "key": "in_progress",
                          "name": "In Progress"
                        },
                        {
                          "key": "resolved",
                          "name": "Resolved"
                        },
                        {
                          "key": "closed",
                          "name": "Closed"
                        }
                      ],
                      "message": "Support ticket statuses retrieved successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/importance-levels": {
      "get": {
        "summary": "Get Support Ticket Importance Levels",
        "description": "Retrieve all available support ticket importance levels.",
        "tags": ["Support Tickets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": [
                        {
                          "label": "Urgent",
                          "value": "urgent"
                        },
                        {
                          "label": "Critical",
                          "value": "critical"
                        },
                        {
                          "label": "Important",
                          "value": "important"
                        },
                        {
                          "label": "Normal",
                          "value": "normal"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/notify-options": {
      "get": {
        "summary": "Get Notification Options",
        "description": "Retrieve all available notification options for support tickets.",
        "tags": ["Support Tickets"],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "label": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": [
                        {
                          "label": "Notify about response only",
                          "value": "response_only"
                        },
                        {
                          "label": "Include the title",
                          "value": "include_title"
                        },
                        {
                          "label": "Include the response's content",
                          "value": "include_content"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "summary": "Get Notifications List",
        "description": "Retrieve user notifications with filtering and pagination support.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "importance",
            "in": "query",
            "description": "Filter by importance: low, medium, high",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["low", "medium", "high"]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Filter by categories (comma-separated): Notice,Chat,Profile,BalanceIncrease,BalanceDecrease",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "read",
            "in": "query",
            "description": "Filter by read status: true for read, false for unread",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 15
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Notification"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                },
                "examples": {
                  "ProfileNotification": {
                    "summary": "Profile Interest Notification",
                    "value": {
                      "error": false,
                      "data": [
                        {
                          "id": "550e8400-e29b-41d4-a716-446655440000",
                          "icon_image_url": "http://localhost:8001/static/icons/solid_dice_white.svg",
                          "icon_styling": "bg-pink-400",
                          "icon_bg_color": "#F472B6",
                          "category": "Profile",
                          "category_group": "Profile",
                          "category_styling": "bg-pink-100 text-pink-700",
                          "category_bg_color": "#FCE7F3",
                          "category_text_color": "#BE185D",
                          "importance": "medium",
                          "importance_styling": "bg-orange-100 text-orange-700",
                          "importance_bg_color": "#FFEDD5",
                          "importance_text_color": "#C2410C",
                          "header": "Someone Found You Interesting!",
                          "message": "Your profile just got marked as interesting! You're catching attention and more likely to show up in their suggestions and match lists.",
                          "preview": "Your profile just got marked as interesting! You're catching attention and more likely to show up in their suggestions and match lists.",
                          "read_at": null,
                          "created_at": "2025-06-24T19:44:24.000000Z",
                          "created_at_formatted": "24 Jun 2025 07:44 pm",
                          "created_at_local": "2025-06-25T02:44:24.000000Z",
                          "created_at_local_formatted": "25 Jun 2025 02:44 am",
                          "is_system_notice": false,
                          "interested_user_id": 123,
                          "interested_user_name": "John",
                          "interested_user_avatar": "https://example.com/avatar.jpg",
                          "status_str": null,
                          "status_bg_color": "#F5F5F5",
                          "status_text_color": "#374151",
                          "link": null,
                          "link_label": null,
                          "links_in_message": []
                        }
                      ],
                      "pagination": {
                        "total": 1,
                        "per_page": 10,
                        "current_page": 1,
                        "last_page": 1
                      }
                    }
                  },
                  "NoticeNotification": {
                    "summary": "System Notice with Links",
                    "value": {
                      "error": false,
                      "data": [
                        {
                          "id": "650e8400-e29b-41d4-a716-446655440001",
                          "icon_image_url": "http://localhost:8001/static/icons/solid_bell_white.svg",
                          "icon_styling": "bg-blue-400",
                          "icon_bg_color": "#60A5FA",
                          "category": "Notice",
                          "category_group": "Notice",
                          "category_styling": "bg-blue-100 text-blue-700",
                          "category_bg_color": "#DBEAFE",
                          "category_text_color": "#1D4ED8",
                          "importance": "medium",
                          "importance_styling": "bg-orange-100 text-orange-700",
                          "importance_bg_color": "#FFEDD5",
                          "importance_text_color": "#C2410C",
                          "header": "Finalize your profile",
                          "message": "You can go to <a href=\"http://localhost:8000/profile/edit\">Profile</a> section and <a href=\"http://localhost:8000/settings\">Settings</a> to complete.",
                          "preview": "You can go to Profile section and Settings to complete.",
                          "read_at": null,
                          "created_at": "2025-06-24T18:30:00.000000Z",
                          "created_at_formatted": "24 Jun 2025 06:30 pm",
                          "created_at_local": "2025-06-25T01:30:00.000000Z",
                          "created_at_local_formatted": "25 Jun 2025 01:30 am",
                          "is_system_notice": true,
                          "interested_user_id": null,
                          "interested_user_name": null,
                          "interested_user_avatar": null,
                          "status_str": null,
                          "status_bg_color": "#F5F5F5",
                          "status_text_color": "#374151",
                          "link": null,
                          "link_label": null,
                          "links_in_message": ["/profile/edit", "/settings"]
                        }
                      ],
                      "pagination": {
                        "total": 1,
                        "per_page": 10,
                        "current_page": 1,
                        "last_page": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/filter": {
      "get": {
        "summary": "Get Notification Filters",
        "description": "Get available filter options for notifications.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationFilters"
                    }
                  }
                },
                "examples": {
                  "FilterOptions": {
                    "summary": "Available filter options",
                    "value": {
                      "error": false,
                      "data": {
                        "importances": [
                          {
                            "name": "All",
                            "value": "all"
                          },
                          {
                            "name": "Low",
                            "value": "low"
                          },
                          {
                            "name": "Medium",
                            "value": "medium"
                          },
                          {
                            "name": "High",
                            "value": "high"
                          }
                        ],
                        "filter_topics": [
                          {
                            "name": "All",
                            "value": "All"
                          },
                          {
                            "name": "Notice",
                            "value": "Notice"
                          },
                          {
                            "name": "Chat",
                            "value": "Chat"
                          },
                          {
                            "name": "Someone's interest to my profile",
                            "value": "Profile"
                          },
                          {
                            "name": "Balance Increase",
                            "value": "BalanceIncrease"
                          },
                          {
                            "name": "Balance Decrease",
                            "value": "BalanceDecrease"
                          }
                        ],
                        "notify_methods": [
                          {
                            "name": "Email",
                            "value": "email"
                          },
                          {
                            "name": "Push Notification",
                            "value": "push_notification"
                          }
                        ],
                        "notification_content": [
                          {
                            "name": "Header Only",
                            "value": "header"
                          },
                          {
                            "name": "Header and Content",
                            "value": "header_content"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "summary": "Get Single Notification",
        "description": "Retrieve a specific notification by ID.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Notification"
                    }
                  }
                },
                "examples": {
                  "ProfileNotification": {
                    "summary": "Profile Interest Notification",
                    "value": {
                      "error": false,
                      "data": {
                        "id": "550e8400-e29b-41d4-a716-446655440000",
                        "icon_image_url": "http://localhost:8001/static/icons/solid_dice_white.svg",
                        "icon_styling": "bg-pink-400",
                        "icon_bg_color": "#F472B6",
                        "category": "Profile",
                        "category_group": "Profile",
                        "category_styling": "bg-pink-100 text-pink-700",
                        "category_bg_color": "#FCE7F3",
                        "category_text_color": "#BE185D",
                        "importance": "medium",
                        "importance_styling": "bg-orange-100 text-orange-700",
                        "importance_bg_color": "#FFEDD5",
                        "importance_text_color": "#C2410C",
                        "header": "Someone Found You Interesting!",
                        "message": "Your profile just got marked as interesting! You're catching attention and more likely to show up in their suggestions and match lists.",
                        "preview": "Your profile just got marked as interesting! You're catching attention and more likely to show up in their suggestions and match lists.",
                        "read_at": null,
                        "created_at": "2025-06-24T19:44:24.000000Z",
                        "created_at_formatted": "24 Jun 2025 07:44 pm",
                        "created_at_local": "2025-06-25T02:44:24.000000Z",
                        "created_at_local_formatted": "25 Jun 2025 02:44 am",
                        "is_system_notice": false,
                        "interested_user_id": 123,
                        "interested_user_name": "John",
                        "interested_user_avatar": "https://example.com/avatar.jpg",
                        "status_str": null,
                        "status_bg_color": "#F5F5F5",
                        "status_text_color": "#374151",
                        "link": null,
                        "link_label": null,
                        "links_in_message": []
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}/mark-read": {
      "post": {
        "summary": "Mark Notification as Read",
        "description": "Mark a specific notification as read.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "MarkAsRead": {
                    "summary": "Notification marked as read",
                    "value": {
                      "error": false,
                      "message": "Notification marked as read"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/mark-all-read": {
      "post": {
        "summary": "Mark All Notifications as Read",
        "description": "Mark all user notifications as read.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "MarkAllAsRead": {
                    "summary": "All notifications marked as read",
                    "value": {
                      "error": false,
                      "message": "All notifications marked as read"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}/importance": {
      "put": {
        "summary": "Update Notification Importance",
        "description": "Update the importance of a notification. Note: This is not allowed for 'Notice' category notifications.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notification UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["importance"],
                "properties": {
                  "importance": {
                    "type": "string",
                    "enum": ["low", "medium", "high"],
                    "description": "New importance level"
                  }
                }
              },
              "examples": {
                "UpdateImportance": {
                  "summary": "Update importance to high",
                  "value": {
                    "importance": "high"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "SuccessResponse": {
                    "summary": "Importance updated successfully",
                    "value": {
                      "error": false,
                      "message": "Notification importance updated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Cannot change importance for Notice category or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                },
                "examples": {
                  "NoticeRestriction": {
                    "summary": "Cannot change Notice importance",
                    "value": {
                      "error": true,
                      "message": "Importance cannot be changed for Notice notifications"
                    }
                  },
                  "ValidationError": {
                    "summary": "Invalid importance value",
                    "value": {
                      "error": true,
                      "error_message": "Sorry, Please check your input and try again.",
                      "errors": {
                        "importance": ["The importance field is required."]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/unread-count": {
      "get": {
        "summary": "Get Unread Count",
        "description": "Get the count of unread notifications.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "unread_count": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "UnreadCount": {
                    "summary": "Unread notifications count",
                    "value": {
                      "error": false,
                      "data": {
                        "unread_count": 5
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/preferences": {
      "get": {
        "summary": "Get User Preferences",
        "description": "Get user notification preferences.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationPreferences"
                    }
                  }
                },
                "examples": {
                  "UserPreferences": {
                    "summary": "User notification preferences",
                    "value": {
                      "error": false,
                      "data": {
                        "id": 1,
                        "user_id": 123,
                        "important_notices_email": true,
                        "important_notices_push": true,
                        "content_type": "header_content",
                        "created_at": "2025-06-24T19:44:24.000000Z",
                        "updated_at": "2025-06-24T19:44:24.000000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update User Preferences",
        "description": "Update user notification preferences.",
        "tags": ["Notifications"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "important_notices_email": {
                    "type": "boolean",
                    "description": "Receive important notices via email"
                  },
                  "important_notices_push": {
                    "type": "boolean",
                    "description": "Receive important notices via push"
                  },
                  "content_type": {
                    "type": "string",
                    "enum": ["header", "header_content"],
                    "description": "Content type preference"
                  }
                }
              },
              "examples": {
                "UpdatePreferences": {
                  "summary": "Update notification preferences",
                  "value": {
                    "important_notices_email": true,
                    "important_notices_push": false,
                    "content_type": "header"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationPreferences"
                    }
                  }
                },
                "examples": {
                  "UpdatedPreferences": {
                    "summary": "Updated notification preferences",
                    "value": {
                      "error": false,
                      "message": "Notification preferences updated",
                      "data": {
                        "id": 1,
                        "user_id": 123,
                        "important_notices_email": true,
                        "important_notices_push": false,
                        "content_type": "header",
                        "created_at": "2025-06-24T19:44:24.000000Z",
                        "updated_at": "2025-06-24T20:30:15.000000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets": {
      "get": {
        "summary": "Get Support Tickets",
        "description": "Retrieve support tickets for the authenticated user or guest.",
        "tags": ["Support Tickets"],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of tickets per page (default: 10)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default: 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type (unread, read, archived, deleted)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["unread", "read", "archived", "deleted"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SupportTicketResource"
                      }
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total number of tickets across all pages"
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of tickets per page"
                    },
                    "current_page": {
                      "type": "integer",
                      "description": "Current page number"
                    },
                    "last_page": {
                      "type": "integer",
                      "description": "Last page number"
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": [
                        {
                          "id": 1,
                          "ticket_number": "GEN-123456",
                          "title": "How do I reset my password?",
                          "content": "I forgot my password and need help resetting it.",
                          "category": "general",
                          "category_display_name": "General",
                          "category_styling": "bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-200",
                          "category_bg_color": "#F3F4F6",
                          "category_text_color": "#374151",
                          "importance_level": "normal",
                          "importance_styling": "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200",
                          "importance_bg_color": "#DBEAFE",
                          "importance_text_color": "#1D4ED8",
                          "status": "open",
                          "status_display_name": "Open",
                          "is_unread": false,
                          "message_count": 1,
                          "latest_message": {
                            "id": 1,
                            "message": "I need help with my account setup.",
                            "created_at": "2024-01-15T10:30:00.000000Z"
                          },
                          "formatted_message_preview": "I need help with my account setup.",
                          "user": {
                            "id": 123,
                            "first_name": "John",
                            "last_name": "Doe",
                            "full_name": "John Doe",
                            "public_username": "johndoe",
                            "profile_picture_url": "https://your-domain.com/storage/profile-pictures/john.jpg"
                          },
                          "created_at": "2024-01-15T10:30:00.000000Z",
                          "created_at_local_formatted": "Jan 15, 2024 10:30 AM",
                          "updated_at": "2024-01-15T10:30:00.000000Z",
                          "updated_at_local_formatted": "Jan 15, 2024 10:30 AM"
                        }
                      ],
                      "total": 1,
                      "per_page": 20,
                      "current_page": 1,
                      "last_page": 1,
                      "message": "Support tickets retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Support Ticket",
        "description": "Create a new support ticket.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["category", "importance_level", "title", "content"],
                "properties": {
                  "category": {
                    "type": "string",
                    "description": "Ticket category",
                    "enum": ["general", "account_issues", "finance_issues", "legal_issues", "affiliate_issues", "partnership_proposal", "vip_requests", "abuse_report", "complaint", "rule_violation"]
                  },
                  "importance_level": {
                    "type": "string",
                    "description": "Ticket importance level",
                    "enum": ["urgent", "critical", "important", "normal"]
                  },
                  "title": {
                    "type": "string",
                    "description": "Ticket title",
                    "maxLength": 255
                  },
                  "content": {
                    "type": "string",
                    "description": "Ticket content"
                  },
                  "notification_option": {
                    "type": "string",
                    "description": "Notification preference (required if notify_via_email is true)",
                    "enum": ["response_only", "include_title", "include_content"]
                  },
                  "notify_via_email": {
                    "type": "boolean",
                    "description": "Whether to notify via email",
                    "default": false
                  },
                  "guest_email": {
                    "type": "string",
                    "format": "email",
                    "description": "Guest email (required if not authenticated)"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["category", "importance_level", "title", "content"],
                "properties": {
                  "category": {
                    "type": "string",
                    "description": "Ticket category",
                    "enum": ["general", "account_issues", "finance_issues", "legal_issues", "affiliate_issues", "partnership_proposal", "vip_requests", "abuse_report", "complaint", "rule_violation"]
                  },
                  "importance_level": {
                    "type": "string",
                    "description": "Ticket importance level",
                    "enum": ["urgent", "critical", "important", "normal"]
                  },
                  "title": {
                    "type": "string",
                    "description": "Ticket title",
                    "maxLength": 255
                  },
                  "content": {
                    "type": "string",
                    "description": "Ticket content"
                  },
                  "notification_option": {
                    "type": "string",
                    "description": "Notification preference (required if notify_via_email is true)",
                    "enum": ["response_only", "include_title", "include_content"]
                  },
                  "notify_via_email": {
                    "type": "string",
                    "description": "Whether to notify via email"
                  },
                  "guest_email": {
                    "type": "string",
                    "format": "email",
                    "description": "Guest email (required if not authenticated)"
                  },
                  "attachments[]": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "File attachments (PDF, JPG, JPEG, PNG, max 15MB each)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicket"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": {
                        "id": 2,
                        "ticket_number": "FINT-789012",
                        "user_id": 123,
                        "guest_email": null,
                        "ip_address": "192.168.1.1",
                        "user_agent": "Mozilla/5.0...",
                        "category": "finance_issues",
                        "importance_level": "normal",
                        "title": "Need help with account setup",
                        "content": "I am having trouble setting up my account and would appreciate assistance.",
                        "notify_via_email": true,
                        "notification_option": "response_only",
                        "email_sent": false,
                        "status": "open",
                        "responded_at": null,
                        "resolved_at": null,
                        "attachments": [
                          {
                            "original_name": "screenshot.png",
                            "filename": "1705312800_screenshot.png",
                            "path": "support-tickets/1705312800_screenshot.png",
                            "size": 1024000,
                            "mime_type": "image/png",
                            "url": "https://your-domain.com/storage/support-tickets/1705312800_screenshot.png"
                          }
                        ],
                        "captcha_session_id": null,
                        "is_spam": false,
                        "created_at": "2024-01-15T11:00:00.000000Z",
                        "updated_at": "2024-01-15T11:00:00.000000Z"
                      },
                      "message": "Support ticket created successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/{id}": {
      "get": {
        "summary": "Get Specific Support Ticket",
        "description": "Retrieve a specific support ticket by ID.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicketResource"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Support Ticket",
        "description": "Delete a support ticket.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/{id}/messages": {
      "get": {
        "summary": "Get Support Ticket Messages",
        "description": "Retrieve all messages for a specific support ticket.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SupportTicketMessage"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Example Response": {
                      "error": false,
                      "data": [
                        {
                          "id": 1,
                          "support_ticket_id": 1,
                          "user_id": 123,
                          "sender_type": "user",
                          "sender_name": "John Doe",
                          "sender_email": "john@example.com",
                          "message": "I need help with my account setup.",
                          "attachments": [],
                          "is_internal": false,
                          "is_read": true,
                          "read_at": "2024-01-15T10:35:00.000000Z",
                          "created_at": "2024-01-15T10:30:00.000000Z",
                          "updated_at": "2024-01-15T10:30:00.000000Z",
                          "formatted_created_at": "Jan 15, 2024 10:30 AM",
                          "is_sent_by_user": true,
                          "is_sent_by_admin": false
                        },
                        {
                          "id": 2,
                          "support_ticket_id": 1,
                          "user_id": null,
                          "sender_type": "admin",
                          "sender_name": "Support Team",
                          "sender_email": "support@example.com",
                          "message": "Thank you for contacting us. We'll help you with your account setup. Please provide more details about the specific issue you're facing.",
                          "attachments": [],
                          "is_internal": false,
                          "is_read": false,
                          "read_at": null,
                          "created_at": "2024-01-15T11:00:00.000000Z",
                          "updated_at": "2024-01-15T11:00:00.000000Z",
                          "formatted_created_at": "Jan 15, 2024 11:00 AM",
                          "is_sent_by_user": false,
                          "is_sent_by_admin": true
                        }
                      ],
                      "message": "Messages retrieved successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Message to Support Ticket",
        "description": "Add a new message to a support ticket. This endpoint also supports file attachments.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The message content (minimum 1 character)",
                    "minLength": 1
                  },
                  "attachments[]": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "File attachments (PDF, JPG, JPEG, PNG, max 15MB each)"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["message"],
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The message content (minimum 1 character)",
                    "minLength": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SupportTicketMessage"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/{id}/send-email": {
      "post": {
        "summary": "Send Email for Support Ticket",
        "description": "Send an email notification for a support ticket.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Email already sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "x-examples": {
                    "Email Already Sent": {
                      "error": true,
                      "message": "Email has already been sent for this ticket"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/{id}/mark-read": {
      "post": {
        "summary": "Mark Support Ticket as Read",
        "description": "Mark a support ticket as read.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/{id}/mark-unread": {
      "post": {
        "summary": "Mark Support Ticket as Unread",
        "description": "Mark a support ticket as unread.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/support-tickets/{id}/archive": {
      "post": {
        "summary": "Archive Support Ticket",
        "description": "Archive a support ticket.",
        "tags": ["Support Tickets"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Support ticket ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "X-Guest-Email",
            "in": "header",
            "description": "Guest email address (required for guest access)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Support ticket not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },


    "/affiliate/links": {
      "get": {
        "summary": "Get Affiliate Links",
        "description": "Retrieves affiliate links for the authenticated user. The middleware automatically generates an affiliate code if the user doesn't have one.",
        "tags": ["Affiliate"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AffiliateLinksResponse"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "affiliate_code": "ABC123XYZ",
                        "affiliate_links": [
                          {
                            "type": "Main Page",
                            "url": "https://startup2050.com/?ref=ABC123XYZ",
                            "description": "Main landing page for all users"
                          },
                          {
                            "type": "Universal Landing Page",
                            "url": "https://startup2050.com/ulp?ref=ABC123XYZ",
                            "description": "Universal landing page"
                          },
                          {
                            "type": "Landing Page for Men",
                            "url": "https://startup2050.com/mlp?ref=ABC123XYZ",
                            "description": "Landing page specifically for men"
                          },
                          {
                            "type": "Landing Page for Women",
                            "url": "https://startup2050.com/wlp?ref=ABC123XYZ",
                            "description": "Landing page specifically for women"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/affiliate/stats": {
      "get": {
        "summary": "Get Affiliate Statistics",
        "description": "Retrieves comprehensive affiliate statistics for the authenticated user.",
        "tags": ["Affiliate"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AffiliateStats"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "users_referred": 15,
                        "affiliate_earning_balance": 1250.50,
                        "affiliate_earning_balance_trimmed": "1,250.50",
                        "total_earnings_count": 23,
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/affiliate/referrals-earnings": {
      "get": {
        "summary": "Get Referrals Earnings",
        "description": "Retrieves detailed earnings history from referrals with pagination support.",
        "tags": ["Affiliate"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of records per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ReferralsEarningsResponse"
                    }
                  },
                  "x-examples": {
                    "Example 1": {
                      "error": false,
                      "data": {
                        "referrals": [
                          {
                            "id": 1,
                            "user": {
                              "name": "John Doe",
                              "username": "johndoe123",
                              "profile_picture_url": "https://startup2050.com/images/avatar_male.png"
                            },
                            "earning": 25.50,
                            "original_amount": 100.00,
                            "amount_trimmed": "100.00",
                            "amount_in_lc_trimmed": "25.50",
                            "currency": "USD",
                            "earning_percentage": 25.00,
                            "transaction_id": 12345,
                            "earning_type": "subscription_purchase",
                            "created_at": "2024-03-20T10:00:00Z",
                            "updated_at": "2024-03-20T10:00:00Z",
                            "created_at_local": "2024-03-20T15:00:00+05:00",
                            "created_at_local_formatted": "March 20, 2024 at 3:00 PM"
                          }
                        ],
                        "pagination": {
                          "current_page": 1,
                          "last_page": 3,
                          "per_page": 5,
                          "total": 15
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/help-center/faqs": {
      "get": {
        "summary": "Get All FAQs",
        "description": "Retrieves all available frequently asked questions and their answers.",
        "tags": ["Help Center"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved FAQs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "faqs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FAQ"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/help-center/ai-response": {
      "post": {
        "summary": "Get AI Response",
        "description": "Generates an AI-powered response to user questions using OpenAI's GPT model.",
        "tags": ["Help Center"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["question"],
                "properties": {
                  "question": {
                    "type": "string",
                    "maxLength": 1000,
                    "description": "The user's question",
                    "example": "How do I reset my password?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated AI response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "response": {
                      "type": "string",
                      "description": "AI-generated response in HTML format with Tailwind CSS classes",
                      "example": "<p class=\"text-base text-gray-800 mb-4\">To reset your password, follow these steps:</p><p class=\"text-base text-gray-800 mb-4\">1. Go to the login page</p><p class=\"text-base text-gray-800 mb-4\">2. Click on \"Forgot Password\"</p><p class=\"text-base text-gray-800\">3. Enter your email address</p>"
                    },
                    "raw_response": {
                      "type": "string",
                      "description": "AI-generated response in plain text format (without HTML)",
                      "example": "To reset your password, follow these steps:\n\n1. Go to the login page\n2. Click on \"Forgot Password\"\n3. Enter your email address"
                    },
                    "question_data": {
                      "$ref": "#/components/schemas/HelpdeskQuestion"
                    },
                    "cached": {
                      "type": "boolean",
                      "description": "Indicates whether the response was retrieved from cache",
                      "example": false
                    },
                    "cache_source": {
                      "type": "string",
                      "description": "The source of the cache (e.g., 'database', 'redis')",
                      "example": "database"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - AI service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Unable to generate response at this time. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/help-center/faq-suggestions": {
      "post": {
        "summary": "Get FAQ Suggestions",
        "description": "Provides real-time FAQ suggestions based on user input for better search experience.",
        "tags": ["Help Center"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["query"],
                "properties": {
                  "query": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Search query for FAQ suggestions",
                    "example": "password reset"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved FAQ suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "suggestions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FAQ"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/help-center/mark-resolved": {
      "post": {
        "summary": "Mark Question as Resolved",
        "description": "Marks a helpdesk question as resolved by the user.",
        "tags": ["Help Center"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["question_id"],
                "properties": {
                  "question_id": {
                    "type": "integer",
                    "description": "ID of the question to mark as resolved",
                    "example": 123
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully marked question as resolved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Question marked as resolved"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Question not found or unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Question not found or unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/account/update-username": {
      "post": {
        "summary": "Update Public Username",
        "description": "Updates the user's public username (display name).",
        "tags": ["Account Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["public_username"],
                "properties": {
                  "public_username": {
                    "type": "string",
                    "description": "New public username (3-30 characters, letters, numbers, underscores only)",
                    "minLength": 3,
                    "maxLength": 30,
                    "pattern": "^[a-zA-Z0-9_]+$",
                    "example": "newusername"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Username updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Username updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "public_username": {
                          "type": "string",
                          "example": "newusername"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "public_username": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["This public username is already taken"]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to update username: Database connection error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/account/update-password": {
      "post": {
        "summary": "Update Password",
        "description": "Updates the user's account password.",
        "tags": ["Account Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["current_password", "password", "password_confirmation"],
                "properties": {
                  "current_password": {
                    "type": "string",
                    "description": "Current password for verification",
                    "example": "currentpass123"
                  },
                  "password": {
                    "type": "string",
                    "description": "New password (min 8 chars, must contain uppercase, number, special char)",
                    "minLength": 8,
                    "example": "NewPass123!"
                  },
                  "password_confirmation": {
                    "type": "string",
                    "description": "Confirmation of new password",
                    "example": "NewPass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "current_password": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The current password is incorrect"]
                        },
                        "password": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["Password must contain at least one special character"]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to update password: Database connection error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/account/update-email": {
      "post": {
        "summary": "Update Email Address",
        "description": "Updates the user's email address and sends a verification email.",
        "tags": ["Account Management"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "New email address",
                    "example": "newemail@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Email updated successfully. Please check your inbox to verify your new email address."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "example": "newemail@example.com"
                        },
                        "email_verified_at": {
                          "type": "string",
                          "nullable": true,
                          "example": null
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthenticated."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["This email address is already in use"]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to update email: Database connection error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/onesignal/save-player-id": {
      "post": {
        "summary": "Save OneSignal Player ID",
        "description": "Saves the OneSignal player ID and subscription details for the authenticated user. This endpoint handles multiple device subscriptions per user by creating separate records for each device.",
        "tags": [
          "OneSignal"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "subscription_id"
                ],
                "properties": {
                  "subscription_id": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "OneSignal subscription ID",
                    "example": "subscription_123456789"
                  },
                  "player_id": {
                    "type": "string",
                    "nullable": true,
                    "description": "OneSignal player ID (optional)",
                    "example": "player_987654321"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OneSignal player ID and subscription saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "OneSignal player ID and subscription saved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "subscription_details": {
                          "type": "object",
                          "properties": {
                            "device_os": {
                              "type": "string",
                              "example": "iOS"
                            },
                            "device_type": {
                              "type": "string",
                              "example": "mobile"
                            },
                            "device_model": {
                              "type": "string",
                              "example": "iPhone 14"
                            },
                            "ip": {
                              "type": "string",
                              "example": "192.168.1.1"
                            }
                          }
                        },
                        "user_id": {
                          "type": "integer",
                          "example": 123
                        },
                        "player_id": {
                          "type": "string",
                          "example": "player_987654321"
                        },
                        "subscription_id": {
                          "type": "string",
                          "example": "subscription_123456789"
                        },
                        "onesignal_user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 456
                            },
                            "user_id": {
                              "type": "integer",
                              "example": 123
                            },
                            "player_id": {
                              "type": "string",
                              "example": "player_987654321"
                            },
                            "subscription_id": {
                              "type": "string",
                              "example": "subscription_123456789"
                            },
                            "device_os": {
                              "type": "string",
                              "example": "iOS"
                            },
                            "device_type": {
                              "type": "string",
                              "example": "mobile"
                            },
                            "device_model": {
                              "type": "string",
                              "example": "iPhone 14"
                            },
                            "ip": {
                              "type": "string",
                              "example": "192.168.1.1"
                            },
                            "inactive": {
                              "type": "integer",
                              "example": 0
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-01-01T00:00:00.000000Z"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2024-01-01T00:00:00.000000Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User not authenticated"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "subscription_id": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["The subscription id field is required."]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to save OneSignal player ID and subscription: Database connection error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/logout": {
      "post": {
        "summary": "Logout User",
        "description": "Logs out the authenticated user by invalidating their current access token and optionally deactivating OneSignal subscriptions.",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "onesignal_player_id": {
                    "type": "string",
                    "description": "OneSignal player ID to deactivate",
                    "example": "player_987654321"
                  },
                  "onesignal_subscription_id": {
                    "type": "string",
                    "description": "OneSignal subscription ID to deactivate",
                    "example": "subscription_123456789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User not authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscription/current": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get Current Subscription",
        "description": "Retrieves the authenticated user's current active subscription details.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "security": [{"sanctum": []}],
        "responses": {
          "200": {
            "description": "Success response with current subscription",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": false},
                    "active_subscription": {
                      "oneOf": [
                        {"$ref": "#/components/schemas/UserSubscription"},
                        {"type": "null"}
                      ]
                    }
                  }
                },
                "examples": {
                  "with_subscription": {
                    "summary": "User with active subscription",
                    "value": {
                      "error": false,
                      "active_subscription": {
                        "id": 1,
                        "user_id": 1,
                        "subscription_plan_id": 2,
                        "transaction_id": 123,
                        "transaction_number": "20250125123456",
                        "start_date": "2024-01-01T00:00:00.000000Z",
                        "end_date": "2024-12-31T23:59:59.000000Z",
                        "status": "active",
                        "price": 464.00,
                        "currency": "USD",
                        "days_left": "8 months 15 days 12 hours",
                        "used_months": 3,
                        "price_trimmed": "464",
                        "plan": {
                          "id": 2,
                          "level": 2,
                          "name": "Premium Annual Plan",
                          "description": "Premium subscription plan with advanced features",
                          "duration": 365,
                          "features": [
                            {
                              "title": "All Standard Plan Features",
                              "support": 1
                            },
                            {
                              "title": "Unlimited chats",
                              "support": 1
                            }
                          ]
                        },
                        "currency_details": {
                          "id": 1,
                          "code": "USD",
                          "name": "US Dollar",
                          "symbol": "$"
                        }
                      }
                    }
                  },
                  "no_subscription": {
                    "summary": "User without active subscription",
                    "value": {
                      "error": false,
                      "active_subscription": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          }
        }
      }
    },
    "/subscription/plans": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get Subscription Plans",
        "description": "Retrieves available subscription plans with pricing calculated based on the user's monthly lifestyle support budget.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login\n\n#### Budget Calculation Logic\n- **User's Budget**: Uses the user's current lifestyle support budget or active subscription monthly budget\n- **Partner's Budget**: **DISABLED** - Partner budget functionality is currently disabled in the system\n- **Currency Conversion**: Automatic currency conversion is available for multi-currency support\n- **Fallback**: System uses user's budget for all calculations",
        "security": [{"sanctum": []}],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency code for pricing (defaults to user's preferred currency)",
            "required": false,
            "schema": {"type": "string", "example": "USD"}
          },
          {
            "name": "upgrade",
            "in": "query",
            "description": "Set to 'yes' to show only plans higher than current plan level",
            "required": false,
            "schema": {"type": "string", "enum": ["yes", "no"], "example": "no"}
          },
          {
            "name": "budget_user_id",
            "in": "query",
            "description": "**DISABLED** - Partner's user ID functionality is currently disabled",
            "required": false,
            "schema": {"type": "integer", "example": 123}
          }
        ],
        "responses": {
          "200": {
            "description": "Success response with available plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": false},
                    "budget_user_id": {"type": "integer", "example": 123},
                    "budget_used": {"type": "number", "example": 10000},
                    "plans": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/SubscriptionPlanWithPricing"}
                    },
                    "currency": {"type": "string", "example": "USD"}
                  }
                },
                "example": {
                  "error": false,
                  "budget_user_id": null,
                  "budget_used": 10000,
                  "plans": [
                    {
                      "id": 1,
                      "level": 1,
                      "name": "Standard Annual Plan",
                      "description": "Standard subscription plan with basic features",
                      "duration": 365,
                      "price": 696.00,
                      "price_trimmed": "696",
                      "currency": "USD",
                      "currency_symbol": "$",
                      "currency_detail": {
                        "id": 1,
                        "code": "USD",
                        "name": "US Dollar",
                        "symbol": "$"
                      },
                      "icon_url": "https://startup2050.com/images/standard-plan-icon.png",
                      "features": [
                        {
                          "title": "All Standard Plan Features",
                          "support": 1
                        },
                        {
                          "title": "Unlimited chats",
                          "support": 1
                        },
                        {
                          "title": "Up to 10 Test Moons",
                          "support": 1
                        }
                      ],
                      "price_calculation_contents": {
                        "html": "<div class='space-y-4 text-sm'>...</div>",
                        "raw": [
                          "Your Standard annual subscription's cost is calculated as 20% of the monthly budget that you set for your future partner in the projection of 1 year:",
                          "Your calculation: 10000.00USD × 12 months × 20% = 2400.00 USD",
                          "For this amount, you get access to all major MatchMeMuch features for the period of one year.",
                          "By buying a subscription, sponsors show the seriousness of their intent and their financial capacity. At the same time, the annual package allows to use MatchMeMuch service for extended time.",
                          "The second and subsequent years cost twice less than the initial subscription's cost."
                        ]
                      }
                    },
                    {
                      "id": 2,
                      "level": 2,
                      "name": "Premium Annual Plan",
                      "description": "Premium subscription plan with advanced features",
                      "duration": 365,
                      "price": 928.00,
                      "price_trimmed": "928",
                      "currency": "USD",
                      "currency_symbol": "$",
                      "currency_detail": {
                        "id": 1,
                        "code": "USD",
                        "name": "US Dollar",
                        "symbol": "$"
                      },
                      "icon_url": "https://startup2050.com/images/premium-plan-icon.png",
                      "features": [
                        {
                          "title": "All Standard Plan Features",
                          "support": 1
                        },
                        {
                          "title": "Training and continuous assistance by MMM's staff",
                          "support": 1
                        },
                        {
                          "title": "Travel and booking assistance for mutual travels",
                          "support": 1
                        }
                      ],
                      "price_calculation_contents": {
                        "html": "<div class='space-y-4 text-sm'>...</div>",
                        "raw": [
                          "Your Premium annual subscription's cost is calculated as 40% of the monthly budget that you set for your future partner in the projection of 1 year:",
                          "Your calculation: 10000.00USD × 12 months × 40% = 4800.00 USD",
                          "For this amount, you get access to all major MatchMeMuch features for the period of one year.",
                          "By buying a subscription, sponsors show the seriousness of their intent and their financial capacity. At the same time, the annual package allows to use MatchMeMuch service for extended time.",
                          "The second and subsequent years cost twice less than the initial subscription's cost."
                        ]
                      }
                    }
                  ],
                  "currency": "USD"
                }
              }
            }
          },
          "400": {
            "description": "Error response when no plans available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": true},
                    "message": {"type": "string", "example": "There is no available plan for subscription at the moment. Please contact support."}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          }
        }
      }
    },
    "/subscription/submit": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Submit Subscription",
        "description": "Submits a subscription purchase request. The system will create a transaction and process the payment.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "security": [{"sanctum": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["subscription_id", "method"],
                "description": "Request body for subscription submission with validation rules:\n- `subscription_id`: Must be a valid plan ID\n- `method`: Required payment method\n- `balance_amount`: Min: 0, Max: available balance\n- `amount`: Min: 0\n- `budget_user_id`: Ignored if provided (disabled functionality)",
                "properties": {
                  "subscription_id": {
                    "type": "integer",
                    "description": "ID of the subscription plan to purchase",
                    "example": 2
                  },
                  "method": {
                    "type": "string",
                    "description": "Payment method (e.g., 'BALANCE', 'BTC', 'USDT')",
                    "example": "BALANCE"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Additional comment for the transaction",
                    "example": "Annual subscription purchase"
                  },
                  "balance_amount": {
                    "type": "number",
                    "description": "Amount to use from user balance",
                    "minimum": 0,
                    "example": 100.00
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency for the transaction",
                    "example": "USD"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Total transaction amount",
                    "minimum": 0,
                    "example": 464.00
                  },
                  "budget_user_id": {
                    "type": "integer",
                    "description": "**DISABLED** - Partner's user ID functionality is currently disabled",
                    "example": 123
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": false},
                    "message": {"type": "string", "example": "Subscription deposit submitted successfully"},
                    "transaction_id": {"type": "integer", "example": 123},
                    "transaction_number": {"type": "string", "example": "20250125123456"},
                    "redirect_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "External payment URL for completion (if applicable)",
                      "example": "https://checkout.stripe.com/pay/cs_test_..."
                    },
                    "webview_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "Internal payment waiting page URL with authentication token",
                      "example": "https://startup2050.com/finance/payment/waiting/20250125123456?token=abc123..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": true},
                    "message": {"type": "string"}
                  }
                },
                "examples": {
                  "invalid_plan": {
                    "summary": "Invalid Plan",
                    "value": {
                      "error": true,
                      "message": "Subscription plan is not valid"
                    }
                  },
                  "downgrade_attempt": {
                    "summary": "Downgrade Attempt",
                    "value": {
                      "error": true,
                      "message": "You cannot downgrade your subscription."
                    }
                  },
                  "already_subscribed": {
                    "summary": "Already Subscribed",
                    "value": {
                      "error": true,
                      "message": "You are already on this subscription plan."
                    }
                  },
                  "insufficient_balance": {
                    "summary": "Insufficient Balance",
                    "value": {
                      "error": true,
                      "message": "Insufficient balance for the requested amount"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          }
        }
      }
    },
    "/subscription/calculate-annual-price": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Calculate Annual Subscription Price",
        "description": "Preview annual subscription cost based on monthly budget and selected plan. Does not create a transaction. Pricing formula: Standard Plan (Level 1) = Monthly Budget × 12 × 20%, Premium Plan (Level 2) = Monthly Budget × 12 × 40%, VIP Plan (Level 3) = Monthly Budget × 12 × 60%.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "security": [{"sanctum": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["monthly_budget", "plan_id"],
                "properties": {
                  "monthly_budget": {
                    "type": "number",
                    "description": "Monthly lifestyle support budget amount",
                    "example": 10000,
                    "minimum": 0
                  },
                  "plan_id": {
                    "type": "integer",
                    "description": "Subscription plan ID (1=Standard, 2=Premium, 3=VIP)",
                    "example": 2,
                    "enum": [1, 2, 3]
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency code (optional, defaults to user's currency)",
                    "example": "USD"
                  }
                }
              },
              "examples": {
                "calculate_premium": {
                  "summary": "Calculate Premium Plan Price",
                  "value": {
                    "monthly_budget": 10000,
                    "plan_id": 2,
                    "currency": "USD"
                  }
                },
                "calculate_standard": {
                  "summary": "Calculate Standard Plan Price",
                  "value": {
                    "monthly_budget": 5000,
                    "plan_id": 1,
                    "currency": "USD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price calculation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": false
                    },
                    "annual_price": {
                      "type": "number",
                      "format": "float",
                      "description": "Calculated annual subscription price",
                      "example": 48000.00
                    },
                    "formatted_price": {
                      "type": "string",
                      "description": "Formatted price with thousand separators",
                      "example": "48000"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency code",
                      "example": "USD"
                    },
                    "currency_symbol": {
                      "type": "string",
                      "description": "Currency symbol",
                      "example": "$"
                    },
                    "monthly_budget": {
                      "type": "number",
                      "description": "Monthly budget used in calculation",
                      "example": 10000
                    },
                    "plan_id": {
                      "type": "integer",
                      "description": "Plan ID used in calculation",
                      "example": 2
                    }
                  }
                },
                "examples": {
                  "premium_plan": {
                    "summary": "Premium Plan Calculation",
                    "value": {
                      "error": false,
                      "annual_price": 48000.00,
                      "formatted_price": "48,000",
                      "currency": "USD",
                      "currency_symbol": "$",
                      "monthly_budget": 10000,
                      "plan_id": 2
                    }
                  },
                  "standard_plan": {
                    "summary": "Standard Plan Calculation",
                    "value": {
                      "error": false,
                      "annual_price": 12000.00,
                      "formatted_price": "12,000",
                      "currency": "USD",
                      "currency_symbol": "$",
                      "monthly_budget": 5000,
                      "plan_id": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid plan ID or monthly budget"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ValidationErrorResponse"}
              }
            }
          }
        }
      }
    },
    "/subscription/budget-upgrade": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Calculate Budget Upgrade Pricing",
        "description": "Calculate the additional payment required when upgrading monthly budget for users with active subscriptions. If `amount` parameter is provided, calculates upgrade cost from current budget to the new amount. If no `amount` parameter is provided, uses the `pending_lifestyle_support_budget` from user's financial profile.\n\n#### Important Notes\n- Only works for users with active subscriptions\n- Returns error if user has no active subscription\n- Returns error if upgrade amount is less than or equal to current budget\n- Returns error if no pending budget exists (when amount not provided)\n- The `pricing_calculation_details` array provides step-by-step calculation for UI display\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "security": [{"sanctum": []}],
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "The new budget amount for upgrade calculation (optional). If not provided, uses pending_lifestyle_support_budget from financial profile.",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10000,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response with budget upgrade information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": false},
                    "active_subscription": {"$ref": "#/components/schemas/BudgetUpgradeSubscription"},
                    "financial_profile": {"$ref": "#/components/schemas/FinancialProfile"}
                  }
                },
                "example": {
                  "error": false,
                  "active_subscription": {
                    "id": 123,
                    "monthly_budget": 5000,
                    "monthly_budget_trimmed": "5,000",
                    "new_monthly_budget": 10000,
                    "new_monthly_budget_trimmed": "10,000",
                    "price": 12000.00,
                    "price_trimmed": "12,000",
                    "new_pricing": 24000.00,
                    "new_pricing_trimmed": "24,000",
                    "upgrade_price": 12000.00,
                    "upgrade_price_trimmed": "12,000",
                    "currency": "USD",
                    "plan": {
                      "id": 1,
                      "name": "Standard",
                      "level": 1
                    },
                    "pricing_calculation_details": [
                      {
                        "label": "Current",
                        "calculation": "5,000 x 12 x 20%",
                        "results": "12,000"
                      },
                      {
                        "label": "New",
                        "calculation": "10,000 x 12 x 20%",
                        "results": "24,000"
                      },
                      {
                        "label": "Additional Payment",
                        "calculation": "24,000 - 12,000",
                        "results": "12,000"
                      }
                    ]
                  },
                  "financial_profile": {
                    "currency": "USD",
                    "lifestyle_support_budget": 5000,
                    "pending_lifestyle_support_budget": 10000
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": true},
                    "message": {"type": "string"}
                  }
                },
                "examples": {
                  "no_pending_budget": {
                    "summary": "No Pending Budget",
                    "value": {
                      "error": true,
                      "message": "You don't have any pending budget upgrade."
                    }
                  },
                  "no_active_subscription": {
                    "summary": "No Active Subscription",
                    "value": {
                      "error": true,
                      "message": "You are not subscribed to any plan."
                    }
                  },
                  "invalid_budget_difference": {
                    "summary": "Invalid Budget Difference",
                    "value": {
                      "error": true,
                      "message": "The difference between the pending budget and the active subscription monthly budget is 0."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Subscription"],
        "summary": "Submit Budget Upgrade",
        "description": "Submits a budget upgrade request for users with pending budget changes.\n\n#### Authentication\n- Requires authentication token in the request header\n- Token must be obtained through login",
        "security": [{"sanctum": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["method"],
                "description": "Request body for budget upgrade submission with validation rules:\n- `method`: Required payment method\n- `balance_amount`: Min: 0, Max: available balance\n- `amount`: Min: 0",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "Payment method (e.g., 'BALANCE', 'BTC', 'USDT')",
                    "example": "BALANCE"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Additional comment for the transaction",
                    "example": "Budget upgrade payment"
                  },
                  "balance_amount": {
                    "type": "number",
                    "description": "Amount to use from user balance",
                    "minimum": 0,
                    "example": 50.00
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency for the transaction",
                    "example": "USD"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Total transaction amount",
                    "minimum": 0,
                    "example": 116.00
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": false},
                    "message": {"type": "string", "example": "Budget upgrade submitted successfully"},
                    "transaction_id": {"type": "integer", "example": 124},
                    "transaction_number": {"type": "string", "example": "20250125123457"},
                    "redirect_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "External payment URL for completion (if applicable)",
                      "example": "https://checkout.stripe.com/pay/cs_test_..."
                    },
                    "webview_url": {
                      "type": "string",
                      "nullable": true,
                      "description": "Internal payment waiting page URL with authentication token",
                      "example": "https://startup2050.com/finance/payment/waiting/20250125123457?token=def456..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error responses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "boolean", "example": true},
                    "message": {"type": "string"}
                  }
                },
                "examples": {
                  "invalid_subscription": {
                    "summary": "Invalid Subscription",
                    "value": {
                      "error": true,
                      "message": "Subscription plan is not valid"
                    }
                  },
                  "insufficient_balance": {
                    "summary": "Insufficient Balance",
                    "value": {
                      "error": true,
                      "message": "Insufficient balance for the requested amount"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/UnauthorizedError"}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MessageUser": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "username": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "MessageMarkdown": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "value": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": { "type": "string" },
                "value": { "type": "string" }
              }
            }
          }
        }
      },
      "MessageObject": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "rid": { "type": "string" },
          "msg": { "type": "string" },
          "attachments": {
            "type": "array",
            "items": { "type": "object" }
          },
          "ts": { "type": "string", "format": "date-time" },
          "u": { "$ref": "#/components/schemas/MessageUser" },
          "_updatedAt": { "type": "string", "format": "date-time" },
          "urls": {
            "type": "array",
            "items": { "type": "object" }
          },
          "mentions": {
            "type": "array",
            "items": { "type": "object" }
          },
          "channels": {
            "type": "array",
            "items": { "type": "object" }
          },
          "md": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessageMarkdown" }
          },
          "ts_in_unix": { "type": "integer" },
          "has_been_read": { "type": "boolean" },
          "ts_formatted": { "type": "string" },
          "ts_formatted_full": { "type": "string" },
          "ts_formatted_local": { "type": "string" },
          "ts_formatted_full_local": { "type": "string" },
          "ts_date_formatted": { "type": "string" },
          "is_sent_by_logged_in_user": { "type": "boolean" },
          "editable": { "type": "boolean" },
          "is_edited": { "type": "boolean" },
          "msg_shortened": { "type": "string" }
        }
      },
      "ChatPartner": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "login_name": { "type": "string" },
          "public_username": { "type": "string" },
          "first_name": { "type": "string", "nullable": true },
          "last_name": { "type": "string", "nullable": true },
          "email": { "type": "string", "nullable": true },
          "email_verified_at": { "type": "string", "nullable": true },
          "hide_images": { "type": "integer" },
          "email_verified": { "type": "integer" },
          "gender": { "type": "string" },
          "partner_preference": { "type": "string", "nullable": true },
          "relationship_goals": { "type": "string", "nullable": true },
          "role": { "type": "string" },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "deleted_at": { "type": "string", "nullable": true },
          "rocketchat_registered": { "type": "integer" },
          "rocketchat_user_id": { "type": "string" },
          "rocketchat_username": { "type": "string" },
          "rocketchat_token": { "type": "string", "nullable": true },
          "rocketchat_token_expires_at": { "type": "string", "nullable": true },
          "timeoffset": { "type": "integer" },
          "affiliate_code": { "type": "string", "nullable": true },
          "referred_by_code": { "type": "string", "nullable": true },
          "referred_by_user_id": { "type": "integer", "nullable": true },
          "profile_picture_album_url": { "type": "string" },
          "profile_picture_url": { "type": "string" },
          "full_name": { "type": "string" },
          "lifestyle_support_budget_in_sc": { 
            "type": "number",
            "description": "Chat partner's lifestyle support budget in system currency (used for budget comparison)",
            "example": 5000,
            "nullable": true
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "rid": { "type": "string" },
          "u": { "$ref": "#/components/schemas/MessageUser" },
          "_updatedAt": { "type": "string", "format": "date-time" },
          "alert": { "type": "boolean" },
          "fname": { "type": "string" },
          "groupMentions": { "type": "integer" },
          "name": { "type": "string" },
          "open": { "type": "boolean" },
          "t": { "type": "string" },
          "ts": { "type": "string", "format": "date-time" },
          "unread": { "type": "integer" },
          "userMentions": { "type": "integer" },
          "ls": { "type": "string", "format": "date-time" },
          "ls_in_unix": { "type": "integer" },
          "ls_in_date": { "type": "string" },
          "ls_formatted": { "type": "string" },
          "ls_formatted_full": { "type": "string" },
          "ts_in_unix": { "type": "integer" },
          "ts_in_date": { "type": "string" },
          "ts_formatted": { "type": "string" },
          "ts_formatted_full": { "type": "string" },
          "has_unread_messages": { "type": "boolean" },
          "unread_count": { "type": "integer" }
        }
      },
      "LastMessage": {
        "type": "object",
        "properties": {
          "rid": { "type": "string" },
          "msg": { "type": "string" },
          "attachments": {
            "type": "array",
            "items": { "type": "object" }
          },
          "ts": { "type": "string", "format": "date-time" },
          "u": { "$ref": "#/components/schemas/MessageUser" },
          "_id": { "type": "string" },
          "_updatedAt": { "type": "string", "format": "date-time" },
          "urls": {
            "type": "array",
            "items": { "type": "object" }
          },
          "mentions": {
            "type": "array",
            "items": { "type": "object" }
          },
          "channels": {
            "type": "array",
            "items": { "type": "object" }
          },
          "md": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/MessageMarkdown" }
          },
          "ts_formatted_full_local": { "type": "string" },
          "msg_shortened": { "type": "string" }
        }
      },
      "ChatRoom": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "t": { "type": "string" },
          "usernames": {
            "type": "array",
            "items": { "type": "string" }
          },
          "usersCount": { "type": "integer" },
          "msgs": { "type": "integer" },
          "ts": { "type": "string", "format": "date-time" },
          "uids": {
            "type": "array",
            "items": { "type": "string" }
          },
          "default": { "type": "boolean" },
          "ro": { "type": "boolean" },
          "sysMes": { "type": "boolean" },
          "_USERNAMES": {
            "type": "array",
            "items": { "type": "string" }
          },
          "_updatedAt": { "type": "string", "format": "date-time" },
          "lastMessage": { "$ref": "#/components/schemas/LastMessage" },
          "lm": { "type": "string", "format": "date-time" },
          "subscription": { "$ref": "#/components/schemas/Subscription" },
          "chat_partner": { "$ref": "#/components/schemas/ChatPartner" },
          "updated_at_in_unixms": { "type": "integer" },
          "ts_local": { "type": "string", "format": "date-time" },
          "ts_formatted_local": { "type": "string" },
          "message_unread": { "type": "boolean" },
          "chatroom_meta": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "room_id": { "type": "integer" },
              "rocketchat_room_id": { "type": "string" },
              "user_id": { "type": "integer" },
              "rocketchat_user_id": { "type": "string" },
              "rocketchat_username": { "type": "string" },
              "last_seen_at": { "type": "integer" },
              "unread_count": { "type": "integer" },
              "closed_at": { "type": "string", "nullable": true },
              "deleted_messages_count": { "type": "integer" },
              "created_at": { "type": "string", "format": "date-time" },
              "updated_at": { "type": "string", "format": "date-time" },
              "deleted_at": { "type": "string", "nullable": true },
              "archived_at": { "type": "string", "nullable": true },
              "archived": { "type": "integer" },
              "mute": { "type": "integer" },
              "last_seen_at_ts": { "type": "string" },
              "last_seen_at_ts_local": { "type": "string" }
            }
          },
          "partners_room_meta": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "room_id": { "type": "integer" },
              "rocketchat_room_id": { "type": "string" },
              "user_id": { "type": "integer" },
              "rocketchat_user_id": { "type": "string" },
              "rocketchat_username": { "type": "string" },
              "last_seen_at": { "type": "integer" },
              "unread_count": { "type": "integer" },
              "closed_at": { "type": "string", "nullable": true },
              "deleted_messages_count": { "type": "integer" },
              "created_at": { "type": "string", "format": "date-time" },
              "updated_at": { "type": "string", "format": "date-time" },
              "deleted_at": { "type": "string", "nullable": true },
              "archived_at": { "type": "string", "nullable": true },
              "archived": { "type": "integer" },
              "mute": { "type": "integer" },
              "last_seen_at_ts": { "type": "string" },
              "last_seen_at_ts_local": { "type": "string" }
            }
          },
          "is_archived": { "type": "boolean" },
          "chat_disabled": { "type": "boolean" },
          "is_deleted_after_last_message": { "type": "boolean" },
          "message_hidden": { 
            "type": "boolean",
            "description": "Indicates if messages should be hidden due to budget or subscription requirements",
            "example": false
          },
          "message_hidden_text": { 
            "type": "string",
            "description": "Text to display when messages are hidden (e.g., 'Subscribe now to view message' or 'Upgrade monthly budget to view message')",
            "example": ""
          }
        }
      },
      "ChatRoomData": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "t": { "type": "string" },
          "usernames": {
            "type": "array",
            "items": { "type": "string" }
          },
          "usersCount": { "type": "integer" },
          "msgs": { "type": "integer" },
          "ts": { "type": "string", "format": "date-time" },
          "uids": {
            "type": "array",
            "items": { "type": "string" }
          },
          "default": { "type": "boolean" },
          "ro": { "type": "boolean" },
          "sysMes": { "type": "boolean" },
          "_USERNAMES": {
            "type": "array",
            "items": { "type": "string" }
          },
          "_updatedAt": { "type": "string", "format": "date-time" },
          "lastMessage": { "$ref": "#/components/schemas/LastMessage" },
          "lm": { "type": "string", "format": "date-time" },
          "subscription": { "$ref": "#/components/schemas/Subscription" },
          "chat_partner": { "$ref": "#/components/schemas/ChatPartner" },
          "updated_at_in_unixms": { "type": "integer" },
          "ts_local": { "type": "string", "format": "date-time" },
          "ts_formatted_local": { "type": "string" },
          "message_unread": { "type": "boolean" },
          "chatroom_meta": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "room_id": { "type": "integer" },
              "rocketchat_room_id": { "type": "string" },
              "user_id": { "type": "integer" },
              "rocketchat_user_id": { "type": "string" },
              "rocketchat_username": { "type": "string" },
              "last_seen_at": { "type": "integer" },
              "unread_count": { "type": "integer" },
              "closed_at": { "type": "string", "nullable": true },
              "deleted_messages_count": { "type": "integer" },
              "created_at": { "type": "string", "format": "date-time" },
              "updated_at": { "type": "string", "format": "date-time" },
              "deleted_at": { "type": "string", "nullable": true },
              "archived_at": { "type": "string", "nullable": true },
              "archived": { "type": "integer" },
              "mute": { "type": "integer" },
              "last_seen_at_ts": { "type": "string" },
              "last_seen_at_ts_local": { "type": "string" }
            }
          },
          "partners_room_meta": {
            "type": "object",
            "properties": {
              "id": { "type": "integer" },
              "room_id": { "type": "integer" },
              "rocketchat_room_id": { "type": "string" },
              "user_id": { "type": "integer" },
              "rocketchat_user_id": { "type": "string" },
              "rocketchat_username": { "type": "string" },
              "last_seen_at": { "type": "integer" },
              "unread_count": { "type": "integer" },
              "closed_at": { "type": "string", "nullable": true },
              "deleted_messages_count": { "type": "integer" },
              "created_at": { "type": "string", "format": "date-time" },
              "updated_at": { "type": "string", "format": "date-time" },
              "deleted_at": { "type": "string", "nullable": true },
              "archived_at": { "type": "string", "nullable": true },
              "archived": { "type": "integer" },
              "mute": { "type": "integer" },
              "last_seen_at_ts": { "type": "string" },
              "last_seen_at_ts_local": { "type": "string" }
            }
          },
          "is_archived": { "type": "boolean" },
          "chat_disabled": { "type": "boolean" },
          "is_deleted_after_last_message": { "type": "boolean" },
          "message_hidden": { 
            "type": "boolean",
            "description": "Indicates if messages should be hidden due to budget or subscription requirements",
            "example": false
          },
          "message_hidden_text": { 
            "type": "string",
            "description": "Text to display when messages are hidden (e.g., 'Subscribe now to view message' or 'Upgrade monthly budget to view message')",
            "example": ""
          }
        }
      },
      "ContractListResponse": {
        "type": "object",
        "properties": {
          "current_page": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contract"
            }
          },
          "first_page_url": {
            "type": "string"
          },
          "from": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "last_page_url": {
            "type": "string"
          },
          "next_page_url": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string"
          },
          "per_page": {
            "type": "integer"
          },
          "prev_page_url": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "Contract": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "contract_id": {
            "type": "string"
          },
          "contract_type": {
            "type": "string",
            "enum": ["test_moon", "preliminary", "main"]
          },
          "contract_type_str": {
            "type": "string"
          },
          "sponsor_id": {
            "type": "integer"
          },
          "seeker_id": {
            "type": "integer"
          },
          "duration_days": {
            "type": "integer"
          },
          "monthly_amount": {
            "type": "number"
          },
          "monthly_amount_formatted": {
            "type": "string"
          },
          "monthly_budget_per_child": {
            "type": "number"
          },
          "financial_gift_per_milestone": {
            "type": "number"
          },
          "financial_gift_upon_marriage": {
            "type": "number"
          },
          "relationship_termination_compensation": {
            "type": "number"
          },
          "capital_growth_bonus": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "financial_settings": {
            "type": "object"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "start_date_str": {
            "type": "string"
          },
          "end_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end_date_str": {
            "type": "string"
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_date_str": {
            "type": "string"
          },
          "paused_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "stopped_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["awaiting_sponsor_approval", "awaiting_seeker_approval", "active", "paused", "expired", "stopped", "rejected"]
          },
          "status_str": {
            "type": "string"
          },
          "status_bg_color": {
            "type": "string",
            "description": "Background color for status styling"
          },
          "status_text_color": {
            "type": "string",
            "description": "Text color for status styling"
          },
          "status_classes_str": {
            "type": "string"
          },
          "is_test_moon": {
            "type": "boolean"
          },
          "is_preliminary": {
            "type": "boolean"
          },
          "is_main": {
            "type": "boolean"
          },
          "official_agreement_signed": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "sponsor": {
            "$ref": "#/components/schemas/ContractUser"
          },
          "seeker": {
            "$ref": "#/components/schemas/ContractUser"
          },
          "template": {
            "$ref": "#/components/schemas/ContractTemplate"
          },
          "partner": {
            "$ref": "#/components/schemas/ContractUser"
          },
          "is_sponsor": {
            "type": "boolean"
          },
          "is_seeker": {
            "type": "boolean"
          },
          "can_be_changed": {
            "type": "boolean"
          },
          "can_be_extended": {
            "type": "boolean"
          },
          "can_be_upgraded": {
            "type": "boolean"
          },
          "can_be_stopped": {
            "type": "boolean"
          },
          "can_be_restarted": {
            "type": "boolean"
          },
          "total_duration_days": {
            "type": "integer"
          }
        }
      },
      "ContractUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "public_username": {
            "type": "string"
          }
        }
      },
      "ContractTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contract_type": {
            "type": "string",
            "enum": ["test_moon", "preliminary", "main"]
          },
          "monthly_amount": {
            "type": "number"
          },
          "monthly_budget_per_child": {
            "type": "number"
          },
          "financial_gift_per_milestone": {
            "type": "number"
          },
          "financial_gift_upon_marriage": {
            "type": "string"
          },
          "relationship_termination_compensation": {
            "type": "number"
          },
          "capital_growth_bonus": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "financial_settings": {
            "type": "object"
          },
          "default_duration_days": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "created_by": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by_user": {
            "$ref": "#/components/schemas/ContractUser"
          }
        }
      },
      "CreateContractRequest": {
        "type": "object",
        "required": ["partner_username", "duration_days"],
        "properties": {
          "partner_username": {
            "type": "string",
            "description": "Public username of the partner to offer contract to"
          },
          "duration_days": {
            "type": "integer",
            "description": "Contract duration in days",
            "minimum": 30,
            "maximum": 365
          },
          "monthly_amount": {
            "type": "number",
            "description": "Monthly payment amount",
            "minimum": 0
          },
          "monthly_budget_per_child": {
            "type": "number",
            "description": "Monthly budget per child",
            "minimum": 0
          },
          "financial_gift_per_milestone": {
            "type": "number",
            "description": "Financial gift per milestone",
            "minimum": 0
          },
          "financial_gift_upon_marriage": {
            "type": "number",
            "description": "Financial gift upon marriage",
            "minimum": 0
          },
          "relationship_termination_compensation": {
            "type": "number",
            "description": "Relationship termination compensation",
            "minimum": 0
          },
          "capital_growth_bonus": {
            "type": "number",
            "description": "Capital growth bonus percentage",
            "minimum": 0,
            "maximum": 100
          },
          "currency": {
            "type": "string",
            "description": "Currency code, 3 characters",
            "maxLength": 3,
            "default": "USD"
          },
          "financial_settings": {
            "type": "object",
            "description": "Additional financial configuration"
          },
          "template_id": {
            "type": "integer",
            "description": "ID of contract template to use"
          }
        }
      },
      "CreateContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "GetContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "contract": {
            "$ref": "#/components/schemas/ContractWithActions"
          }
        }
      },
      "ContractWithActions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Contract"
          },
          {
            "type": "object",
            "properties": {
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContractAction"
                }
              }
            }
          }
        ]
      },
      "ContractAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "contract_id": {
            "type": "integer"
          },
          "action_type": {
            "type": "string",
            "enum": ["offer", "extend", "start_next_stage", "change", "stop", "restart"]
          },
          "status": {
            "type": "string",
            "enum": ["pending", "approved", "completed", "rejected"]
          },
          "status_str": {
            "type": "string"
          },
          "status_bg_color": {
            "type": "string",
            "description": "Background color for status styling"
          },
          "status_text_color": {
            "type": "string",
            "description": "Text color for status styling"
          },
          "status_classes_str": {
            "type": "string"
          },
          "action_data": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "example": "change"
              },
              "updates": {
                "type": "object",
                "properties": {
                  "duration_days": {
                    "type": "object",
                    "properties": {
                      "new": {
                        "type": "integer",
                        "example": 65
                      },
                      "old": {
                        "type": "integer",
                        "example": 35
                      },
                      "label": {
                        "type": "string",
                        "example": "Duration (Days)"
                      }
                    }
                  },
                  "monthly_amount": {
                    "type": "object",
                    "properties": {
                      "new": {
                        "type": "integer",
                        "example": 75000
                      },
                      "old": {
                        "type": "string",
                        "example": "25000.00"
                      },
                      "label": {
                        "type": "string",
                        "example": "Monthly Budget"
                      },
                      "old_formatted": {
                        "type": "string",
                        "example": "25,000"
                      },
                      "new_formatted": {
                        "type": "string",
                        "example": "75,000"
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "action": "change",
              "updates": {
                "duration_days": {
                  "new": 65,
                  "old": 35,
                  "label": "Duration (Days)"
                },
                "monthly_amount": {
                  "new": 75000,
                  "old": "25000.00",
                  "label": "Monthly Budget",
                  "old_formatted": "25,000",
                  "new_formatted": "75,000"
                }
              }
            }
          },
          "description": {
            "type": "string"
          },
          "performed_at": {
            "type": "string",
            "format": "date-time"
          },
          "performed_at_local": {
            "type": "string",
            "format": "date-time"
          },
          "performed_at_local_date_formatted": {
            "type": "string"
          },
          "approved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approved_at_local": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approved_at_local_date_formatted": {
            "type": "string",
            "nullable": true
          },
          "rejected_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rejected_at_local": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "rejected_at_local_date_formatted": {
            "type": "string",
            "nullable": true
          },
          "rejection_reason": {
            "type": "string",
            "nullable": true
          },
          "performed_by": {
            "type": "integer"
          },
          "performed_by_user": {
            "$ref": "#/components/schemas/ContractUser"
          },
          "approved_by": {
            "type": "integer",
            "nullable": true
          },
          "approved_by_user": {
            "$ref": "#/components/schemas/ContractUser",
            "nullable": true
          },
          "rejected_by": {
            "type": "integer",
            "nullable": true
          },
          "rejected_by_user": {
            "$ref": "#/components/schemas/ContractUser",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetTemplatesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractTemplateFull"
            }
          }
        }
      },
      "ContractTemplateFull": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "contract_type": {
            "type": "string",
            "enum": ["test_moon", "preliminary", "main"]
          },
          "monthly_amount": {
            "type": "number"
          },
          "monthly_budget_per_child": {
            "type": "number"
          },
          "financial_gift_per_milestone": {
            "type": "number"
          },
          "financial_gift_upon_marriage": {
            "type": "number"
          },
          "relationship_termination_compensation": {
            "type": "number"
          },
          "capital_growth_bonus": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "financial_settings": {
            "type": "object"
          },
          "default_duration_days": {
            "type": "integer"
          },
          "is_public": {
            "type": "boolean"
          },
          "created_by": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by_user": {
            "$ref": "#/components/schemas/ContractUser"
          }
        }
      },
      "CreateTemplateRequest": {
        "type": "object",
        "required": ["name", "contract_type", "default_duration_days"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "contract_type": {
            "type": "string",
            "description": "Type of contract",
            "enum": ["test_moon", "preliminary", "main"]
          },
          "monthly_amount": {
            "type": "number",
            "description": "Default monthly amount",
            "minimum": 0
          },
          "monthly_budget_per_child": {
            "type": "number",
            "description": "Monthly budget per child",
            "minimum": 0
          },
          "financial_gift_per_milestone": {
            "type": "number",
            "description": "Financial gift per milestone",
            "minimum": 0
          },
          "financial_gift_upon_marriage": {
            "type": "number",
            "description": "Financial gift upon marriage",
            "minimum": 0
          },
          "relationship_termination_compensation": {
            "type": "number",
            "description": "Relationship termination compensation",
            "minimum": 0
          },
          "capital_growth_bonus": {
            "type": "number",
            "description": "Capital growth bonus percentage",
            "minimum": 0,
            "maximum": 100
          },
          "currency": {
            "type": "string",
            "description": "Currency code, 3 characters",
            "maxLength": 3,
            "default": "USD"
          },
          "financial_settings": {
            "type": "object",
            "description": "Default financial configuration"
          },
          "default_duration_days": {
            "type": "integer",
            "description": "Default duration in days",
            "minimum": 30,
            "maximum": 365
          },
          "is_public": {
            "type": "boolean",
            "description": "Whether template is public",
            "default": false
          }
        }
      },
      "CreateTemplateResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/ContractTemplateFull"
          }
        }
      },
      "ApproveContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "sub_messages": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "RejectContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ExtendContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ContractAction"
          }
        }
      },
      "ChangeContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ContractAction"
          }
        }
      },
      "StartNextStageRequest": {
        "type": "object",
        "required": ["new_contract_type"],
        "properties": {
          "new_contract_type": {
            "type": "string",
            "description": "New contract type",
            "enum": ["preliminary", "main"]
          },
          "monthly_amount": {
            "type": "number",
            "description": "New monthly amount",
            "minimum": 0
          },
          "monthly_budget_per_child": {
            "type": "number",
            "description": "Monthly budget per child",
            "minimum": 0
          },
          "financial_gift_per_milestone": {
            "type": "number",
            "description": "Financial gift per milestone",
            "minimum": 0
          },
          "financial_gift_upon_marriage": {
            "type": "number",
            "description": "Financial gift upon marriage",
            "minimum": 0
          },
          "relationship_termination_compensation": {
            "type": "number",
            "description": "Relationship termination compensation",
            "minimum": 0
          },
          "capital_growth_bonus": {
            "type": "number",
            "description": "Capital growth bonus percentage",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "StartNextStageResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ContractAction"
          }
        }
      },
      "ChangeContractRequest": {
        "type": "object",
        "properties": {
          "duration_days": {
            "type": "integer",
            "description": "New duration in days",
            "minimum": 30,
            "maximum": 365
          },
          "monthly_amount": {
            "type": "number",
            "description": "New monthly amount",
            "minimum": 0
          },
          "monthly_budget_per_child": {
            "type": "number",
            "description": "Monthly budget per child",
            "minimum": 0
          },
          "financial_gift_per_milestone": {
            "type": "number",
            "description": "Financial gift per milestone",
            "minimum": 0
          },
          "financial_gift_upon_marriage": {
            "type": "number",
            "description": "Financial gift upon marriage",
            "minimum": 0
          },
          "relationship_termination_compensation": {
            "type": "number",
            "description": "Relationship termination compensation",
            "minimum": 0
          },
          "capital_growth_bonus": {
            "type": "number",
            "description": "Capital growth bonus percentage",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "StopContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "sub_messages": {
            "type": "string"
          },
          "cool_off_ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "RestartContractResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "ApproveActionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "RejectActionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ConfirmChangesResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "contract": {
            "$ref": "#/components/schemas/Contract"
          }
        }
      },
      "HasActiveContractsResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "active_contracts": {
            "type": "integer"
          },
          "has_active_contracts": {
            "type": "boolean"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },

      "SupportTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Support ticket ID"
          },
          "ticket_number": {
            "type": "string",
            "description": "Auto-generated ticket number"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "description": "User ID (null for guest tickets)"
          },
          "guest_email": {
            "type": "string",
            "nullable": true,
            "description": "Guest email address (null for authenticated user tickets)"
          },
          "ip_address": {
            "type": "string",
            "description": "IP address of the ticket creator"
          },
          "user_agent": {
            "type": "string",
            "description": "User agent string"
          },
          "category": {
            "type": "string",
            "description": "Ticket category key"
          },
          "importance_level": {
            "type": "string",
            "description": "Ticket importance level"
          },
          "title": {
            "type": "string",
            "description": "Ticket title"
          },
          "content": {
            "type": "string",
            "description": "Ticket content"
          },
          "notify_via_email": {
            "type": "boolean",
            "description": "Whether to notify via email"
          },
          "notification_option": {
            "type": "string",
            "description": "Notification preference"
          },
          "email_sent": {
            "type": "boolean",
            "description": "Whether email notification has been sent"
          },
          "status": {
            "type": "string",
            "description": "Ticket status key"
          },
          "responded_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the ticket was first responded to"
          },
          "resolved_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the ticket was resolved"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketAttachment"
            },
            "description": "File attachments"
          },
          "captcha_session_id": {
            "type": "string",
            "nullable": true,
            "description": "CAPTCHA session ID for spam protection"
          },
          "is_spam": {
            "type": "boolean",
            "description": "Whether the ticket was flagged as spam"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the ticket was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the ticket was last updated"
          },
          "category_display_name": {
            "type": "string",
            "description": "Human-readable category name"
          },
          "category_styling": {
            "type": "string",
            "description": "CSS classes for category styling"
          },
          "category_bg_color": {
            "type": "string",
            "description": "Background color hex code for category"
          },
          "category_text_color": {
            "type": "string",
            "description": "Text color hex code for category"
          },
          "importance_styling": {
            "type": "string",
            "description": "CSS classes for importance level styling"
          },
          "importance_bg_color": {
            "type": "string",
            "description": "Background color hex code for importance level"
          },
          "importance_text_color": {
            "type": "string",
            "description": "Text color hex code for importance level"
          },
          "status_display_name": {
            "type": "string",
            "description": "Human-readable status name"
          },
          "is_unread": {
            "type": "boolean",
            "description": "Whether the ticket is unread"
          },
          "message_count": {
            "type": "integer",
            "description": "Total number of messages in the ticket"
          },
          "latest_message": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Latest message ID"
              },
              "message": {
                "type": "string",
                "description": "Latest message content"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Latest message creation date"
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "User ID"
              },
              "first_name": {
                "type": "string",
                "description": "User's first name"
              },
              "last_name": {
                "type": "string",
                "description": "User's last name"
              },
              "public_username": {
                "type": "string",
                "description": "User's public username"
              },
              "profile_picture_url": {
                "type": "string",
                "description": "User's profile picture URL"
              }
            }
          },
          "is_guest": {
            "type": "boolean",
            "description": "Whether this is a guest ticket"
          },
          "created_at_local": {
            "type": "string",
            "format": "date-time",
            "description": "Created date in local timezone"
          },
          "created_at_local_formatted": {
            "type": "string",
            "description": "Human-readable formatted creation date"
          },
          "updated_at_local_formatted": {
            "type": "string",
            "description": "Human-readable formatted update date"
          }
        }
      },
      "SupportTicketMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Message ID"
          },
          "support_ticket_id": {
            "type": "integer",
            "description": "Support ticket ID"
          },
          "user_id": {
            "type": "integer",
            "nullable": true,
            "description": "User ID (null for admin messages)"
          },
          "sender_type": {
            "type": "string",
            "description": "Type of sender (user or admin)",
            "enum": ["user", "admin"]
          },
          "sender_name": {
            "type": "string",
            "description": "Name of the sender"
          },
          "sender_email": {
            "type": "string",
            "description": "Email of the sender"
          },
          "message": {
            "type": "string",
            "description": "Message content"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketAttachment"
            },
            "description": "File attachments"
          },
          "is_internal": {
            "type": "boolean",
            "description": "Whether this is an internal message"
          },
          "is_read": {
            "type": "boolean",
            "description": "Whether the message has been read"
          },
          "read_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the message was read"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the message was last updated"
          },
          "formatted_created_at": {
            "type": "string",
            "description": "Human-readable formatted creation date"
          },
          "is_sent_by_user": {
            "type": "boolean",
            "description": "Whether this message was sent by a user"
          },
          "is_sent_by_admin": {
            "type": "boolean",
            "description": "Whether this message was sent by an admin"
          }
        }
      },
      "SupportTicketAttachment": {
        "type": "object",
        "properties": {
          "original_name": {
            "type": "string",
            "description": "Original filename"
          },
          "filename": {
            "type": "string",
            "description": "Stored filename"
          },
          "path": {
            "type": "string",
            "description": "File path"
          },
          "url": {
            "type": "string",
            "description": "Download URL"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes"
          },
          "mime_type": {
            "type": "string",
            "description": "MIME type of the file"
          }
        }
      },
      "SupportTicketResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ticket identifier"
          },
          "ticket_number": {
            "type": "string",
            "description": "Auto-generated ticket number (e.g., \"GEN-123456\")"
          },
          "title": {
            "type": "string",
            "description": "Ticket title"
          },
          "content": {
            "type": "string",
            "description": "Ticket content/description"
          },
          "category": {
            "type": "string",
            "description": "Ticket category key"
          },
          "category_display_name": {
            "type": "string",
            "description": "Human-readable category name"
          },
          "category_styling": {
            "type": "string",
            "description": "CSS classes for category styling"
          },
          "category_bg_color": {
            "type": "string",
            "description": "Hex color for category background"
          },
          "category_text_color": {
            "type": "string",
            "description": "Hex color for category text"
          },
          "importance_level": {
            "type": "string",
            "description": "Importance level key"
          },
          "importance_styling": {
            "type": "string",
            "description": "CSS classes for importance styling"
          },
          "importance_bg_color": {
            "type": "string",
            "description": "Hex color for importance background"
          },
          "importance_text_color": {
            "type": "string",
            "description": "Hex color for importance text"
          },
          "status": {
            "type": "string",
            "description": "Current ticket status"
          },
          "status_display_name": {
            "type": "string",
            "description": "Human-readable status name"
          },
          "is_unread": {
            "type": "boolean",
            "description": "Whether ticket has unread messages"
          },
          "message_count": {
            "type": "integer",
            "description": "Total number of messages"
          },
          "latest_message": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "Message ID"
              },
              "message": {
                "type": "string",
                "description": "Message content"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Message creation timestamp"
              }
            },
            "description": "Most recent message details"
          },
          "formatted_message_preview": {
            "type": "string",
            "nullable": true,
            "description": "Formatted preview of latest message (max 500 chars)"
          },
          "user": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "User ID"
              },
              "first_name": {
                "type": "string",
                "description": "User's first name"
              },
              "last_name": {
                "type": "string",
                "description": "User's last name"
              },
              "full_name": {
                "type": "string",
                "description": "User's full name"
              },
              "public_username": {
                "type": "string",
                "description": "User's public username"
              },
              "profile_picture_url": {
                "type": "string",
                "description": "User's profile picture URL"
              }
            },
            "description": "User profile information (if authenticated)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp of creation"
          },
          "created_at_local_formatted": {
            "type": "string",
            "description": "Formatted local creation time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO timestamp of last update"
          },
          "updated_at_local_formatted": {
            "type": "string",
            "description": "Formatted local update time"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique notification UUID"
          },
          "icon_image_url": {
            "type": "string",
            "description": "URL to the icon image"
          },
          "icon_styling": {
            "type": "string",
            "description": "CSS classes for icon styling"
          },
          "icon_bg_color": {
            "type": "string",
            "description": "Hex color for icon background"
          },
          "category": {
            "type": "string",
            "description": "Notification category"
          },
          "category_group": {
            "type": "string",
            "description": "Grouped category for UI organization"
          },
          "category_styling": {
            "type": "string",
            "description": "CSS classes for category badge"
          },
          "category_bg_color": {
            "type": "string",
            "description": "Hex color for category background"
          },
          "category_text_color": {
            "type": "string",
            "description": "Hex color for category text"
          },
          "importance": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "description": "Importance level"
          },
          "importance_styling": {
            "type": "string",
            "description": "CSS classes for importance badge"
          },
          "importance_bg_color": {
            "type": "string",
            "description": "Hex color for importance background"
          },
          "importance_text_color": {
            "type": "string",
            "description": "Hex color for importance text"
          },
          "header": {
            "type": "string",
            "description": "Notification header/title"
          },
          "message": {
            "type": "string",
            "description": "Full notification message"
          },
          "preview": {
            "type": "string",
            "description": "Short preview of the message"
          },
          "read_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when marked as read"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (UTC)"
          },
          "created_at_formatted": {
            "type": "string",
            "description": "Human-readable formatted date (UTC)"
          },
          "created_at_local": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp in user's timezone"
          },
          "created_at_local_formatted": {
            "type": "string",
            "description": "Human-readable formatted date in user's timezone"
          },
          "is_system_notice": {
            "type": "boolean",
            "description": "Whether it's a system notice"
          },
          "interested_user_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the interested user (for Profile notifications)"
          },
          "interested_user_name": {
            "type": "string",
            "nullable": true,
            "description": "Name of the interested user"
          },
          "interested_user_avatar": {
            "type": "string",
            "nullable": true,
            "description": "Avatar URL of the interested user"
          },
          "status_str": {
            "type": "string",
            "nullable": true,
            "description": "Status text for the notification"
          },
          "status_bg_color": {
            "type": "string",
            "description": "Hex color for status background"
          },
          "status_text_color": {
            "type": "string",
            "description": "Hex color for status text"
          },
          "link": {
            "type": "string",
            "nullable": true,
            "description": "External link associated with notification"
          },
          "link_label": {
            "type": "string",
            "nullable": true,
            "description": "Label for the external link"
          },
          "links_in_message": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of links extracted from the message (domain removed, path only)"
          }
        }
      },
      "NotificationFilters": {
        "type": "object",
        "properties": {
          "importances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Display name for the importance level"
                },
                "value": {
                  "type": "string",
                  "description": "Value for filtering"
                }
              }
            },
            "description": "Available importance filter options"
          },
          "filter_topics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Display name for the category"
                },
                "value": {
                  "type": "string",
                  "description": "Value for filtering"
                }
              }
            },
            "description": "Available category filter options"
          },
          "notify_methods": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Display name for the notification method"
                },
                "value": {
                  "type": "string",
                  "description": "Value for the notification method"
                }
              }
            },
            "description": "Available notification methods"
          },
          "notification_content": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Display name for the content type"
                },
                "value": {
                  "type": "string",
                  "description": "Value for the content type"
                }
              }
            },
            "description": "Available content type options"
          }
        }
      },
      "NotificationPreferences": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Preferences ID"
          },
          "user_id": {
            "type": "integer",
            "description": "User ID"
          },
          "important_notices_email": {
            "type": "boolean",
            "description": "Receive important notices via email"
          },
          "important_notices_push": {
            "type": "boolean",
            "description": "Receive important notices via push"
          },
          "content_type": {
            "type": "string",
            "enum": ["header", "header_content"],
            "description": "Content type preference"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When preferences were created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When preferences were last updated"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of items"
          },
          "per_page": {
            "type": "integer",
            "description": "Number of items per page"
          },
          "current_page": {
            "type": "integer",
            "description": "Current page number"
          },
          "last_page": {
            "type": "integer",
            "description": "Last page number"
          }
        }
      },
      "AffiliateLink": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of landing page"
          },
          "url": {
            "type": "string",
            "description": "Complete affiliate link with referral code"
          },
          "description": {
            "type": "string",
            "description": "Description of the landing page"
          }
        }
      },
      "AffiliateLinksResponse": {
        "type": "object",
        "properties": {
          "affiliate_code": {
            "type": "string",
            "description": "Unique affiliate code for the user"
          },
          "affiliate_links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliateLink"
            },
            "description": "Array of available affiliate links"
          }
        }
      },
      "AffiliateStats": {
        "type": "object",
        "properties": {
          "users_referred": {
            "type": "integer",
            "description": "Total number of users referred by the affiliate"
          },
          "affiliate_earning_balance": {
            "type": "number",
            "description": "Total earnings balance (numeric)"
          },
          "affiliate_earning_balance_trimmed": {
            "type": "string",
            "description": "Formatted earnings balance with commas"
          },
          "total_earnings_count": {
            "type": "integer",
            "description": "Total number of earning transactions"
          },
          "currency": {
            "type": "string",
            "description": "User's preferred currency"
          }
        }
      },
      "ReferralEarning": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique record identifier"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Full name of referred user"
              },
              "username": {
                "type": "string",
                "description": "Public username"
              },
              "profile_picture_url": {
                "type": "string",
                "description": "Profile picture URL"
              }
            }
          },
          "earning": {
            "type": "number",
            "description": "Earning amount in user's local currency"
          },
          "original_amount": {
            "type": "number",
            "description": "Original transaction amount"
          },
          "amount_trimmed": {
            "type": "string",
            "description": "Formatted original amount"
          },
          "amount_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted earning amount"
          },
          "currency": {
            "type": "string",
            "description": "Transaction currency"
          },
          "earning_percentage": {
            "type": "number",
            "description": "Commission percentage earned (always 25.00%)"
          },
          "transaction_id": {
            "type": "integer",
            "description": "Associated transaction ID"
          },
          "earning_type": {
            "type": "string",
            "description": "Type of earning (e.g., subscription_purchase)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "UTC timestamp"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "created_at_local": {
            "type": "string",
            "format": "date-time",
            "description": "Localized timestamp"
          },
          "created_at_local_formatted": {
            "type": "string",
            "description": "Human-readable local timestamp"
          }
        }
      },
      "ReferralsEarningsResponse": {
        "type": "object",
        "properties": {
          "referrals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferralEarning"
            },
            "description": "Array of earning history records"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination",
            "description": "Pagination information"
          }
        }
      },
      "FAQ": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the FAQ",
            "example": "password-reset"
          },
          "question": {
            "type": "string",
            "description": "The frequently asked question",
            "example": "How do I reset my password?"
          },
          "answer": {
            "type": "string",
            "description": "The answer to the question",
            "example": "To reset your password, go to the login page and click on \"Forgot Password\". Enter your email address and follow the instructions sent to your email. Make sure to check your spam folder if you don't receive the email immediately."
          },
          "category": {
            "type": "string",
            "description": "Category of the FAQ",
            "enum": ["password", "account", "profile", "payment", "chat", "subscription", "privacy"],
            "example": "password"
          }
        }
      },
      "HelpdeskQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the helpdesk question",
            "example": 123
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user who asked the question",
            "example": 456
          },
          "question": {
            "type": "string",
            "description": "The user's question",
            "example": "How do I reset my password?"
          },
          "cache_key": {
            "type": "string",
            "description": "Cache key for the AI response",
            "example": "help_center_5f4dcc3b5aa765d61d8327deb882cf99"
          },
          "ai_response": {
            "type": "string",
            "description": "AI-generated response in plain text format",
            "example": "To reset your password, follow these steps..."
          },
          "ai_response_html": {
            "type": "string",
            "description": "AI-generated response in HTML format with Tailwind CSS classes",
            "example": "<p class=\"text-base text-gray-800 mb-4\">To reset your password, follow these steps:</p>..."
          },
          "resolved": {
            "type": "boolean",
            "description": "Whether the question has been marked as resolved",
            "example": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the question was created",
            "example": "2024-01-15T10:30:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the question was last updated",
            "example": "2024-01-15T10:30:00.000000Z"
          }
        }
      },
      "FinancialProfileResponse": {
        "type": "object",
        "description": "Response for financial profile information",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "$ref": "#/components/schemas/FinancialProfileData"
          }
        }
      },
      "FinancialProfileData": {
        "type": "object",
        "description": "Financial profile data structure",
        "properties": {
          "currency": {
            "type": "string",
            "description": "User's preferred currency code",
            "example": "USD"
          },
          "pending_lifestyle_support_budget": {
            "type": "number",
            "description": "Pending lifestyle support budget for subscription upgrades",
            "example": 0
          },
          "pending_lifestyle_support_budget_trimmed": {
            "type": "string",
            "description": "Formatted pending lifestyle support budget",
            "example": "0"
          },
          "lifestyle_support_budget": {
            "type": "number",
            "description": "Monthly lifestyle support budget amount",
            "example": 5000
          },
          "lifestyle_support_budget_in_sc": {
            "type": "number",
            "description": "Lifestyle support budget in system currency",
            "example": 5000
          },
          "lifestyle_support_budget_trimmed": {
            "type": "string",
            "description": "Formatted lifestyle support budget with thousand separators",
            "example": "5,000"
          },
          "lifestyle_support_budget_in_sc_trimmed": {
            "type": "string",
            "description": "Formatted lifestyle support budget in system currency",
            "example": "5,000"
          },
          "lifestyle_support_budget_in_lc": {
            "type": "number",
            "description": "Lifestyle support budget converted to local/display currency",
            "example": 5000
          },
          "lifestyle_support_budget_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted lifestyle support budget in local currency with thousand separators",
            "example": "5,000"
          },
          "budget_upgrade_payment": {
            "type": "number",
            "description": "Payment amount for budget upgrade",
            "example": 1000
          },
          "budget_upgrade_payment_trimmed": {
            "type": "string",
            "description": "Formatted budget upgrade payment",
            "example": "1,000"
          },
          "capital_level_precise": {
            "type": "string",
            "description": "Precise capital level value",
            "example": "1000000"
          },
          "capital_level_precise_in_lc": {
            "type": "number",
            "description": "Precise capital level converted to local currency",
            "example": 3670000
          },
          "capital_level_precise_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted precise capital level in local currency",
            "example": "3,670,000"
          },
          "capital_level_less_precise": {
            "type": "string",
            "description": "Less precise capital level value",
            "example": "1M+"
          },
          "capital_level_less_precise_in_lc": {
            "type": "string",
            "description": "Less precise capital level label in local currency",
            "example": "3.67M+ AED"
          },
          "monthly_income_precise": {
            "type": "string",
            "description": "Precise monthly income value",
            "example": "50000"
          },
          "monthly_income_precise_in_lc": {
            "type": "number",
            "description": "Precise monthly income converted to local currency",
            "example": 183500
          },
          "monthly_income_precise_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted precise monthly income in local currency",
            "example": "183,500"
          },
          "monthly_income_less_precise": {
            "type": "string",
            "description": "Less precise monthly income value",
            "example": "50K+"
          },
          "monthly_income_less_precise_in_lc": {
            "type": "string",
            "description": "Less precise monthly income label in local currency",
            "example": "183.5K+ AED"
          },
          "first_child_payment": {
            "type": "number",
            "description": "Payment amount for first child",
            "example": 10000
          },
          "first_child_payment_in_lc": {
            "type": "number",
            "description": "First child payment converted to local currency",
            "example": 36700
          },
          "first_child_payment_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted first child payment in local currency",
            "example": "36,700"
          },
          "first_child_payment_trimmed": {
            "type": "string",
            "description": "Formatted first child payment",
            "example": "10,000"
          },
          "second_child_payment": {
            "type": "number",
            "description": "Payment amount for second child",
            "example": 8000
          },
          "second_child_payment_in_lc": {
            "type": "number",
            "description": "Second child payment converted to local currency",
            "example": 29360
          },
          "second_child_payment_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted second child payment in local currency",
            "example": "29,360"
          },
          "second_child_payment_trimmed": {
            "type": "string",
            "description": "Formatted second child payment",
            "example": "8,000"
          },
          "subsequent_child_payment": {
            "type": "number",
            "description": "Payment amount for subsequent children",
            "example": 5000
          },
          "subsequent_child_payment_in_lc": {
            "type": "number",
            "description": "Subsequent child payment converted to local currency",
            "example": 18350
          },
          "subsequent_child_payment_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted subsequent child payment in local currency",
            "example": "18,350"
          },
          "subsequent_child_payment_trimmed": {
            "type": "string",
            "description": "Formatted subsequent child payment",
            "example": "5,000"
          },
          "monthly_child_budget": {
            "type": "number",
            "description": "Monthly budget for children",
            "example": 2000
          },
          "monthly_child_budget_in_lc": {
            "type": "number",
            "description": "Monthly child budget converted to local currency",
            "example": 7340
          },
          "monthly_child_budget_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted monthly child budget in local currency",
            "example": "7,340"
          },
          "monthly_child_budget_trimmed": {
            "type": "string",
            "description": "Formatted monthly child budget",
            "example": "2,000"
          },
          "marriage_gift": {
            "type": "number",
            "description": "Gift amount for marriage milestone",
            "example": 50000
          },
          "marriage_gift_in_lc": {
            "type": "number",
            "description": "Marriage gift converted to local currency",
            "example": 183500
          },
          "marriage_gift_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted marriage gift in local currency",
            "example": "183,500"
          },
          "marriage_gift_trimmed": {
            "type": "string",
            "description": "Formatted marriage gift amount",
            "example": "50,000"
          },
          "termination_comp": {
            "type": "number",
            "description": "Termination compensation amount",
            "example": 10000
          },
          "termination_comp_in_lc": {
            "type": "number",
            "description": "Termination compensation converted to local currency",
            "example": 36700
          },
          "termination_comp_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted termination compensation in local currency",
            "example": "36,700"
          },
          "termination_comp_trimmed": {
            "type": "string",
            "description": "Formatted termination compensation",
            "example": "10,000"
          },
          "termination_clause": {
            "type": "integer",
            "description": "Termination notice period in months",
            "example": 6
          },
          "milestone_gifts": {
            "type": "array",
            "description": "Array of milestone gift configurations",
            "items": {
              "$ref": "#/components/schemas/MilestoneGift"
            }
          },
          "milestone_gifts_total": {
            "type": "number",
            "description": "Total amount of all milestone gifts",
            "example": 5000
          },
          "milestone_gifts_total_in_lc": {
            "type": "number",
            "description": "Total milestone gifts converted to local currency",
            "example": 18350
          },
          "milestone_gifts_total_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted total milestone gifts in local currency",
            "example": "18,350"
          },
          "milestone_gifts_total_trimmed": {
            "type": "string",
            "description": "Formatted total milestone gifts amount",
            "example": "5,000"
          },
          "currency_detail": {
            "$ref": "#/components/schemas/CurrencyDetail"
          },
          "growth_bonus": {
            "type": "integer",
            "description": "Growth bonus percentage",
            "example": 10
          },
          "growth_bonus_in_lc": {
            "type": "integer",
            "description": "Growth bonus in local currency (same as original for percentages)",
            "example": 10
          },
          "growth_bonus_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted growth bonus",
            "example": "10"
          },
          "growth_bonus_trimmed": {
            "type": "string",
            "description": "Formatted growth bonus percentage",
            "example": "10"
          },
          "growth_clause": {
            "type": "integer",
            "description": "Growth clause duration in months",
            "example": 12
          }
        }
      },
      "MilestoneGift": {
        "type": "object",
        "description": "Milestone gift configuration",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the milestone gift",
            "example": 1
          },
          "amount": {
            "type": "number",
            "description": "Gift amount",
            "example": 5000
          },
          "amount_in_lc": {
            "type": "number",
            "description": "Gift amount in local currency",
            "example": 18350
          },
          "amount_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted gift amount in local currency",
            "example": "18,350"
          },
          "period": {
            "type": "string",
            "description": "Milestone gift period (e.g., '6m', '1y')",
            "example": "6m"
          },
          "period_label": {
            "type": "string",
            "description": "Human-readable period label",
            "example": "6 months"
          }
        }
      },
      "CurrencyDetail": {
        "type": "object",
        "description": "Currency information details",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the currency",
            "example": 1
          },
          "code": {
            "type": "string",
            "description": "Currency code",
            "example": "USD"
          },
          "name": {
            "type": "string",
            "description": "Currency name",
            "example": "US Dollar"
          },
          "symbol": {
            "type": "string",
            "description": "Currency symbol",
            "example": "$"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when currency was created",
            "example": "2024-03-20T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when currency was last updated",
            "example": "2024-03-20T10:00:00Z"
          }
        }
      },
      "FinancialProfileOptionsResponse": {
        "type": "object",
        "description": "Response for financial profile options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "$ref": "#/components/schemas/FinancialProfileOptionsData"
          }
        }
      },
      "FinancialProfileOptionsData": {
        "type": "object",
        "description": "Financial profile options data structure",
        "properties": {
          "capital_level_precise": {
            "type": "array",
            "description": "Available precise capital level options",
            "items": {
              "$ref": "#/components/schemas/FinancialOption"
            }
          },
          "capital_level_less_precise": {
            "type": "array",
            "description": "Available less precise capital level options",
            "items": {
              "$ref": "#/components/schemas/FinancialOption"
            }
          },
          "monthly_income_precise": {
            "type": "array",
            "description": "Available precise monthly income options",
            "items": {
              "$ref": "#/components/schemas/FinancialOption"
            }
          },
          "monthly_income_less_precise": {
            "type": "array",
            "description": "Available less precise monthly income options",
            "items": {
              "$ref": "#/components/schemas/FinancialOption"
            }
          },
          "relationship_milestone_durations": {
            "type": "array",
            "description": "Available milestone duration options",
            "items": {
              "$ref": "#/components/schemas/FinancialOption"
            }
          }
        }
      },
      "FinancialOption": {
        "type": "object",
        "description": "Financial option item",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the option",
            "example": "below_100k"
          },
          "value": {
            "type": "string",
            "description": "Value for the option",
            "example": "below_100000"
          },
          "label": {
            "type": "string",
            "description": "Human-readable label for the option",
            "example": "Below 100,000 USD"
          }
        }
      },
      "UserFinancialInfo": {
        "type": "object",
        "description": "Public user financial information",
        "properties": {
          "currency": {
            "type": "string",
            "description": "User's preferred currency code",
            "example": "USD"
          },
          "pending_lifestyle_support_budget": {
            "type": "number",
            "description": "Pending lifestyle support budget for subscription upgrades",
            "example": 0
          },
          "pending_lifestyle_support_budget_trimmed": {
            "type": "string",
            "description": "Formatted pending lifestyle support budget",
            "example": "0"
          },
          "lifestyle_support_budget": {
            "type": "number",
            "description": "Monthly lifestyle support budget amount",
            "example": 5000
          },
          "lifestyle_support_budget_in_sc": {
            "type": "number",
            "description": "Lifestyle support budget in system currency",
            "example": 5000
          },
          "lifestyle_support_budget_trimmed": {
            "type": "string",
            "description": "Formatted lifestyle support budget with thousand separators",
            "example": "5,000"
          },
          "lifestyle_support_budget_trimmed_in_sc": {
            "type": "string",
            "description": "Formatted lifestyle support budget in system currency",
            "example": "5,000"
          },
          "lifestyle_support_budget_in_lc": {
            "type": "number",
            "description": "Lifestyle support budget converted to local/display currency",
            "example": 5000
          },
          "lifestyle_support_budget_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted lifestyle support budget in local currency with thousand separators",
            "example": "5,000"
          },
          "budget_upgrade_payment": {
            "type": "number",
            "description": "Payment amount for budget upgrade",
            "example": 1000
          },
          "budget_upgrade_payment_trimmed": {
            "type": "string",
            "description": "Formatted budget upgrade payment",
            "example": "1,000"
          },
          "capital_level_precise": {
            "type": "string",
            "description": "Precise capital level value",
            "example": "1000000"
          },
          "capital_level_precise_in_lc": {
            "type": "number",
            "description": "Precise capital level converted to local currency",
            "example": 3670000
          },
          "capital_level_precise_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted precise capital level in local currency",
            "example": "3,670,000"
          },
          "capital_level_less_precise": {
            "type": "string",
            "description": "Less precise capital level value",
            "example": "1M+"
          },
          "capital_level_less_precise_in_lc": {
            "type": "string",
            "description": "Less precise capital level label in local currency",
            "example": "3.67M+ AED"
          },
          "monthly_income_precise": {
            "type": "string",
            "description": "Precise monthly income value",
            "example": "50000"
          },
          "monthly_income_precise_in_lc": {
            "type": "number",
            "description": "Precise monthly income converted to local currency",
            "example": 183500
          },
          "monthly_income_precise_in_lc_trimed": {
            "type": "string",
            "description": "Formatted precise monthly income in local currency (Note: API uses 'trimed' with typo)",
            "example": "183,500"
          },
          "monthly_income_less_precise": {
            "type": "string",
            "description": "Less precise monthly income value",
            "example": "50K+"
          },
          "monthly_income_less_precise_in_lc": {
            "type": "string",
            "description": "Less precise monthly income label in local currency",
            "example": "183.5K+ AED"
          },
          "first_child_payment": {
            "type": "number",
            "description": "Payment amount for first child",
            "example": 10000
          },
          "first_child_payment_in_lc": {
            "type": "number",
            "description": "First child payment converted to local currency",
            "example": 36700
          },
          "first_child_payment_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted first child payment in local currency",
            "example": "36,700"
          },
          "first_child_payment_trimmed": {
            "type": "string",
            "description": "Formatted first child payment",
            "example": "10,000"
          },
          "second_child_payment": {
            "type": "number",
            "description": "Payment amount for second child",
            "example": 8000
          },
          "second_child_payment_in_lc": {
            "type": "number",
            "description": "Second child payment converted to local currency",
            "example": 29360
          },
          "second_child_payment_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted second child payment in local currency",
            "example": "29,360"
          },
          "second_child_payment_trimmed": {
            "type": "string",
            "description": "Formatted second child payment",
            "example": "8,000"
          },
          "subsequent_child_payment": {
            "type": "number",
            "description": "Payment amount for subsequent children",
            "example": 5000
          },
          "subsequent_child_payment_in_lc": {
            "type": "number",
            "description": "Subsequent child payment converted to local currency",
            "example": 18350
          },
          "subsequent_child_payment_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted subsequent child payment in local currency",
            "example": "18,350"
          },
          "subsequent_child_payment_trimmed": {
            "type": "string",
            "description": "Formatted subsequent child payment",
            "example": "5,000"
          },
          "monthly_child_budget": {
            "type": "number",
            "description": "Monthly budget for children",
            "example": 2000
          },
          "monthly_child_budget_in_lc": {
            "type": "number",
            "description": "Monthly child budget converted to local currency",
            "example": 7340
          },
          "monthly_child_budget_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted monthly child budget in local currency",
            "example": "7,340"
          },
          "monthly_child_budget_trimmed": {
            "type": "string",
            "description": "Formatted monthly child budget",
            "example": "2,000"
          },
          "marriage_gift": {
            "type": "number",
            "description": "Gift amount for marriage milestone",
            "example": 50000
          },
          "marriage_gift_in_lc": {
            "type": "number",
            "description": "Marriage gift converted to local currency",
            "example": 183500
          },
          "marriage_gift_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted marriage gift in local currency",
            "example": "183,500"
          },
          "marriage_gift_trimmed": {
            "type": "string",
            "description": "Formatted marriage gift amount",
            "example": "50,000"
          },
          "termination_comp": {
            "type": "number",
            "description": "Termination compensation amount",
            "example": 10000
          },
          "termination_comp_in_lc": {
            "type": "number",
            "description": "Termination compensation converted to local currency",
            "example": 36700
          },
          "termination_comp_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted termination compensation in local currency",
            "example": "36,700"
          },
          "termination_comp_trimmed": {
            "type": "string",
            "description": "Formatted termination compensation",
            "example": "10,000"
          },
          "termination_clause": {
            "type": "integer",
            "description": "Termination notice period in months",
            "example": 6
          },
          "milestone_gifts": {
            "type": "array",
            "description": "Array of milestone gift configurations",
            "items": {
              "$ref": "#/components/schemas/MilestoneGift"
            }
          },
          "milestone_gifts_total": {
            "type": "number",
            "description": "Total amount of all milestone gifts",
            "example": 5000
          },
          "milestone_gifts_total_in_lc": {
            "type": "number",
            "description": "Total milestone gifts converted to local currency",
            "example": 18350
          },
          "milestone_gifts_total_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted total milestone gifts in local currency",
            "example": "18,350"
          },
          "milestone_gifts_total_trimmed": {
            "type": "string",
            "description": "Formatted total milestone gifts amount",
            "example": "5,000"
          },
          "currency_detail": {
            "$ref": "#/components/schemas/CurrencyDetail"
          },
          "growth_bonus": {
            "type": "integer",
            "description": "Growth bonus percentage",
            "example": 10
          },
          "growth_bonus_in_lc": {
            "type": "integer",
            "description": "Growth bonus in local currency (same as original for percentages)",
            "example": 10
          },
          "growth_bonus_in_lc_trimmed": {
            "type": "string",
            "description": "Formatted growth bonus",
            "example": "10"
          },
          "growth_bonus_trimmed": {
            "type": "string",
            "description": "Formatted growth bonus percentage",
            "example": "10"
          },
          "growth_clause": {
            "type": "integer",
            "description": "Growth clause duration in months",
            "example": 12
          }
        }
      },
      "UpdateFinancialProfileRequest": {
        "type": "object",
        "description": "Request body for updating financial profile",
        "properties": {
          "lifestyle_support_budget": {
            "type": "number",
            "description": "Monthly lifestyle support budget (required)",
            "minimum": 0,
            "example": 5000
          },
          "capital_level_precise": {
            "type": "string",
            "description": "Precise capital level value (mutually exclusive with capital_level_less_precise)",
            "example": "1000000"
          },
          "capital_level_less_precise": {
            "type": "string",
            "description": "Less precise capital level value (mutually exclusive with capital_level_precise)",
            "example": "1M+"
          },
          "monthly_income_precise": {
            "type": "string",
            "description": "Precise monthly income value",
            "example": "50000"
          },
          "monthly_income_less_precise": {
            "type": "string",
            "description": "Less precise monthly income value",
            "example": "50K+"
          },
          "first_child_payment": {
            "type": "number",
            "description": "Payment for first child",
            "minimum": 0,
            "example": 10000
          },
          "second_child_payment": {
            "type": "number",
            "description": "Payment for second child",
            "minimum": 0,
            "example": 8000
          },
          "subsequent_child_payment": {
            "type": "number",
            "description": "Payment for subsequent children",
            "minimum": 0,
            "example": 5000
          },
          "monthly_child_budget": {
            "type": "number",
            "description": "Monthly budget for children",
            "minimum": 0,
            "example": 2000
          },
          "marriage_gift": {
            "type": "number",
            "description": "Gift amount for marriage",
            "minimum": 0,
            "example": 50000
          },
          "growth_bonus": {
            "type": "number",
            "description": "Growth bonus percentage",
            "minimum": 0,
            "maximum": 100,
            "example": 10
          },
          "growth_clause": {
            "type": "number",
            "description": "Growth clause duration in months",
            "minimum": 1,
            "example": 12
          },
          "termination_comp": {
            "type": "number",
            "description": "Termination compensation",
            "minimum": 0,
            "example": 10000
          },
          "termination_clause": {
            "type": "number",
            "description": "Termination notice period in months",
            "minimum": 6,
            "example": 6
          },
          "milestone_amounts": {
            "type": "array",
            "description": "Array of milestone gift amounts",
            "items": {
              "type": "number",
              "minimum": 0
            },
            "example": [5000, 10000]
          },
          "milestone_periods": {
            "type": "array",
            "description": "Array of milestone gift periods",
            "items": {
              "type": "string"
            },
            "example": ["6 months", "1 year"]
          }
        },
        "required": ["lifestyle_support_budget"]
      },
      "UpdateFinancialProfileResponse": {
        "type": "object",
        "description": "Response for financial profile update",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Financial profile updated successfully"
          },
          "data": {
            "$ref": "#/components/schemas/UpdatedFinancialProfileData"
          }
        }
      },
      "UpdatedFinancialProfileData": {
        "type": "object",
        "description": "Updated financial profile data",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Financial profile ID",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "description": "User ID",
            "example": 1
          },
          "currency": {
            "type": "string",
            "description": "User's preferred currency code",
            "example": "USD"
          },
          "lifestyle_support_budget": {
            "type": "number",
            "description": "Monthly lifestyle support budget amount",
            "example": 5000
          },
          "lifestyle_support_budget_in_sc": {
            "type": "number",
            "description": "Lifestyle support budget in system currency",
            "example": 5000
          },
          "capital_level_precise": {
            "type": "string",
            "description": "Precise capital level value",
            "example": "1000000"
          },
          "capital_level_less_precise": {
            "type": "string",
            "description": "Less precise capital level value",
            "example": null
          },
          "monthly_income_precise": {
            "type": "string",
            "description": "Precise monthly income value",
            "example": "50000"
          },
          "monthly_income_less_precise": {
            "type": "string",
            "description": "Less precise monthly income value",
            "example": null
          },
          "first_child_payment": {
            "type": "number",
            "description": "Payment amount for first child",
            "example": 10000
          },
          "second_child_payment": {
            "type": "number",
            "description": "Payment amount for second child",
            "example": 8000
          },
          "subsequent_child_payment": {
            "type": "number",
            "description": "Payment amount for subsequent children",
            "example": 5000
          },
          "monthly_child_budget": {
            "type": "number",
            "description": "Monthly budget for children",
            "example": 2000
          },
          "marriage_gift": {
            "type": "number",
            "description": "Gift amount for marriage milestone",
            "example": 50000
          },
          "growth_bonus": {
            "type": "number",
            "description": "Growth bonus percentage",
            "example": 10
          },
          "growth_clause": {
            "type": "number",
            "description": "Growth clause duration in months",
            "example": 12
          },
          "termination_comp": {
            "type": "number",
            "description": "Termination compensation amount",
            "example": 10000
          },
          "termination_clause": {
            "type": "number",
            "description": "Termination notice period in months",
            "example": 6
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when profile was created",
            "example": "2024-03-20T10:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when profile was last updated",
            "example": "2024-03-20T10:00:00Z"
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "description": "Response for validation errors",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Please check your inputs and try again."
          },
          "errors": {
            "type": "object",
            "description": "Field-specific validation errors",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": {
              "capital_level_precise": [
                "You can select only one: either Capital Level (Precise) or Capital Level (Less Precise)."
              ]
            }
          }
        }
      },
      "AboutMeOptionsResponse": {
        "type": "object",
        "description": "Response for about me options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "$ref": "#/components/schemas/AboutMeOptionsData"
          }
        }
      },
      "AboutMeOptionsData": {
        "type": "object",
        "description": "About me options data structure",
        "properties": {
          "education_levels": {
            "type": "array",
            "description": "Available education level options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "professions": {
            "type": "array",
            "description": "Available profession options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "religions": {
            "type": "array",
            "description": "Available religion options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "age_displays": {
            "type": "array",
            "description": "Available age display options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "ethnicities": {
            "type": "array",
            "description": "Available ethnicity options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "orientations": {
            "type": "array",
            "description": "Available sexual orientation options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "personality_types": {
            "type": "array",
            "description": "Available personality type options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "languages": {
            "type": "array",
            "description": "Available language options from database",
            "items": {
              "$ref": "#/components/schemas/LanguageItem"
            }
          },
          "hobbies": {
            "type": "array",
            "description": "Available hobby options from database",
            "items": {
              "$ref": "#/components/schemas/HobbyItem"
            }
          },
          "relocation_readiness": {
            "type": "array",
            "description": "Available relocation readiness options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "RelationshipPreferenceOptionsResponse": {
        "type": "object",
        "description": "Response for relationship preference options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "$ref": "#/components/schemas/RelationshipPreferenceOptionsData"
          }
        }
      },
      "RelationshipPreferenceOptionsData": {
        "type": "object",
        "description": "Relationship preference options data structure",
        "properties": {
          "relationship_goals": {
            "type": "array",
            "description": "Available relationship goal options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "partner_preferences": {
            "type": "array",
            "description": "Available partner preference options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "duration_of_relationship": {
            "type": "array",
            "description": "Available relationship duration options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "available_time_morning": {
            "type": "array",
            "description": "Available morning time slot options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "available_time_afternoon": {
            "type": "array",
            "description": "Available afternoon time slot options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "available_time_evening": {
            "type": "array",
            "description": "Available evening time slot options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "LivingPreferencesOptionsResponse": {
        "type": "object",
        "description": "Response for living preferences options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "$ref": "#/components/schemas/LivingPreferencesOptionsData"
          }
        }
      },
      "LivingPreferencesOptionsData": {
        "type": "object",
        "description": "Living preferences options data structure",
        "properties": {
          "driving_license_availability": {
            "type": "array",
            "description": "Available driving license availability options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "car_availability": {
            "type": "array",
            "description": "Available car availability options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "driver_availability": {
            "type": "array",
            "description": "Available driver availability options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "living_format_test_moon": {
            "type": "array",
            "description": "Available test moon living format options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "living_format_preliminary_contract": {
            "type": "array",
            "description": "Available preliminary contract living format options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          },
          "living_format_final_contract": {
            "type": "array",
            "description": "Available final contract living format options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "AgeDisplayOptionsResponse": {
        "type": "object",
        "description": "Response for age display options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available age display options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "OrientationOptionsResponse": {
        "type": "object",
        "description": "Response for sexual orientation options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available sexual orientation options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "ReligionOptionsResponse": {
        "type": "object",
        "description": "Response for religion options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available religion options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "EthnicityOptionsResponse": {
        "type": "object",
        "description": "Response for ethnicity options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available ethnicity options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "PersonalityTypeOptionsResponse": {
        "type": "object",
        "description": "Response for personality type options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available personality type options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "RelocationReadinessOptionsResponse": {
        "type": "object",
        "description": "Response for relocation readiness options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available relocation readiness options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "EducationLevelOptionsResponse": {
        "type": "object",
        "description": "Response for education level options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available education level options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "HobbyOptionsResponse": {
        "type": "object",
        "description": "Response for hobby options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available hobby options",
            "items": {
              "$ref": "#/components/schemas/OptionItem"
            }
          }
        }
      },
      "LanguageOptionsResponse": {
        "type": "object",
        "description": "Response for language options",
        "properties": {
          "error": {
            "type": "boolean",
            "description": "Indicates if an error occurred",
            "example": false
          },
          "data": {
            "type": "array",
            "description": "Available language options",
            "items": {
              "$ref": "#/components/schemas/LanguageItem"
            }
          }
        }
      },
      "OptionItem": {
        "type": "object",
        "description": "Generic option item with label and value",
        "properties": {
          "label": {
            "type": "string",
            "description": "Human-readable display text",
            "example": "High School / Secondary School"
          },
          "value": {
            "type": "string",
            "description": "Machine-readable value for form submission",
            "example": "high_school"
          }
        }
      },
      "LanguageItem": {
        "type": "object",
        "description": "Language item with database fields",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the language",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the language",
            "example": "English"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when language was created",
            "example": "2024-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when language was last updated",
            "example": "2024-01-01T00:00:00.000000Z"
          }
        }
      },
      "HobbyItem": {
        "type": "object",
        "description": "Hobby item with database fields",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the hobby",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the hobby",
            "example": "Reading"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when hobby was created",
            "example": "2024-01-01T00:00:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when hobby was last updated",
            "example": "2024-01-01T00:00:00.000000Z"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "description": "Complete user profile information",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User ID",
            "example": 123
          },
          "public_username": {
            "type": "string",
            "description": "Public username",
            "example": "john_doe"
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "john@example.com"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "example": "male"
          },
          "partner_preference": {
            "type": "string",
            "description": "Partner gender preference",
            "example": "female"
          },
          "relationship_goals": {
            "type": "string",
            "description": "Relationship goals",
            "example": "marriage"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "example": "user"
          },
          "profile_picture_url": {
            "type": "string",
            "description": "Profile picture URL",
            "example": "https://example.com/profile.jpg"
          },
          "hide_images": {
            "type": "integer",
            "description": "Hide images flag (0 = show, 1 = hide)",
            "example": 0
          },
          "initials": {
            "type": "string",
            "description": "User initials",
            "example": "JD"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileDetails"
          },
          "financialProfile": {
            "type": "object",
            "description": "Financial profile information",
            "nullable": true
          },
          "lifestyle_support_budget": {
            "type": "string",
            "description": "Lifestyle support budget",
            "example": "5000.00"
          },
          "lifestyle_support_budget_trimmed": {
            "type": "string",
            "description": "Formatted lifestyle support budget",
            "example": "5,000"
          },
          "profileImages": {
            "type": "array",
            "description": "Profile images",
            "items": {
              "$ref": "#/components/schemas/UserImage"
            }
          }
        }
      },
      "UserProfileDetails": {
        "type": "object",
        "description": "Detailed user profile information",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Profile ID",
            "example": 123
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "description": "Birth date (null if age range display is used)",
            "nullable": true,
            "example": "1990-05-15"
          },
          "birth_date_formatted": {
            "type": "string",
            "description": "Formatted birth date (null if age range display is used)",
            "nullable": true,
            "example": "May 15, 1990"
          },
          "age": {
            "oneOf": [
              {
                "type": "integer",
                "description": "Exact age when age_display is 'Show Exact Age'",
                "example": 34
              },
              {
                "type": "string",
                "description": "Age range when age_display is 'Show Age Range'",
                "example": "31-35"
              }
            ]
          },
          "age_display": {
            "type": "string",
            "description": "Age display preference",
            "enum": ["Show Exact Age", "Show Age Range", "Hide Age"],
            "example": "Show Exact Age"
          },
          "orientation": {
            "type": "string",
            "description": "Sexual orientation",
            "example": "Straight"
          },
          "short_intro": {
            "type": "string",
            "description": "Short introduction",
            "example": "Looking for meaningful connections"
          },
          "weight_mesurement": {
            "type": "string",
            "description": "Weight measurement unit",
            "example": "kg"
          },
          "weight": {
            "type": "number",
            "description": "Weight",
            "example": 70
          },
          "height_mesurement": {
            "type": "string",
            "description": "Height measurement unit",
            "example": "cm"
          },
          "height": {
            "type": "number",
            "description": "Height",
            "example": 175
          },
          "extended_descriptions": {
            "type": "array",
            "description": "Extended descriptions",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "description": {
                  "type": "string",
                  "example": "I love traveling and exploring new cultures"
                },
                "order": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          },
          "family_views": {
            "type": "string",
            "description": "Family views",
            "example": "Open to having children"
          },
          "financial_views": {
            "type": "string",
            "description": "Financial views",
            "example": "Financial stability is important"
          },
          "long_term_views": {
            "type": "string",
            "description": "Long-term views",
            "example": "Looking for a life partner"
          },
          "secret_text": {
            "type": "string",
            "description": "Secret text",
            "example": "I'm secretly a great cook"
          },
          "education_level": {
            "type": "string",
            "description": "Education level",
            "example": "Bachelor's Degree"
          },
          "profession": {
            "type": "string",
            "description": "Profession",
            "example": "Software Engineer"
          },
          "religion": {
            "type": "string",
            "description": "Religion",
            "example": "Christian"
          },
          "ethnicity": {
            "type": "string",
            "description": "Ethnicity",
            "example": "Caucasian"
          },
          "astrology_belief": {
            "type": "string",
            "description": "Astrology belief level",
            "example": "Moderately interested"
          },
          "personality_type": {
            "type": "string",
            "description": "Personality type",
            "example": "INTJ"
          },
          "location_residence": {
            "type": "string",
            "description": "Current residence location",
            "example": "New York, NY, USA"
          },
          "location_residence_place_id": {
            "type": "string",
            "description": "Google Place ID for residence",
            "example": "ChIJOwg_06VPwokRYv534QaPC8g"
          },
          "location_residence_latitude": {
            "type": "number",
            "description": "Residence latitude",
            "example": 40.7128
          },
          "location_residence_longitude": {
            "type": "number",
            "description": "Residence longitude",
            "example": -74.0060
          },
          "location_residence_secondary_text": {
            "type": "string",
            "description": "Residence secondary text",
            "example": "Manhattan"
          },
          "relocation_readiness": {
            "type": "string",
            "description": "Relocation readiness",
            "example": "Open to relocation"
          },
          "location_search": {
            "type": "string",
            "description": "Desired search location",
            "example": "San Francisco, CA, USA"
          },
          "location_search_place_id": {
            "type": "string",
            "description": "Google Place ID for search location",
            "example": "ChIJIQBpAG2ahYAR_6128GcTUEo"
          },
          "location_search_latitude": {
            "type": "number",
            "description": "Search location latitude",
            "example": 37.7749
          },
          "location_search_longitude": {
            "type": "number",
            "description": "Search location longitude",
            "example": -122.4194
          },
          "location_search_secondary_text": {
            "type": "string",
            "description": "Search location secondary text",
            "example": "Bay Area"
          },
          "location_difference_reason": {
            "type": "string",
            "description": "Reason for location difference",
            "example": "Career opportunities"
          },
          "languages": {
            "type": "array",
            "description": "User languages",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "code": {
                  "type": "string",
                  "example": "en"
                },
                "name": {
                  "type": "string",
                  "example": "English"
                },
                "fluency": {
                  "type": "integer",
                  "example": 5
                }
              }
            }
          },
          "hobbies": {
            "type": "array",
            "description": "User hobbies",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Photography"
                },
                "emoji": {
                  "type": "string",
                  "example": "📸"
                },
                "icon_url": {
                  "type": "string",
                  "example": "https://example.com/icons/photography.png"
                },
                "icon_url_active": {
                  "type": "string",
                  "example": "https://example.com/icons/photography-active.png"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00.000000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-20T14:45:00.000000Z"
          }
        }
      },
      "UserRelationshipInfo": {
        "type": "object",
        "description": "User relationship information",
        "properties": {
          "relationship_goals": {
            "type": "string",
            "description": "Relationship goals",
            "example": "marriage"
          },
          "relationship_goals_text": {
            "type": "string",
            "description": "Relationship goals text",
            "example": "Looking for marriage"
          },
          "partner_preference": {
            "type": "string",
            "description": "Partner preference",
            "example": "female"
          },
          "duration_preference": {
            "type": "string",
            "description": "Duration preference",
            "example": "long_term"
          },
          "duration_preference_text": {
            "type": "string",
            "description": "Duration preference text",
            "example": "Long-term relationship"
          },
          "available_time_morning": {
            "type": "boolean",
            "description": "Available in the morning",
            "example": true
          },
          "available_time_afternoon": {
            "type": "boolean",
            "description": "Available in the afternoon",
            "example": true
          },
          "available_time_evening": {
            "type": "boolean",
            "description": "Available in the evening",
            "example": false
          }
        }
      },
      "UserLivingInfo": {
        "type": "object",
        "description": "User living information",
        "properties": {
          "driving_license_availability": {
            "type": "boolean",
            "description": "Has driving license",
            "example": true
          },
          "car_availability": {
            "type": "boolean",
            "description": "Has car available",
            "example": true
          },
          "driver_availability": {
            "type": "boolean",
            "description": "Has driver available",
            "example": true
          },
          "living_format_test_moon": {
            "type": "string",
            "description": "Test moon living format",
            "example": "apartment"
          },
          "living_format_preliminary_contract": {
            "type": "string",
            "description": "Preliminary contract living format",
            "example": "rental"
          },
          "living_format_final_contract": {
            "type": "string",
            "description": "Final contract living format",
            "example": "purchase"
          },
          "living_format_test_moon_image_url": {
            "type": "string",
            "description": "Test moon image URL",
            "example": "https://example.com/test_moon.jpg"
          },
          "living_format_test_moon_image_thumbnail_url": {
            "type": "string",
            "description": "Test moon image thumbnail URL",
            "example": "https://example.com/test_moon_thumb.jpg"
          },
          "living_format_preliminary_contract_image_url": {
            "type": "string",
            "description": "Preliminary contract image URL",
            "example": "https://example.com/preliminary.jpg"
          },
          "living_format_preliminary_contract_image_thumbnail_url": {
            "type": "string",
            "description": "Preliminary contract image thumbnail URL",
            "example": "https://example.com/preliminary_thumb.jpg"
          },
          "living_format_final_contract_image_url": {
            "type": "string",
            "description": "Final contract image URL",
            "example": "https://example.com/final.jpg"
          },
          "living_format_final_contract_image_thumbnail_url": {
            "type": "string",
            "description": "Final contract image thumbnail URL",
            "example": "https://example.com/final_thumb.jpg"
          },
          "housing_image_url": {
            "type": "string",
            "description": "Housing image URL",
            "example": "https://example.com/housing.jpg"
          },
          "housing_image_thumbnail_url": {
            "type": "string",
            "description": "Housing image thumbnail URL",
            "example": "https://example.com/housing_thumb.jpg"
          }
        }
      },
      "UserImage": {
        "type": "object",
        "description": "User image information",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Image ID",
            "example": 123
          },
          "url": {
            "type": "string",
            "description": "Image URL",
            "example": "https://example.com/profile.jpg"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "Thumbnail URL",
            "example": "https://example.com/profile_thumb.jpg"
          }
        }
      },
      "SubscriptionPlan": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 1},
          "level": {"type": "integer", "example": 1},
          "name": {"type": "string", "example": "Standard Annual Plan"},
          "description": {"type": "string", "example": "Standard subscription plan with basic features"},
          "duration": {"type": "integer", "example": 365},
          "features": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {"type": "string", "example": "Feature Title"},
                "support": {"type": "integer", "example": 1},
                "note": {"type": "string", "example": "Optional additional note"}
              }
            }
          }
        }
      },
      "SubscriptionPlanWithPricing": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 1},
          "level": {"type": "integer", "example": 1},
          "name": {"type": "string", "example": "Standard Annual Plan"},
          "description": {"type": "string", "example": "Standard subscription plan with basic features"},
          "duration": {"type": "integer", "example": 365},
          "price": {"type": "number", "example": 696.00},
          "price_trimmed": {"type": "string", "example": "696"},
          "currency": {"type": "string", "example": "USD"},
          "currency_symbol": {"type": "string", "example": "$"},
          "currency_detail": {"$ref": "#/components/schemas/CurrencyDetail"},
          "icon_url": {"type": "string", "example": "https://startup2050.com/images/standard-plan-icon.png"},
          "features": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {"type": "string", "example": "Feature Title"},
                "support": {"type": "integer", "example": 1}
              }
            }
          },
          "price_calculation_contents": {
            "type": "object",
            "properties": {
              "html": {"type": "string", "example": "<div class='space-y-4 text-sm'>...</div>"},
              "raw": {
                "type": "array",
                "items": {"type": "string"},
                "example": [
                  "Your Standard annual subscription's cost is calculated as 20% of the monthly budget that you set for your future partner in the projection of 1 year:",
                  "Your calculation: 10000.00USD × 12 months × 20% = 2400.00 USD",
                  "For this amount, you get access to all major MatchMeMuch features for the period of one year.",
                  "By buying a subscription, sponsors show the seriousness of their intent and their financial capacity. At the same time, the annual package allows to use MatchMeMuch service for extended time.",
                  "The second and subsequent years cost twice less than the initial subscription's cost."
                ]
              }
            }
          }
        }
      },
      "UserSubscription": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 1},
          "user_id": {"type": "integer", "example": 1},
          "subscription_plan_id": {"type": "integer", "example": 2},
          "transaction_id": {"type": "integer", "example": 123},
          "transaction_number": {"type": "string", "example": "20250125123456"},
          "start_date": {"type": "string", "format": "date-time", "example": "2024-01-01T00:00:00.000000Z"},
          "end_date": {"type": "string", "format": "date-time", "example": "2024-12-31T23:59:59.000000Z"},
          "status": {"type": "string", "example": "active"},
          "price": {"type": "number", "example": 464.00},
          "currency": {"type": "string", "example": "USD"},
          "days_left": {"type": "string", "example": "8 months 15 days 12 hours"},
          "used_months": {"type": "integer", "example": 3},
          "price_trimmed": {"type": "string", "example": "464"},
          "plan": {"$ref": "#/components/schemas/SubscriptionPlan"},
          "currency_details": {"$ref": "#/components/schemas/CurrencyDetail"}
        }
      },
      "BudgetUpgradeSubscription": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 123},
          "user_id": {"type": "integer", "example": 1},
          "subscription_plan_id": {"type": "integer", "example": 1},
          "status": {"type": "string", "example": "active"},
          "monthly_budget": {"type": "number", "description": "Current monthly budget", "example": 5000},
          "monthly_budget_trimmed": {"type": "string", "description": "Formatted current monthly budget", "example": "5,000"},
          "new_monthly_budget": {"type": "number", "description": "New monthly budget after upgrade", "example": 10000},
          "new_monthly_budget_trimmed": {"type": "string", "description": "Formatted new monthly budget", "example": "10,000"},
          "price": {"type": "number", "description": "Current subscription price", "example": 12000.00},
          "price_trimmed": {"type": "string", "description": "Formatted current subscription price", "example": "12,000"},
          "new_pricing": {"type": "number", "description": "New subscription price after upgrade", "example": 24000.00},
          "new_pricing_trimmed": {"type": "string", "description": "Formatted new subscription price", "example": "24,000"},
          "upgrade_price": {"type": "number", "description": "Additional payment required for upgrade", "example": 12000.00},
          "upgrade_price_trimmed": {"type": "string", "description": "Formatted upgrade price", "example": "12,000"},
          "currency": {"type": "string", "description": "Currency code", "example": "USD"},
          "plan": {
            "type": "object",
            "properties": {
              "id": {"type": "integer", "example": 1},
              "name": {"type": "string", "example": "Standard"},
              "level": {"type": "integer", "example": 1}
            }
          },
          "pricing_calculation_details": {
            "type": "array",
            "description": "Step-by-step calculation breakdown for UI display",
            "items": {
              "type": "object",
              "properties": {
                "label": {"type": "string", "description": "Calculation step label", "example": "Current"},
                "calculation": {"type": "string", "description": "Calculation formula", "example": "5,000 x 12 x 20%"},
                "results": {"type": "string", "description": "Calculation result", "example": "12,000"}
              }
            },
            "example": [
              {
                "label": "Current",
                "calculation": "5,000 x 12 x 20%",
                "results": "12,000"
              },
              {
                "label": "New",
                "calculation": "10,000 x 12 x 20%",
                "results": "24,000"
              },
              {
                "label": "Additional Payment",
                "calculation": "24,000 - 12,000",
                "results": "12,000"
              }
            ]
          }
        }
      },
      "FinancialProfile": {
        "type": "object",
        "properties": {
          "currency": {"type": "string", "example": "USD"},
          "lifestyle_support_budget": {"type": "number", "example": 5000},
          "pending_lifestyle_support_budget": {"type": "number", "example": 1000},
          "budget_upgrade_payment": {"type": "number", "example": 1000}
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Bearer token authentication for API access"
      }
    }
  }
}
